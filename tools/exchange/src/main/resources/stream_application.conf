{
  # Spark relation config
  spark: {
    app: {
      name: Spark Writer
    }

    driver: {
      cores: 1
      maxResultSize: 1G
    }

    cores {
      max: 16
    }
  }

  # Nebula Graph relation config
  nebula: {
    addresses: ["127.0.0.1:3699"]
    user: user
    pswd: password
    space: test

    connection {
      timeout: 3000
      retry: 3
    }

    execution {
      retry: 3
    }

    error: {
      max: 32
      output: /tmp/errors
    }

    rate: {
      limit: 1024
      timeout: 1000
    }
  }

  # Processing tags
  tags: [

    # Loading tag from pulsar
    {
      name: tag-name-0
      type: {
        source: pulsar
        sink: client
      }
      service: "pulsar://localhost:6650"
      admin: "http://localhost:8081"
      options: {
        # choose one of "topic", "topics", "topicsPattern"
        topics: "topic1,topic2"
      }
      fields: {
        pulsar-field-0: nebula-field-0,
        pulsar-field-1: nebula-field-1,
        pulsar-field-2: nebula-field-2
      }
      vertex: pulsar-field-0
      partition: 10
      batch: 1000
      interval.seconds: 10
    }

    # Loading from KAFKA
    {
      name: tag-name-1
      type: {
        source: kafka
        sink: client
      }
      service: "kafka.service.address"
      topic: "topic-name"
      fields: {
        kafka-field-0: nebula-field-0,
        kafka-field-1: nebula-field-1,
        kafka-field-2: nebula-field-2
      }
      vertex: kafka-field-0
      partition: 10
      batch: 10
      interval.seconds: 10
    }
  ]

  # Processing edges
  edges: [

    # Loading tag from pulsar
    {
      name: edge-name-0
      type: {
        source: pulsar
        sink: client
      }
      service: "pulsar://localhost:6650"
      admin: "http://localhost:8081"
      options: {
        # choose one of "topic", "topics", "topicsPattern"
        topic: "topic1"
      }
      fields: {
        pulsar-field-0: nebula-field-0,
        pulsar-field-1: nebula-field-1,
        pulsar-field-2: nebula-field-2
      }
      source: {
        field: pulsar-field-0
        policy: "hash"
      }
      target: {
        field: pulsar-field-1
        policy: "uuid"
      }
      ranking: pulsar-field-2
      partition: 10
      batch: 10
      interval.seconds: 10
    }

    # Loading from KAFKA
    {
      name: edge-name-1
      type: {
        source: kafka
        sink: client
      }
      service: "kafka.service.address"
      topic: "topic-name"
      fields: {
        kafka-field-0: nebula-field-0,
        kafka-field-1: nebula-field-1,
        kafka-field-2: nebula-field-2
      }
      source: kafka-field-0
      target: kafka-field-1
      partition: 10
      batch: 1000
      interval.seconds: 10
    }
  ]
}
