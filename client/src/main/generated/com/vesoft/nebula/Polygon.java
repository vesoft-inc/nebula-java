/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Polygon implements TBase, java.io.Serializable, Cloneable, Comparable<Polygon> {
  private static final TStruct STRUCT_DESC = new TStruct("Polygon");
  private static final TField COORD_LIST_LIST_FIELD_DESC = new TField("coordListList", TType.LIST, (short)1);

  public List<List<Coordinate>> coordListList;
  public static final int COORDLISTLIST = 1;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(COORDLISTLIST, new FieldMetaData("coordListList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, Coordinate.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Polygon.class, metaDataMap);
  }

  public Polygon() {
  }

  public Polygon(
      List<List<Coordinate>> coordListList) {
    this();
    this.coordListList = coordListList;
  }

  public static class Builder {
    private List<List<Coordinate>> coordListList;

    public Builder() {
    }

    public Builder setCoordListList(final List<List<Coordinate>> coordListList) {
      this.coordListList = coordListList;
      return this;
    }

    public Polygon build() {
      Polygon result = new Polygon();
      result.setCoordListList(this.coordListList);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Polygon(Polygon other) {
    if (other.isSetCoordListList()) {
      this.coordListList = TBaseHelper.deepCopy(other.coordListList);
    }
  }

  public Polygon deepCopy() {
    return new Polygon(this);
  }

  public List<List<Coordinate>> getCoordListList() {
    return this.coordListList;
  }

  public Polygon setCoordListList(List<List<Coordinate>> coordListList) {
    this.coordListList = coordListList;
    return this;
  }

  public void unsetCoordListList() {
    this.coordListList = null;
  }

  // Returns true if field coordListList is set (has been assigned a value) and false otherwise
  public boolean isSetCoordListList() {
    return this.coordListList != null;
  }

  public void setCoordListListIsSet(boolean __value) {
    if (!__value) {
      this.coordListList = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case COORDLISTLIST:
      if (__value == null) {
        unsetCoordListList();
      } else {
        setCoordListList((List<List<Coordinate>>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COORDLISTLIST:
      return getCoordListList();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Polygon))
      return false;
    Polygon that = (Polygon)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetCoordListList(), that.isSetCoordListList(), this.coordListList, that.coordListList)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {coordListList});
  }

  @Override
  public int compareTo(Polygon other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCoordListList()).compareTo(other.isSetCoordListList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(coordListList, other.coordListList);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case COORDLISTLIST:
          if (__field.type == TType.LIST) {
            {
              TList _list29 = iprot.readListBegin();
              this.coordListList = new ArrayList<List<Coordinate>>(Math.max(0, _list29.size));
              for (int _i30 = 0; 
                   (_list29.size < 0) ? iprot.peekList() : (_i30 < _list29.size); 
                   ++_i30)
              {
                List<Coordinate> _elem31;
                {
                  TList _list32 = iprot.readListBegin();
                  _elem31 = new ArrayList<Coordinate>(Math.max(0, _list32.size));
                  for (int _i33 = 0; 
                       (_list32.size < 0) ? iprot.peekList() : (_i33 < _list32.size); 
                       ++_i33)
                  {
                    Coordinate _elem34;
                    _elem34 = new Coordinate();
                    _elem34.read(iprot);
                    _elem31.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                this.coordListList.add(_elem31);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.coordListList != null) {
      oprot.writeFieldBegin(COORD_LIST_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.coordListList.size()));
        for (List<Coordinate> _iter35 : this.coordListList)        {
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter35.size()));
            for (Coordinate _iter36 : _iter35)            {
              _iter36.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Polygon");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("coordListList");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getCoordListList() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getCoordListList(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

