/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial", "unchecked" })
public class Value extends TUnion<Value> {
  private static final TStruct STRUCT_DESC = new TStruct("Value");
  private static final TField N_VAL_FIELD_DESC = new TField("nVal", TType.I32, (short)1);
  private static final TField B_VAL_FIELD_DESC = new TField("bVal", TType.BOOL, (short)2);
  private static final TField I_VAL_FIELD_DESC = new TField("iVal", TType.I64, (short)3);
  private static final TField F_VAL_FIELD_DESC = new TField("fVal", TType.DOUBLE, (short)4);
  private static final TField S_VAL_FIELD_DESC = new TField("sVal", TType.STRING, (short)5);
  private static final TField D_VAL_FIELD_DESC = new TField("dVal", TType.STRUCT, (short)6);
  private static final TField T_VAL_FIELD_DESC = new TField("tVal", TType.STRUCT, (short)7);
  private static final TField DT_VAL_FIELD_DESC = new TField("dtVal", TType.STRUCT, (short)8);
  private static final TField V_VAL_FIELD_DESC = new TField("vVal", TType.STRUCT, (short)9);
  private static final TField E_VAL_FIELD_DESC = new TField("eVal", TType.STRUCT, (short)10);
  private static final TField P_VAL_FIELD_DESC = new TField("pVal", TType.STRUCT, (short)11);
  private static final TField L_VAL_FIELD_DESC = new TField("lVal", TType.STRUCT, (short)12);
  private static final TField M_VAL_FIELD_DESC = new TField("mVal", TType.STRUCT, (short)13);
  private static final TField U_VAL_FIELD_DESC = new TField("uVal", TType.STRUCT, (short)14);
  private static final TField G_VAL_FIELD_DESC = new TField("gVal", TType.STRUCT, (short)15);

  public static final int NVAL = 1;
  public static final int BVAL = 2;
  public static final int IVAL = 3;
  public static final int FVAL = 4;
  public static final int SVAL = 5;
  public static final int DVAL = 6;
  public static final int TVAL = 7;
  public static final int DTVAL = 8;
  public static final int VVAL = 9;
  public static final int EVAL = 10;
  public static final int PVAL = 11;
  public static final int LVAL = 12;
  public static final int MVAL = 13;
  public static final int UVAL = 14;
  public static final int GVAL = 15;

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(NVAL, new FieldMetaData("nVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(BVAL, new FieldMetaData("bVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(IVAL, new FieldMetaData("iVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(FVAL, new FieldMetaData("fVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(SVAL, new FieldMetaData("sVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(DVAL, new FieldMetaData("dVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Date.class)));
    tmpMetaDataMap.put(TVAL, new FieldMetaData("tVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Time.class)));
    tmpMetaDataMap.put(DTVAL, new FieldMetaData("dtVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, DateTime.class)));
    tmpMetaDataMap.put(VVAL, new FieldMetaData("vVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Vertex.class)));
    tmpMetaDataMap.put(EVAL, new FieldMetaData("eVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Edge.class)));
    tmpMetaDataMap.put(PVAL, new FieldMetaData("pVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Path.class)));
    tmpMetaDataMap.put(LVAL, new FieldMetaData("lVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, NList.class)));
    tmpMetaDataMap.put(MVAL, new FieldMetaData("mVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, NMap.class)));
    tmpMetaDataMap.put(UVAL, new FieldMetaData("uVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, NSet.class)));
    tmpMetaDataMap.put(GVAL, new FieldMetaData("gVal", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, DataSet.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  public Value() {
    super();
  }

  public Value(int setField, Object __value) {
    super(setField, __value);
  }

  public Value(Value other) {
    super(other);
  }

  public Value deepCopy() {
    return new Value(this);
  }

  public static Value nVal(NullType __value) {
    Value x = new Value();
    x.setNVal(__value);
    return x;
  }

  public static Value bVal(boolean __value) {
    Value x = new Value();
    x.setBVal(__value);
    return x;
  }

  public static Value iVal(long __value) {
    Value x = new Value();
    x.setIVal(__value);
    return x;
  }

  public static Value fVal(double __value) {
    Value x = new Value();
    x.setFVal(__value);
    return x;
  }

  public static Value sVal(byte[] __value) {
    Value x = new Value();
    x.setSVal(__value);
    return x;
  }

  public static Value dVal(Date __value) {
    Value x = new Value();
    x.setDVal(__value);
    return x;
  }

  public static Value tVal(Time __value) {
    Value x = new Value();
    x.setTVal(__value);
    return x;
  }

  public static Value dtVal(DateTime __value) {
    Value x = new Value();
    x.setDtVal(__value);
    return x;
  }

  public static Value vVal(Vertex __value) {
    Value x = new Value();
    x.setVVal(__value);
    return x;
  }

  public static Value eVal(Edge __value) {
    Value x = new Value();
    x.setEVal(__value);
    return x;
  }

  public static Value pVal(Path __value) {
    Value x = new Value();
    x.setPVal(__value);
    return x;
  }

  public static Value lVal(NList __value) {
    Value x = new Value();
    x.setLVal(__value);
    return x;
  }

  public static Value mVal(NMap __value) {
    Value x = new Value();
    x.setMVal(__value);
    return x;
  }

  public static Value uVal(NSet __value) {
    Value x = new Value();
    x.setUVal(__value);
    return x;
  }

  public static Value gVal(DataSet __value) {
    Value x = new Value();
    x.setGVal(__value);
    return x;
  }


  @Override
  protected void checkType(short setField, Object __value) throws ClassCastException {
    switch (setField) {
      case NVAL:
        if (__value instanceof NullType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type NullType for field 'nVal', but got " + __value.getClass().getSimpleName());
      case BVAL:
        if (__value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'bVal', but got " + __value.getClass().getSimpleName());
      case IVAL:
        if (__value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'iVal', but got " + __value.getClass().getSimpleName());
      case FVAL:
        if (__value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'fVal', but got " + __value.getClass().getSimpleName());
      case SVAL:
        if (__value instanceof byte[]) {
          break;
        }
        throw new ClassCastException("Was expecting value of type byte[] for field 'sVal', but got " + __value.getClass().getSimpleName());
      case DVAL:
        if (__value instanceof Date) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Date for field 'dVal', but got " + __value.getClass().getSimpleName());
      case TVAL:
        if (__value instanceof Time) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Time for field 'tVal', but got " + __value.getClass().getSimpleName());
      case DTVAL:
        if (__value instanceof DateTime) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DateTime for field 'dtVal', but got " + __value.getClass().getSimpleName());
      case VVAL:
        if (__value instanceof Vertex) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Vertex for field 'vVal', but got " + __value.getClass().getSimpleName());
      case EVAL:
        if (__value instanceof Edge) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Edge for field 'eVal', but got " + __value.getClass().getSimpleName());
      case PVAL:
        if (__value instanceof Path) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Path for field 'pVal', but got " + __value.getClass().getSimpleName());
      case LVAL:
        if (__value instanceof NList) {
          break;
        }
        throw new ClassCastException("Was expecting value of type NList for field 'lVal', but got " + __value.getClass().getSimpleName());
      case MVAL:
        if (__value instanceof NMap) {
          break;
        }
        throw new ClassCastException("Was expecting value of type NMap for field 'mVal', but got " + __value.getClass().getSimpleName());
      case UVAL:
        if (__value instanceof NSet) {
          break;
        }
        throw new ClassCastException("Was expecting value of type NSet for field 'uVal', but got " + __value.getClass().getSimpleName());
      case GVAL:
        if (__value instanceof DataSet) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DataSet for field 'gVal', but got " + __value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  public void read(TProtocol iprot) throws TException {
    setField_ = 0;
    value_ = null;
    iprot.readStructBegin(metaDataMap);
    TField __field = iprot.readFieldBegin();
    if (__field.type != TType.STOP)
    {
      value_ = readValue(iprot, __field);
      if (value_ != null)
      {
        switch (__field.id) {
          case NVAL:
            if (__field.type == N_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case BVAL:
            if (__field.type == B_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case IVAL:
            if (__field.type == I_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case FVAL:
            if (__field.type == F_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case SVAL:
            if (__field.type == S_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case DVAL:
            if (__field.type == D_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case TVAL:
            if (__field.type == T_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case DTVAL:
            if (__field.type == DT_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case VVAL:
            if (__field.type == V_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case EVAL:
            if (__field.type == E_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case PVAL:
            if (__field.type == P_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case LVAL:
            if (__field.type == L_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case MVAL:
            if (__field.type == M_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case UVAL:
            if (__field.type == U_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
          case GVAL:
            if (__field.type == G_VAL_FIELD_DESC.type) {
              setField_ = __field.id;
            }
            break;
        }
      }
      iprot.readFieldEnd();
      TField __stopField = iprot.readFieldBegin();
      if (__stopField.type != TType.STOP) {
        throw new TProtocolException(TProtocolException.INVALID_DATA, "Union 'Value' is missing a STOP byte");
      }
    }
    iprot.readStructEnd();
  }

  @Override
  protected Object readValue(TProtocol iprot, TField __field) throws TException {
    switch (__field.id) {
      case NVAL:
        if (__field.type == N_VAL_FIELD_DESC.type) {
          NullType nVal;
          nVal = NullType.findByValue(iprot.readI32());
          return nVal;
        }
        break;
      case BVAL:
        if (__field.type == B_VAL_FIELD_DESC.type) {
          Boolean bVal;
          bVal = iprot.readBool();
          return bVal;
        }
        break;
      case IVAL:
        if (__field.type == I_VAL_FIELD_DESC.type) {
          Long iVal;
          iVal = iprot.readI64();
          return iVal;
        }
        break;
      case FVAL:
        if (__field.type == F_VAL_FIELD_DESC.type) {
          Double fVal;
          fVal = iprot.readDouble();
          return fVal;
        }
        break;
      case SVAL:
        if (__field.type == S_VAL_FIELD_DESC.type) {
          byte[] sVal;
          sVal = iprot.readBinary();
          return sVal;
        }
        break;
      case DVAL:
        if (__field.type == D_VAL_FIELD_DESC.type) {
          Date dVal;
          dVal = new Date();
          dVal.read(iprot);
          return dVal;
        }
        break;
      case TVAL:
        if (__field.type == T_VAL_FIELD_DESC.type) {
          Time tVal;
          tVal = new Time();
          tVal.read(iprot);
          return tVal;
        }
        break;
      case DTVAL:
        if (__field.type == DT_VAL_FIELD_DESC.type) {
          DateTime dtVal;
          dtVal = new DateTime();
          dtVal.read(iprot);
          return dtVal;
        }
        break;
      case VVAL:
        if (__field.type == V_VAL_FIELD_DESC.type) {
          Vertex vVal;
          vVal = new Vertex();
          vVal.read(iprot);
          return vVal;
        }
        break;
      case EVAL:
        if (__field.type == E_VAL_FIELD_DESC.type) {
          Edge eVal;
          eVal = new Edge();
          eVal.read(iprot);
          return eVal;
        }
        break;
      case PVAL:
        if (__field.type == P_VAL_FIELD_DESC.type) {
          Path pVal;
          pVal = new Path();
          pVal.read(iprot);
          return pVal;
        }
        break;
      case LVAL:
        if (__field.type == L_VAL_FIELD_DESC.type) {
          NList lVal;
          lVal = new NList();
          lVal.read(iprot);
          return lVal;
        }
        break;
      case MVAL:
        if (__field.type == M_VAL_FIELD_DESC.type) {
          NMap mVal;
          mVal = new NMap();
          mVal.read(iprot);
          return mVal;
        }
        break;
      case UVAL:
        if (__field.type == U_VAL_FIELD_DESC.type) {
          NSet uVal;
          uVal = new NSet();
          uVal.read(iprot);
          return uVal;
        }
        break;
      case GVAL:
        if (__field.type == G_VAL_FIELD_DESC.type) {
          DataSet gVal;
          gVal = new DataSet();
          gVal.read(iprot);
          return gVal;
        }
        break;
    }
    TProtocolUtil.skip(iprot, __field.type);
    return null;
  }

  @Override
  protected void writeValue(TProtocol oprot, short setField, Object __value) throws TException {
    switch (setField) {
      case NVAL:
        NullType nVal = (NullType)getFieldValue();
        oprot.writeI32(nVal == null ? 0 : nVal.getValue());
        return;
      case BVAL:
        Boolean bVal = (Boolean)getFieldValue();
        oprot.writeBool(bVal);
        return;
      case IVAL:
        Long iVal = (Long)getFieldValue();
        oprot.writeI64(iVal);
        return;
      case FVAL:
        Double fVal = (Double)getFieldValue();
        oprot.writeDouble(fVal);
        return;
      case SVAL:
        byte[] sVal = (byte[])getFieldValue();
        oprot.writeBinary(sVal);
        return;
      case DVAL:
        Date dVal = (Date)getFieldValue();
        dVal.write(oprot);
        return;
      case TVAL:
        Time tVal = (Time)getFieldValue();
        tVal.write(oprot);
        return;
      case DTVAL:
        DateTime dtVal = (DateTime)getFieldValue();
        dtVal.write(oprot);
        return;
      case VVAL:
        Vertex vVal = (Vertex)getFieldValue();
        vVal.write(oprot);
        return;
      case EVAL:
        Edge eVal = (Edge)getFieldValue();
        eVal.write(oprot);
        return;
      case PVAL:
        Path pVal = (Path)getFieldValue();
        pVal.write(oprot);
        return;
      case LVAL:
        NList lVal = (NList)getFieldValue();
        lVal.write(oprot);
        return;
      case MVAL:
        NMap mVal = (NMap)getFieldValue();
        mVal.write(oprot);
        return;
      case UVAL:
        NSet uVal = (NSet)getFieldValue();
        uVal.write(oprot);
        return;
      case GVAL:
        DataSet gVal = (DataSet)getFieldValue();
        gVal.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField);
    }
  }

  @Override
  protected TField getFieldDesc(int setField) {
    switch (setField) {
      case NVAL:
        return N_VAL_FIELD_DESC;
      case BVAL:
        return B_VAL_FIELD_DESC;
      case IVAL:
        return I_VAL_FIELD_DESC;
      case FVAL:
        return F_VAL_FIELD_DESC;
      case SVAL:
        return S_VAL_FIELD_DESC;
      case DVAL:
        return D_VAL_FIELD_DESC;
      case TVAL:
        return T_VAL_FIELD_DESC;
      case DTVAL:
        return DT_VAL_FIELD_DESC;
      case VVAL:
        return V_VAL_FIELD_DESC;
      case EVAL:
        return E_VAL_FIELD_DESC;
      case PVAL:
        return P_VAL_FIELD_DESC;
      case LVAL:
        return L_VAL_FIELD_DESC;
      case MVAL:
        return M_VAL_FIELD_DESC;
      case UVAL:
        return U_VAL_FIELD_DESC;
      case GVAL:
        return G_VAL_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected Map<Integer, FieldMetaData> getMetaDataMap() { return metaDataMap; }

  private Object __getValue(int expectedFieldId) {
    if (getSetField() == expectedFieldId) {
      return getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field '" + getFieldDesc(expectedFieldId).name + "' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  private void __setValue(int fieldId, Object __value) {
    if (__value == null) throw new NullPointerException();
    setField_ = fieldId;
    value_ = __value;
  }

  /**
   * 
   * @see NullType
   */
  public NullType getNVal() {
    return (NullType) __getValue(NVAL);
  }

  /**
   * 
   * @see NullType
   */
  public void setNVal(NullType __value) {
    __setValue(NVAL, __value);
  }

  public boolean isBVal() {
    return (Boolean) __getValue(BVAL);
  }

  public void setBVal(boolean __value) {
    setField_ = BVAL;
    value_ = __value;
  }

  public long getIVal() {
    return (Long) __getValue(IVAL);
  }

  public void setIVal(long __value) {
    setField_ = IVAL;
    value_ = __value;
  }

  public double getFVal() {
    return (Double) __getValue(FVAL);
  }

  public void setFVal(double __value) {
    setField_ = FVAL;
    value_ = __value;
  }

  public byte[] getSVal() {
    return (byte[]) __getValue(SVAL);
  }

  public void setSVal(byte[] __value) {
    __setValue(SVAL, __value);
  }

  public Date getDVal() {
    return (Date) __getValue(DVAL);
  }

  public void setDVal(Date __value) {
    __setValue(DVAL, __value);
  }

  public Time getTVal() {
    return (Time) __getValue(TVAL);
  }

  public void setTVal(Time __value) {
    __setValue(TVAL, __value);
  }

  public DateTime getDtVal() {
    return (DateTime) __getValue(DTVAL);
  }

  public void setDtVal(DateTime __value) {
    __setValue(DTVAL, __value);
  }

  public Vertex getVVal() {
    return (Vertex) __getValue(VVAL);
  }

  public void setVVal(Vertex __value) {
    __setValue(VVAL, __value);
  }

  public Edge getEVal() {
    return (Edge) __getValue(EVAL);
  }

  public void setEVal(Edge __value) {
    __setValue(EVAL, __value);
  }

  public Path getPVal() {
    return (Path) __getValue(PVAL);
  }

  public void setPVal(Path __value) {
    __setValue(PVAL, __value);
  }

  public NList getLVal() {
    return (NList) __getValue(LVAL);
  }

  public void setLVal(NList __value) {
    __setValue(LVAL, __value);
  }

  public NMap getMVal() {
    return (NMap) __getValue(MVAL);
  }

  public void setMVal(NMap __value) {
    __setValue(MVAL, __value);
  }

  public NSet getUVal() {
    return (NSet) __getValue(UVAL);
  }

  public void setUVal(NSet __value) {
    __setValue(UVAL, __value);
  }

  public DataSet getGVal() {
    return (DataSet) __getValue(GVAL);
  }

  public void setGVal(DataSet __value) {
    __setValue(GVAL, __value);
  }

  public boolean equals(Object other) {
    if (other instanceof Value) {
      return equals((Value)other);
    } else {
      return false;
    }
  }

  public boolean equals(Value other) {
    return equalsSlowImpl(other);
  }


  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {getSetField(), getFieldValue()});
  }

}
