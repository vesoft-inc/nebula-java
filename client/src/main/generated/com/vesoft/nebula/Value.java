/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial", "unchecked" })
public class Value extends TUnion<Value> implements Comparable<Value> {
  public static boolean DEFAULT_PRETTY_PRINT = true;
  private static final TStruct STRUCT_DESC = new TStruct("Value");
  private static final TField INT_VALUE_FIELD_DESC = new TField("int_value", TType.I64, (short)1);
  private static final TField BOOL_VALUE_FIELD_DESC = new TField("bool_value", TType.BOOL, (short)2);
  private static final TField DOUBLE_VALUE_FIELD_DESC = new TField("double_value", TType.DOUBLE, (short)3);
  private static final TField STRING_VALUE_FIELD_DESC = new TField("string_value", TType.STRING, (short)4);

  public static final int INT_VALUE = 1;
  public static final int BOOL_VALUE = 2;
  public static final int DOUBLE_VALUE = 3;
  public static final int STRING_VALUE = 4;

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(INT_VALUE, new FieldMetaData("int_value", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(BOOL_VALUE, new FieldMetaData("bool_value", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(DOUBLE_VALUE, new FieldMetaData("double_value", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(STRING_VALUE, new FieldMetaData("string_value", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  public Value() {
    super();
  }

  public Value(int setField, Object value) {
    super(setField, value);
  }

  public Value(Value other) {
    super(other);
  }
  public Value deepCopy() {
    return new Value(this);
  }

  public static Value int_value(long value) {
    Value x = new Value();
    x.setInt_value(value);
    return x;
  }

  public static Value bool_value(boolean value) {
    Value x = new Value();
    x.setBool_value(value);
    return x;
  }

  public static Value double_value(double value) {
    Value x = new Value();
    x.setDouble_value(value);
    return x;
  }

  public static Value string_value(String value) {
    Value x = new Value();
    x.setString_value(value);
    return x;
  }


  @Override
  protected void checkType(short setField, Object value) throws ClassCastException {
    switch (setField) {
      case INT_VALUE:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'int_value', but got " + value.getClass().getSimpleName());
      case BOOL_VALUE:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'bool_value', but got " + value.getClass().getSimpleName());
      case DOUBLE_VALUE:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'double_value', but got " + value.getClass().getSimpleName());
      case STRING_VALUE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'string_value', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  public void read(TProtocol iprot) throws TException {
    setField_ = 0;
    value_ = null;
    iprot.readStructBegin(metaDataMap);
    TField field = iprot.readFieldBegin();
    if (field.type != TType.STOP)
    {
      value_ = readValue(iprot, field);
      if (value_ != null)
      {
        switch (field.id) {
          case INT_VALUE:
            if (field.type == INT_VALUE_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
          case BOOL_VALUE:
            if (field.type == BOOL_VALUE_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
          case DOUBLE_VALUE:
            if (field.type == DOUBLE_VALUE_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
          case STRING_VALUE:
            if (field.type == STRING_VALUE_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
        }
      }
      iprot.readFieldEnd();
      iprot.readFieldBegin();
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  @Override
  protected Object readValue(TProtocol iprot, TField field) throws TException {
    switch (field.id) {
      case INT_VALUE:
        if (field.type == INT_VALUE_FIELD_DESC.type) {
          Long int_value;
          int_value = iprot.readI64();
          return int_value;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      case BOOL_VALUE:
        if (field.type == BOOL_VALUE_FIELD_DESC.type) {
          Boolean bool_value;
          bool_value = iprot.readBool();
          return bool_value;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      case DOUBLE_VALUE:
        if (field.type == DOUBLE_VALUE_FIELD_DESC.type) {
          Double double_value;
          double_value = iprot.readDouble();
          return double_value;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      case STRING_VALUE:
        if (field.type == STRING_VALUE_FIELD_DESC.type) {
          String string_value;
          string_value = iprot.readString();
          return string_value;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      default:
        TProtocolUtil.skip(iprot, field.type);
        return null;
    }
  }

  @Override
  protected void writeValue(TProtocol oprot, short setField, Object value) throws TException {
    switch (setField) {
      case INT_VALUE:
        Long int_value = (Long)getFieldValue();
        oprot.writeI64(int_value);
        return;
      case BOOL_VALUE:
        Boolean bool_value = (Boolean)getFieldValue();
        oprot.writeBool(bool_value);
        return;
      case DOUBLE_VALUE:
        Double double_value = (Double)getFieldValue();
        oprot.writeDouble(double_value);
        return;
      case STRING_VALUE:
        String string_value = (String)getFieldValue();
        oprot.writeString(string_value);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField);
    }
  }

  @Override
  protected TField getFieldDesc(int setField) {
    switch (setField) {
      case INT_VALUE:
        return INT_VALUE_FIELD_DESC;
      case BOOL_VALUE:
        return BOOL_VALUE_FIELD_DESC;
      case DOUBLE_VALUE:
        return DOUBLE_VALUE_FIELD_DESC;
      case STRING_VALUE:
        return STRING_VALUE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  public long  getInt_value() {
    if (getSetField() == INT_VALUE) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'int_value' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInt_value(long value) {
    setField_ = INT_VALUE;
    value_ = value;
  }

  public boolean  isBool_value() {
    if (getSetField() == BOOL_VALUE) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bool_value' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBool_value(boolean value) {
    setField_ = BOOL_VALUE;
    value_ = value;
  }

  public double  getDouble_value() {
    if (getSetField() == DOUBLE_VALUE) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'double_value' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDouble_value(double value) {
    setField_ = DOUBLE_VALUE;
    value_ = value;
  }

  public String  getString_value() {
    if (getSetField() == STRING_VALUE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'string_value' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setString_value(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = STRING_VALUE;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof Value) {
      return equals((Value)other);
    } else {
      return false;
    }
  }

  public boolean equals(Value other) {
    return equalsNobinaryImpl(other);
  }

  @Override
  public int compareTo(Value other) {
    return compareToImpl(other);
  }


  @Override
  public int hashCode() {
    return new HashCodeBuilder().append(getSetField()).append(getFieldValue()).toHashCode();
  }
  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Value");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    // Only print this field if it is the set field
    if (getSetField() == INT_VALUE)
    {
      sb.append(indentStr);
      sb.append("int_value");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getInt_value(), indent + 1, prettyPrint));
      first = false;
    }
    // Only print this field if it is the set field
    if (getSetField() == BOOL_VALUE)
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("bool_value");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. isBool_value(), indent + 1, prettyPrint));
      first = false;
    }
    // Only print this field if it is the set field
    if (getSetField() == DOUBLE_VALUE)
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("double_value");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getDouble_value(), indent + 1, prettyPrint));
      first = false;
    }
    // Only print this field if it is the set field
    if (getSetField() == STRING_VALUE)
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("string_value");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getString_value() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getString_value(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }


}
