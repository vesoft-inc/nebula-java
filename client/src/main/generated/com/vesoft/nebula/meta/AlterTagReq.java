/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AlterTagReq implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AlterTagReq");
  private static final TField SPACE_ID_FIELD_DESC = new TField("space_id", TType.I32, (short)1);
  private static final TField TAG_NAME_FIELD_DESC = new TField("tag_name", TType.STRING, (short)2);
  private static final TField TAG_ITEMS_FIELD_DESC = new TField("tag_items", TType.LIST, (short)3);
  private static final TField SCHEMA_PROP_FIELD_DESC = new TField("schema_prop", TType.STRUCT, (short)4);

  public int space_id;
  public String tag_name;
  public List<AlterSchemaItem> tag_items;
  public com.vesoft.nebula.SchemaProp schema_prop;
  public static final int SPACE_ID = 1;
  public static final int TAG_NAME = 2;
  public static final int TAG_ITEMS = 3;
  public static final int SCHEMA_PROP = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SPACE_ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE_ID, new FieldMetaData("space_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TAG_NAME, new FieldMetaData("tag_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(TAG_ITEMS, new FieldMetaData("tag_items", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, AlterSchemaItem.class))));
    tmpMetaDataMap.put(SCHEMA_PROP, new FieldMetaData("schema_prop", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.SchemaProp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AlterTagReq.class, metaDataMap);
  }

  public AlterTagReq() {
  }

  public AlterTagReq(
    int space_id,
    String tag_name,
    List<AlterSchemaItem> tag_items,
    com.vesoft.nebula.SchemaProp schema_prop)
  {
    this();
    this.space_id = space_id;
    setSpace_idIsSet(true);
    this.tag_name = tag_name;
    this.tag_items = tag_items;
    this.schema_prop = schema_prop;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AlterTagReq(AlterTagReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.space_id = TBaseHelper.deepCopy(other.space_id);
    if (other.isSetTag_name()) {
      this.tag_name = TBaseHelper.deepCopy(other.tag_name);
    }
    if (other.isSetTag_items()) {
      this.tag_items = TBaseHelper.deepCopy(other.tag_items);
    }
    if (other.isSetSchema_prop()) {
      this.schema_prop = TBaseHelper.deepCopy(other.schema_prop);
    }
  }

  public AlterTagReq deepCopy() {
    return new AlterTagReq(this);
  }

  @Deprecated
  public AlterTagReq clone() {
    return new AlterTagReq(this);
  }

  public int  getSpace_id() {
    return this.space_id;
  }

  public AlterTagReq setSpace_id(int space_id) {
    this.space_id = space_id;
    setSpace_idIsSet(true);
    return this;
  }

  public void unsetSpace_id() {
    __isset_bit_vector.clear(__SPACE_ID_ISSET_ID);
  }

  // Returns true if field space_id is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_id() {
    return __isset_bit_vector.get(__SPACE_ID_ISSET_ID);
  }

  public void setSpace_idIsSet(boolean value) {
    __isset_bit_vector.set(__SPACE_ID_ISSET_ID, value);
  }

  public String  getTag_name() {
    return this.tag_name;
  }

  public AlterTagReq setTag_name(String tag_name) {
    this.tag_name = tag_name;
    return this;
  }

  public void unsetTag_name() {
    this.tag_name = null;
  }

  // Returns true if field tag_name is set (has been assigned a value) and false otherwise
  public boolean isSetTag_name() {
    return this.tag_name != null;
  }

  public void setTag_nameIsSet(boolean value) {
    if (!value) {
      this.tag_name = null;
    }
  }

  public List<AlterSchemaItem>  getTag_items() {
    return this.tag_items;
  }

  public AlterTagReq setTag_items(List<AlterSchemaItem> tag_items) {
    this.tag_items = tag_items;
    return this;
  }

  public void unsetTag_items() {
    this.tag_items = null;
  }

  // Returns true if field tag_items is set (has been assigned a value) and false otherwise
  public boolean isSetTag_items() {
    return this.tag_items != null;
  }

  public void setTag_itemsIsSet(boolean value) {
    if (!value) {
      this.tag_items = null;
    }
  }

  public com.vesoft.nebula.SchemaProp  getSchema_prop() {
    return this.schema_prop;
  }

  public AlterTagReq setSchema_prop(com.vesoft.nebula.SchemaProp schema_prop) {
    this.schema_prop = schema_prop;
    return this;
  }

  public void unsetSchema_prop() {
    this.schema_prop = null;
  }

  // Returns true if field schema_prop is set (has been assigned a value) and false otherwise
  public boolean isSetSchema_prop() {
    return this.schema_prop != null;
  }

  public void setSchema_propIsSet(boolean value) {
    if (!value) {
      this.schema_prop = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SPACE_ID:
      if (value == null) {
        unsetSpace_id();
      } else {
        setSpace_id((Integer)value);
      }
      break;

    case TAG_NAME:
      if (value == null) {
        unsetTag_name();
      } else {
        setTag_name((String)value);
      }
      break;

    case TAG_ITEMS:
      if (value == null) {
        unsetTag_items();
      } else {
        setTag_items((List<AlterSchemaItem>)value);
      }
      break;

    case SCHEMA_PROP:
      if (value == null) {
        unsetSchema_prop();
      } else {
        setSchema_prop((com.vesoft.nebula.SchemaProp)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return new Integer(getSpace_id());

    case TAG_NAME:
      return getTag_name();

    case TAG_ITEMS:
      return getTag_items();

    case SCHEMA_PROP:
      return getSchema_prop();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return isSetSpace_id();
    case TAG_NAME:
      return isSetTag_name();
    case TAG_ITEMS:
      return isSetTag_items();
    case SCHEMA_PROP:
      return isSetSchema_prop();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AlterTagReq)
      return this.equals((AlterTagReq)that);
    return false;
  }

  public boolean equals(AlterTagReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_space_id = true;
    boolean that_present_space_id = true;
    if (this_present_space_id || that_present_space_id) {
      if (!(this_present_space_id && that_present_space_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.space_id, that.space_id))
        return false;
    }

    boolean this_present_tag_name = true && this.isSetTag_name();
    boolean that_present_tag_name = true && that.isSetTag_name();
    if (this_present_tag_name || that_present_tag_name) {
      if (!(this_present_tag_name && that_present_tag_name))
        return false;
      if (!TBaseHelper.equalsNobinary(this.tag_name, that.tag_name))
        return false;
    }

    boolean this_present_tag_items = true && this.isSetTag_items();
    boolean that_present_tag_items = true && that.isSetTag_items();
    if (this_present_tag_items || that_present_tag_items) {
      if (!(this_present_tag_items && that_present_tag_items))
        return false;
      if (!TBaseHelper.equalsNobinary(this.tag_items, that.tag_items))
        return false;
    }

    boolean this_present_schema_prop = true && this.isSetSchema_prop();
    boolean that_present_schema_prop = true && that.isSetSchema_prop();
    if (this_present_schema_prop || that_present_schema_prop) {
      if (!(this_present_schema_prop && that_present_schema_prop))
        return false;
      if (!TBaseHelper.equalsNobinary(this.schema_prop, that.schema_prop))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_space_id = true;
    builder.append(present_space_id);
    if (present_space_id)
      builder.append(space_id);

    boolean present_tag_name = true && (isSetTag_name());
    builder.append(present_tag_name);
    if (present_tag_name)
      builder.append(tag_name);

    boolean present_tag_items = true && (isSetTag_items());
    builder.append(present_tag_items);
    if (present_tag_items)
      builder.append(tag_items);

    boolean present_schema_prop = true && (isSetSchema_prop());
    builder.append(present_schema_prop);
    if (present_schema_prop)
      builder.append(schema_prop);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            setSpace_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_NAME:
          if (field.type == TType.STRING) {
            this.tag_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_ITEMS:
          if (field.type == TType.LIST) {
            {
              TList _list38 = iprot.readListBegin();
              this.tag_items = new ArrayList<AlterSchemaItem>(Math.max(0, _list38.size));
              for (int _i39 = 0; 
                   (_list38.size < 0) ? iprot.peekList() : (_i39 < _list38.size); 
                   ++_i39)
              {
                AlterSchemaItem _elem40;
                _elem40 = new AlterSchemaItem();
                _elem40.read(iprot);
                this.tag_items.add(_elem40);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA_PROP:
          if (field.type == TType.STRUCT) {
            this.schema_prop = new com.vesoft.nebula.SchemaProp();
            this.schema_prop.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.tag_name != null) {
      oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
      oprot.writeString(this.tag_name);
      oprot.writeFieldEnd();
    }
    if (this.tag_items != null) {
      oprot.writeFieldBegin(TAG_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.tag_items.size()));
        for (AlterSchemaItem _iter41 : this.tag_items)        {
          _iter41.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.schema_prop != null) {
      oprot.writeFieldBegin(SCHEMA_PROP_FIELD_DESC);
      this.schema_prop.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AlterTagReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("space_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSpace_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("tag_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTag_name() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTag_name(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("tag_items");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTag_items() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTag_items(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("schema_prop");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getSchema_prop() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getSchema_prop(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

