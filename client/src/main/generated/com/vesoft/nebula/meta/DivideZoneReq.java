/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class DivideZoneReq implements TBase, java.io.Serializable, Cloneable, Comparable<DivideZoneReq> {
  private static final TStruct STRUCT_DESC = new TStruct("DivideZoneReq");
  private static final TField ZONE_NAME_FIELD_DESC = new TField("zone_name", TType.STRING, (short)1);
  private static final TField ZONE_ITEMS_FIELD_DESC = new TField("zone_items", TType.MAP, (short)2);

  public byte[] zone_name;
  public Map<byte[],List<com.vesoft.nebula.HostAddr>> zone_items;
  public static final int ZONE_NAME = 1;
  public static final int ZONE_ITEMS = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ZONE_NAME, new FieldMetaData("zone_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(ZONE_ITEMS, new FieldMetaData("zone_items", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DivideZoneReq.class, metaDataMap);
  }

  public DivideZoneReq() {
  }

  public DivideZoneReq(
      byte[] zone_name,
      Map<byte[],List<com.vesoft.nebula.HostAddr>> zone_items) {
    this();
    this.zone_name = zone_name;
    this.zone_items = zone_items;
  }

  public static class Builder {
    private byte[] zone_name;
    private Map<byte[],List<com.vesoft.nebula.HostAddr>> zone_items;

    public Builder() {
    }

    public Builder setZone_name(final byte[] zone_name) {
      this.zone_name = zone_name;
      return this;
    }

    public Builder setZone_items(final Map<byte[],List<com.vesoft.nebula.HostAddr>> zone_items) {
      this.zone_items = zone_items;
      return this;
    }

    public DivideZoneReq build() {
      DivideZoneReq result = new DivideZoneReq();
      result.setZone_name(this.zone_name);
      result.setZone_items(this.zone_items);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DivideZoneReq(DivideZoneReq other) {
    if (other.isSetZone_name()) {
      this.zone_name = TBaseHelper.deepCopy(other.zone_name);
    }
    if (other.isSetZone_items()) {
      this.zone_items = TBaseHelper.deepCopy(other.zone_items);
    }
  }

  public DivideZoneReq deepCopy() {
    return new DivideZoneReq(this);
  }

  public byte[] getZone_name() {
    return this.zone_name;
  }

  public DivideZoneReq setZone_name(byte[] zone_name) {
    this.zone_name = zone_name;
    return this;
  }

  public void unsetZone_name() {
    this.zone_name = null;
  }

  // Returns true if field zone_name is set (has been assigned a value) and false otherwise
  public boolean isSetZone_name() {
    return this.zone_name != null;
  }

  public void setZone_nameIsSet(boolean __value) {
    if (!__value) {
      this.zone_name = null;
    }
  }

  public Map<byte[],List<com.vesoft.nebula.HostAddr>> getZone_items() {
    return this.zone_items;
  }

  public DivideZoneReq setZone_items(Map<byte[],List<com.vesoft.nebula.HostAddr>> zone_items) {
    this.zone_items = zone_items;
    return this;
  }

  public void unsetZone_items() {
    this.zone_items = null;
  }

  // Returns true if field zone_items is set (has been assigned a value) and false otherwise
  public boolean isSetZone_items() {
    return this.zone_items != null;
  }

  public void setZone_itemsIsSet(boolean __value) {
    if (!__value) {
      this.zone_items = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ZONE_NAME:
      if (__value == null) {
        unsetZone_name();
      } else {
        setZone_name((byte[])__value);
      }
      break;

    case ZONE_ITEMS:
      if (__value == null) {
        unsetZone_items();
      } else {
        setZone_items((Map<byte[],List<com.vesoft.nebula.HostAddr>>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ZONE_NAME:
      return getZone_name();

    case ZONE_ITEMS:
      return getZone_items();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof DivideZoneReq))
      return false;
    DivideZoneReq that = (DivideZoneReq)_that;

    if (!TBaseHelper.equalsSlow(this.isSetZone_name(), that.isSetZone_name(), this.zone_name, that.zone_name)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetZone_items(), that.isSetZone_items(), this.zone_items, that.zone_items)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {zone_name, zone_items});
  }

  @Override
  public int compareTo(DivideZoneReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetZone_name()).compareTo(other.isSetZone_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(zone_name, other.zone_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetZone_items()).compareTo(other.isSetZone_items());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(zone_items, other.zone_items);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ZONE_NAME:
          if (__field.type == TType.STRING) {
            this.zone_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ZONE_ITEMS:
          if (__field.type == TType.MAP) {
            {
              TMap _map220 = iprot.readMapBegin();
              this.zone_items = new HashMap<byte[],List<com.vesoft.nebula.HostAddr>>(Math.max(0, 2*_map220.size));
              for (int _i221 = 0; 
                   (_map220.size < 0) ? iprot.peekMap() : (_i221 < _map220.size); 
                   ++_i221)
              {
                byte[] _key222;
                List<com.vesoft.nebula.HostAddr> _val223;
                _key222 = iprot.readBinary();
                {
                  TList _list224 = iprot.readListBegin();
                  _val223 = new ArrayList<com.vesoft.nebula.HostAddr>(Math.max(0, _list224.size));
                  for (int _i225 = 0; 
                       (_list224.size < 0) ? iprot.peekList() : (_i225 < _list224.size); 
                       ++_i225)
                  {
                    com.vesoft.nebula.HostAddr _elem226;
                    _elem226 = new com.vesoft.nebula.HostAddr();
                    _elem226.read(iprot);
                    _val223.add(_elem226);
                  }
                  iprot.readListEnd();
                }
                this.zone_items.put(_key222, _val223);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.zone_name != null) {
      oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
      oprot.writeBinary(this.zone_name);
      oprot.writeFieldEnd();
    }
    if (this.zone_items != null) {
      oprot.writeFieldBegin(ZONE_ITEMS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.zone_items.size()));
        for (Map.Entry<byte[], List<com.vesoft.nebula.HostAddr>> _iter227 : this.zone_items.entrySet())        {
          oprot.writeBinary(_iter227.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter227.getValue().size()));
            for (com.vesoft.nebula.HostAddr _iter228 : _iter227.getValue())            {
              _iter228.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DivideZoneReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("zone_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getZone_name() == null) {
      sb.append("null");
    } else {
        int __zone_name_size = Math.min(this.getZone_name().length, 128);
        for (int i = 0; i < __zone_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getZone_name()[i]).length() > 1 ? Integer.toHexString(this.getZone_name()[i]).substring(Integer.toHexString(this.getZone_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getZone_name()[i]).toUpperCase());
        }
        if (this.getZone_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("zone_items");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getZone_items() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getZone_items(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

