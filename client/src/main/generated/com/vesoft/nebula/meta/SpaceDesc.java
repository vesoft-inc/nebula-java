/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SpaceDesc implements TBase, java.io.Serializable, Cloneable, Comparable<SpaceDesc> {
  private static final TStruct STRUCT_DESC = new TStruct("SpaceDesc");
  private static final TField SPACE_NAME_FIELD_DESC = new TField("space_name", TType.STRING, (short)1);
  private static final TField PARTITION_NUM_FIELD_DESC = new TField("partition_num", TType.I32, (short)2);
  private static final TField REPLICA_FACTOR_FIELD_DESC = new TField("replica_factor", TType.I32, (short)3);
  private static final TField CHARSET_NAME_FIELD_DESC = new TField("charset_name", TType.STRING, (short)4);
  private static final TField COLLATE_NAME_FIELD_DESC = new TField("collate_name", TType.STRING, (short)5);
  private static final TField VID_TYPE_FIELD_DESC = new TField("vid_type", TType.STRUCT, (short)6);
  private static final TField ZONE_NAMES_FIELD_DESC = new TField("zone_names", TType.LIST, (short)7);
  private static final TField ISOLATION_LEVEL_FIELD_DESC = new TField("isolation_level", TType.I32, (short)8);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)9);

  public byte[] space_name;
  public int partition_num;
  public int replica_factor;
  public byte[] charset_name;
  public byte[] collate_name;
  public ColumnTypeDef vid_type;
  public List<byte[]> zone_names;
  /**
   * 
   * @see IsolationLevel
   */
  public IsolationLevel isolation_level;
  public byte[] comment;
  public static final int SPACE_NAME = 1;
  public static final int PARTITION_NUM = 2;
  public static final int REPLICA_FACTOR = 3;
  public static final int CHARSET_NAME = 4;
  public static final int COLLATE_NAME = 5;
  public static final int VID_TYPE = 6;
  public static final int ZONE_NAMES = 7;
  public static final int ISOLATION_LEVEL = 8;
  public static final int COMMENT = 9;

  // isset id assignments
  private static final int __PARTITION_NUM_ISSET_ID = 0;
  private static final int __REPLICA_FACTOR_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE_NAME, new FieldMetaData("space_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(PARTITION_NUM, new FieldMetaData("partition_num", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(REPLICA_FACTOR, new FieldMetaData("replica_factor", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(CHARSET_NAME, new FieldMetaData("charset_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(COLLATE_NAME, new FieldMetaData("collate_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(VID_TYPE, new FieldMetaData("vid_type", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ColumnTypeDef.class)));
    tmpMetaDataMap.put(ZONE_NAMES, new FieldMetaData("zone_names", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(ISOLATION_LEVEL, new FieldMetaData("isolation_level", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(COMMENT, new FieldMetaData("comment", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SpaceDesc.class, metaDataMap);
  }

  public SpaceDesc() {
    this.partition_num = 0;

    this.replica_factor = 0;

    this.vid_type = new ColumnTypeDef();
    this.vid_type.setType(com.vesoft.nebula.PropertyType.FIXED_STRING);
    this.vid_type.setType_length((short)8);

  }

  public SpaceDesc(
      byte[] space_name,
      int partition_num,
      int replica_factor,
      byte[] charset_name,
      byte[] collate_name,
      ColumnTypeDef vid_type,
      List<byte[]> zone_names) {
    this();
    this.space_name = space_name;
    this.partition_num = partition_num;
    setPartition_numIsSet(true);
    this.replica_factor = replica_factor;
    setReplica_factorIsSet(true);
    this.charset_name = charset_name;
    this.collate_name = collate_name;
    this.vid_type = vid_type;
    this.zone_names = zone_names;
  }

  public SpaceDesc(
      byte[] space_name,
      int partition_num,
      int replica_factor,
      byte[] charset_name,
      byte[] collate_name,
      ColumnTypeDef vid_type,
      List<byte[]> zone_names,
      IsolationLevel isolation_level,
      byte[] comment) {
    this();
    this.space_name = space_name;
    this.partition_num = partition_num;
    setPartition_numIsSet(true);
    this.replica_factor = replica_factor;
    setReplica_factorIsSet(true);
    this.charset_name = charset_name;
    this.collate_name = collate_name;
    this.vid_type = vid_type;
    this.zone_names = zone_names;
    this.isolation_level = isolation_level;
    this.comment = comment;
  }

  public static class Builder {
    private byte[] space_name;
    private int partition_num;
    private int replica_factor;
    private byte[] charset_name;
    private byte[] collate_name;
    private ColumnTypeDef vid_type;
    private List<byte[]> zone_names;
    private IsolationLevel isolation_level;
    private byte[] comment;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setSpace_name(final byte[] space_name) {
      this.space_name = space_name;
      return this;
    }

    public Builder setPartition_num(final int partition_num) {
      this.partition_num = partition_num;
      __optional_isset.set(__PARTITION_NUM_ISSET_ID, true);
      return this;
    }

    public Builder setReplica_factor(final int replica_factor) {
      this.replica_factor = replica_factor;
      __optional_isset.set(__REPLICA_FACTOR_ISSET_ID, true);
      return this;
    }

    public Builder setCharset_name(final byte[] charset_name) {
      this.charset_name = charset_name;
      return this;
    }

    public Builder setCollate_name(final byte[] collate_name) {
      this.collate_name = collate_name;
      return this;
    }

    public Builder setVid_type(final ColumnTypeDef vid_type) {
      this.vid_type = vid_type;
      return this;
    }

    public Builder setZone_names(final List<byte[]> zone_names) {
      this.zone_names = zone_names;
      return this;
    }

    public Builder setIsolation_level(final IsolationLevel isolation_level) {
      this.isolation_level = isolation_level;
      return this;
    }

    public Builder setComment(final byte[] comment) {
      this.comment = comment;
      return this;
    }

    public SpaceDesc build() {
      SpaceDesc result = new SpaceDesc();
      result.setSpace_name(this.space_name);
      if (__optional_isset.get(__PARTITION_NUM_ISSET_ID)) {
        result.setPartition_num(this.partition_num);
      }
      if (__optional_isset.get(__REPLICA_FACTOR_ISSET_ID)) {
        result.setReplica_factor(this.replica_factor);
      }
      result.setCharset_name(this.charset_name);
      result.setCollate_name(this.collate_name);
      result.setVid_type(this.vid_type);
      result.setZone_names(this.zone_names);
      result.setIsolation_level(this.isolation_level);
      result.setComment(this.comment);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpaceDesc(SpaceDesc other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSpace_name()) {
      this.space_name = TBaseHelper.deepCopy(other.space_name);
    }
    this.partition_num = TBaseHelper.deepCopy(other.partition_num);
    this.replica_factor = TBaseHelper.deepCopy(other.replica_factor);
    if (other.isSetCharset_name()) {
      this.charset_name = TBaseHelper.deepCopy(other.charset_name);
    }
    if (other.isSetCollate_name()) {
      this.collate_name = TBaseHelper.deepCopy(other.collate_name);
    }
    if (other.isSetVid_type()) {
      this.vid_type = TBaseHelper.deepCopy(other.vid_type);
    }
    if (other.isSetZone_names()) {
      this.zone_names = TBaseHelper.deepCopy(other.zone_names);
    }
    if (other.isSetIsolation_level()) {
      this.isolation_level = TBaseHelper.deepCopy(other.isolation_level);
    }
    if (other.isSetComment()) {
      this.comment = TBaseHelper.deepCopy(other.comment);
    }
  }

  public SpaceDesc deepCopy() {
    return new SpaceDesc(this);
  }

  public byte[] getSpace_name() {
    return this.space_name;
  }

  public SpaceDesc setSpace_name(byte[] space_name) {
    this.space_name = space_name;
    return this;
  }

  public void unsetSpace_name() {
    this.space_name = null;
  }

  // Returns true if field space_name is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_name() {
    return this.space_name != null;
  }

  public void setSpace_nameIsSet(boolean __value) {
    if (!__value) {
      this.space_name = null;
    }
  }

  public int getPartition_num() {
    return this.partition_num;
  }

  public SpaceDesc setPartition_num(int partition_num) {
    this.partition_num = partition_num;
    setPartition_numIsSet(true);
    return this;
  }

  public void unsetPartition_num() {
    __isset_bit_vector.clear(__PARTITION_NUM_ISSET_ID);
  }

  // Returns true if field partition_num is set (has been assigned a value) and false otherwise
  public boolean isSetPartition_num() {
    return __isset_bit_vector.get(__PARTITION_NUM_ISSET_ID);
  }

  public void setPartition_numIsSet(boolean __value) {
    __isset_bit_vector.set(__PARTITION_NUM_ISSET_ID, __value);
  }

  public int getReplica_factor() {
    return this.replica_factor;
  }

  public SpaceDesc setReplica_factor(int replica_factor) {
    this.replica_factor = replica_factor;
    setReplica_factorIsSet(true);
    return this;
  }

  public void unsetReplica_factor() {
    __isset_bit_vector.clear(__REPLICA_FACTOR_ISSET_ID);
  }

  // Returns true if field replica_factor is set (has been assigned a value) and false otherwise
  public boolean isSetReplica_factor() {
    return __isset_bit_vector.get(__REPLICA_FACTOR_ISSET_ID);
  }

  public void setReplica_factorIsSet(boolean __value) {
    __isset_bit_vector.set(__REPLICA_FACTOR_ISSET_ID, __value);
  }

  public byte[] getCharset_name() {
    return this.charset_name;
  }

  public SpaceDesc setCharset_name(byte[] charset_name) {
    this.charset_name = charset_name;
    return this;
  }

  public void unsetCharset_name() {
    this.charset_name = null;
  }

  // Returns true if field charset_name is set (has been assigned a value) and false otherwise
  public boolean isSetCharset_name() {
    return this.charset_name != null;
  }

  public void setCharset_nameIsSet(boolean __value) {
    if (!__value) {
      this.charset_name = null;
    }
  }

  public byte[] getCollate_name() {
    return this.collate_name;
  }

  public SpaceDesc setCollate_name(byte[] collate_name) {
    this.collate_name = collate_name;
    return this;
  }

  public void unsetCollate_name() {
    this.collate_name = null;
  }

  // Returns true if field collate_name is set (has been assigned a value) and false otherwise
  public boolean isSetCollate_name() {
    return this.collate_name != null;
  }

  public void setCollate_nameIsSet(boolean __value) {
    if (!__value) {
      this.collate_name = null;
    }
  }

  public ColumnTypeDef getVid_type() {
    return this.vid_type;
  }

  public SpaceDesc setVid_type(ColumnTypeDef vid_type) {
    this.vid_type = vid_type;
    return this;
  }

  public void unsetVid_type() {
    this.vid_type = null;
  }

  // Returns true if field vid_type is set (has been assigned a value) and false otherwise
  public boolean isSetVid_type() {
    return this.vid_type != null;
  }

  public void setVid_typeIsSet(boolean __value) {
    if (!__value) {
      this.vid_type = null;
    }
  }

  public List<byte[]> getZone_names() {
    return this.zone_names;
  }

  public SpaceDesc setZone_names(List<byte[]> zone_names) {
    this.zone_names = zone_names;
    return this;
  }

  public void unsetZone_names() {
    this.zone_names = null;
  }

  // Returns true if field zone_names is set (has been assigned a value) and false otherwise
  public boolean isSetZone_names() {
    return this.zone_names != null;
  }

  public void setZone_namesIsSet(boolean __value) {
    if (!__value) {
      this.zone_names = null;
    }
  }

  /**
   * 
   * @see IsolationLevel
   */
  public IsolationLevel getIsolation_level() {
    return this.isolation_level;
  }

  /**
   * 
   * @see IsolationLevel
   */
  public SpaceDesc setIsolation_level(IsolationLevel isolation_level) {
    this.isolation_level = isolation_level;
    return this;
  }

  public void unsetIsolation_level() {
    this.isolation_level = null;
  }

  // Returns true if field isolation_level is set (has been assigned a value) and false otherwise
  public boolean isSetIsolation_level() {
    return this.isolation_level != null;
  }

  public void setIsolation_levelIsSet(boolean __value) {
    if (!__value) {
      this.isolation_level = null;
    }
  }

  public byte[] getComment() {
    return this.comment;
  }

  public SpaceDesc setComment(byte[] comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  // Returns true if field comment is set (has been assigned a value) and false otherwise
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean __value) {
    if (!__value) {
      this.comment = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SPACE_NAME:
      if (__value == null) {
        unsetSpace_name();
      } else {
        setSpace_name((byte[])__value);
      }
      break;

    case PARTITION_NUM:
      if (__value == null) {
        unsetPartition_num();
      } else {
        setPartition_num((Integer)__value);
      }
      break;

    case REPLICA_FACTOR:
      if (__value == null) {
        unsetReplica_factor();
      } else {
        setReplica_factor((Integer)__value);
      }
      break;

    case CHARSET_NAME:
      if (__value == null) {
        unsetCharset_name();
      } else {
        setCharset_name((byte[])__value);
      }
      break;

    case COLLATE_NAME:
      if (__value == null) {
        unsetCollate_name();
      } else {
        setCollate_name((byte[])__value);
      }
      break;

    case VID_TYPE:
      if (__value == null) {
        unsetVid_type();
      } else {
        setVid_type((ColumnTypeDef)__value);
      }
      break;

    case ZONE_NAMES:
      if (__value == null) {
        unsetZone_names();
      } else {
        setZone_names((List<byte[]>)__value);
      }
      break;

    case ISOLATION_LEVEL:
      if (__value == null) {
        unsetIsolation_level();
      } else {
        setIsolation_level((IsolationLevel)__value);
      }
      break;

    case COMMENT:
      if (__value == null) {
        unsetComment();
      } else {
        setComment((byte[])__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE_NAME:
      return getSpace_name();

    case PARTITION_NUM:
      return new Integer(getPartition_num());

    case REPLICA_FACTOR:
      return new Integer(getReplica_factor());

    case CHARSET_NAME:
      return getCharset_name();

    case COLLATE_NAME:
      return getCollate_name();

    case VID_TYPE:
      return getVid_type();

    case ZONE_NAMES:
      return getZone_names();

    case ISOLATION_LEVEL:
      return getIsolation_level();

    case COMMENT:
      return getComment();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof SpaceDesc))
      return false;
    SpaceDesc that = (SpaceDesc)_that;

    if (!TBaseHelper.equalsSlow(this.isSetSpace_name(), that.isSetSpace_name(), this.space_name, that.space_name)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.partition_num, that.partition_num)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.replica_factor, that.replica_factor)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetCharset_name(), that.isSetCharset_name(), this.charset_name, that.charset_name)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetCollate_name(), that.isSetCollate_name(), this.collate_name, that.collate_name)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetVid_type(), that.isSetVid_type(), this.vid_type, that.vid_type)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetZone_names(), that.isSetZone_names(), this.zone_names, that.zone_names)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetIsolation_level(), that.isSetIsolation_level(), this.isolation_level, that.isolation_level)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetComment(), that.isSetComment(), this.comment, that.comment)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {space_name, partition_num, replica_factor, charset_name, collate_name, vid_type, zone_names, isolation_level, comment});
  }

  @Override
  public int compareTo(SpaceDesc other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpace_name()).compareTo(other.isSetSpace_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_name, other.space_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPartition_num()).compareTo(other.isSetPartition_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(partition_num, other.partition_num);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetReplica_factor()).compareTo(other.isSetReplica_factor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(replica_factor, other.replica_factor);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCharset_name()).compareTo(other.isSetCharset_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(charset_name, other.charset_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCollate_name()).compareTo(other.isSetCollate_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(collate_name, other.collate_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetVid_type()).compareTo(other.isSetVid_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(vid_type, other.vid_type);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetZone_names()).compareTo(other.isSetZone_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(zone_names, other.zone_names);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIsolation_level()).compareTo(other.isSetIsolation_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(isolation_level, other.isolation_level);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(comment, other.comment);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SPACE_NAME:
          if (__field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PARTITION_NUM:
          if (__field.type == TType.I32) {
            this.partition_num = iprot.readI32();
            setPartition_numIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case REPLICA_FACTOR:
          if (__field.type == TType.I32) {
            this.replica_factor = iprot.readI32();
            setReplica_factorIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case CHARSET_NAME:
          if (__field.type == TType.STRING) {
            this.charset_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case COLLATE_NAME:
          if (__field.type == TType.STRING) {
            this.collate_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case VID_TYPE:
          if (__field.type == TType.STRUCT) {
            this.vid_type = new ColumnTypeDef();
            this.vid_type.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ZONE_NAMES:
          if (__field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.zone_names = new ArrayList<byte[]>(Math.max(0, _list4.size));
              for (int _i5 = 0; 
                   (_list4.size < 0) ? iprot.peekList() : (_i5 < _list4.size); 
                   ++_i5)
              {
                byte[] _elem6;
                _elem6 = iprot.readBinary();
                this.zone_names.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ISOLATION_LEVEL:
          if (__field.type == TType.I32) {
            this.isolation_level = IsolationLevel.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case COMMENT:
          if (__field.type == TType.STRING) {
            this.comment = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.space_name != null) {
      oprot.writeFieldBegin(SPACE_NAME_FIELD_DESC);
      oprot.writeBinary(this.space_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PARTITION_NUM_FIELD_DESC);
    oprot.writeI32(this.partition_num);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(REPLICA_FACTOR_FIELD_DESC);
    oprot.writeI32(this.replica_factor);
    oprot.writeFieldEnd();
    if (this.charset_name != null) {
      oprot.writeFieldBegin(CHARSET_NAME_FIELD_DESC);
      oprot.writeBinary(this.charset_name);
      oprot.writeFieldEnd();
    }
    if (this.collate_name != null) {
      oprot.writeFieldBegin(COLLATE_NAME_FIELD_DESC);
      oprot.writeBinary(this.collate_name);
      oprot.writeFieldEnd();
    }
    if (this.vid_type != null) {
      oprot.writeFieldBegin(VID_TYPE_FIELD_DESC);
      this.vid_type.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.zone_names != null) {
      oprot.writeFieldBegin(ZONE_NAMES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.zone_names.size()));
        for (byte[] _iter7 : this.zone_names)        {
          oprot.writeBinary(_iter7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.isolation_level != null) {
      if (isSetIsolation_level()) {
        oprot.writeFieldBegin(ISOLATION_LEVEL_FIELD_DESC);
        oprot.writeI32(this.isolation_level == null ? 0 : this.isolation_level.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.comment != null) {
      if (isSetComment()) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeBinary(this.comment);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SpaceDesc");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("space_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSpace_name() == null) {
      sb.append("null");
    } else {
        int __space_name_size = Math.min(this.getSpace_name().length, 128);
        for (int i = 0; i < __space_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getSpace_name()[i]).length() > 1 ? Integer.toHexString(this.getSpace_name()[i]).substring(Integer.toHexString(this.getSpace_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getSpace_name()[i]).toUpperCase());
        }
        if (this.getSpace_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("partition_num");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getPartition_num(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("replica_factor");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getReplica_factor(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("charset_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getCharset_name() == null) {
      sb.append("null");
    } else {
        int __charset_name_size = Math.min(this.getCharset_name().length, 128);
        for (int i = 0; i < __charset_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getCharset_name()[i]).length() > 1 ? Integer.toHexString(this.getCharset_name()[i]).substring(Integer.toHexString(this.getCharset_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getCharset_name()[i]).toUpperCase());
        }
        if (this.getCharset_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("collate_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getCollate_name() == null) {
      sb.append("null");
    } else {
        int __collate_name_size = Math.min(this.getCollate_name().length, 128);
        for (int i = 0; i < __collate_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getCollate_name()[i]).length() > 1 ? Integer.toHexString(this.getCollate_name()[i]).substring(Integer.toHexString(this.getCollate_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getCollate_name()[i]).toUpperCase());
        }
        if (this.getCollate_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("vid_type");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getVid_type() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getVid_type(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("zone_names");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getZone_names() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getZone_names(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetIsolation_level())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("isolation_level");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getIsolation_level() == null) {
        sb.append("null");
      } else {
        String isolation_level_name = this.getIsolation_level() == null ? "null" : this.getIsolation_level().name();
        if (isolation_level_name != null) {
          sb.append(isolation_level_name);
          sb.append(" (");
        }
        sb.append(this.getIsolation_level());
        if (isolation_level_name != null) {
          sb.append(")");
        }
      }
      first = false;
    }
    if (isSetComment())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("comment");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getComment() == null) {
        sb.append("null");
      } else {
          int __comment_size = Math.min(this.getComment().length, 128);
          for (int i = 0; i < __comment_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getComment()[i]).length() > 1 ? Integer.toHexString(this.getComment()[i]).substring(Integer.toHexString(this.getComment()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getComment()[i]).toUpperCase());
          }
          if (this.getComment().length > 128) sb.append(" ...");
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

