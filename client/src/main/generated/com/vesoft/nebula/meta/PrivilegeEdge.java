/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class PrivilegeEdge implements TBase, java.io.Serializable, Cloneable, Comparable<PrivilegeEdge> {
  private static final TStruct STRUCT_DESC = new TStruct("PrivilegeEdge");
  private static final TField EDGE_TYPE_FIELD_DESC = new TField("edge_type", TType.I32, (short)1);
  private static final TField EDGE_NAME_FIELD_DESC = new TField("edge_name", TType.STRING, (short)2);

  public int edge_type;
  public byte[] edge_name;
  public static final int EDGE_TYPE = 1;
  public static final int EDGE_NAME = 2;

  // isset id assignments
  private static final int __EDGE_TYPE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(EDGE_TYPE, new FieldMetaData("edge_type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(EDGE_NAME, new FieldMetaData("edge_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(PrivilegeEdge.class, metaDataMap);
  }

  public PrivilegeEdge() {
  }

  public PrivilegeEdge(
      int edge_type,
      byte[] edge_name) {
    this();
    this.edge_type = edge_type;
    setEdge_typeIsSet(true);
    this.edge_name = edge_name;
  }

  public static class Builder {
    private int edge_type;
    private byte[] edge_name;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setEdge_type(final int edge_type) {
      this.edge_type = edge_type;
      __optional_isset.set(__EDGE_TYPE_ISSET_ID, true);
      return this;
    }

    public Builder setEdge_name(final byte[] edge_name) {
      this.edge_name = edge_name;
      return this;
    }

    public PrivilegeEdge build() {
      PrivilegeEdge result = new PrivilegeEdge();
      if (__optional_isset.get(__EDGE_TYPE_ISSET_ID)) {
        result.setEdge_type(this.edge_type);
      }
      result.setEdge_name(this.edge_name);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrivilegeEdge(PrivilegeEdge other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.edge_type = TBaseHelper.deepCopy(other.edge_type);
    if (other.isSetEdge_name()) {
      this.edge_name = TBaseHelper.deepCopy(other.edge_name);
    }
  }

  public PrivilegeEdge deepCopy() {
    return new PrivilegeEdge(this);
  }

  public int getEdge_type() {
    return this.edge_type;
  }

  public PrivilegeEdge setEdge_type(int edge_type) {
    this.edge_type = edge_type;
    setEdge_typeIsSet(true);
    return this;
  }

  public void unsetEdge_type() {
    __isset_bit_vector.clear(__EDGE_TYPE_ISSET_ID);
  }

  // Returns true if field edge_type is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_type() {
    return __isset_bit_vector.get(__EDGE_TYPE_ISSET_ID);
  }

  public void setEdge_typeIsSet(boolean __value) {
    __isset_bit_vector.set(__EDGE_TYPE_ISSET_ID, __value);
  }

  public byte[] getEdge_name() {
    return this.edge_name;
  }

  public PrivilegeEdge setEdge_name(byte[] edge_name) {
    this.edge_name = edge_name;
    return this;
  }

  public void unsetEdge_name() {
    this.edge_name = null;
  }

  // Returns true if field edge_name is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_name() {
    return this.edge_name != null;
  }

  public void setEdge_nameIsSet(boolean __value) {
    if (!__value) {
      this.edge_name = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case EDGE_TYPE:
      if (__value == null) {
        unsetEdge_type();
      } else {
        setEdge_type((Integer)__value);
      }
      break;

    case EDGE_NAME:
      if (__value == null) {
        unsetEdge_name();
      } else {
        setEdge_name((byte[])__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case EDGE_TYPE:
      return new Integer(getEdge_type());

    case EDGE_NAME:
      return getEdge_name();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof PrivilegeEdge))
      return false;
    PrivilegeEdge that = (PrivilegeEdge)_that;

    if (!TBaseHelper.equalsNobinary(this.edge_type, that.edge_type)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetEdge_name(), that.isSetEdge_name(), this.edge_name, that.edge_name)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {edge_type, edge_name});
  }

  @Override
  public int compareTo(PrivilegeEdge other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEdge_type()).compareTo(other.isSetEdge_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edge_type, other.edge_type);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEdge_name()).compareTo(other.isSetEdge_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edge_name, other.edge_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case EDGE_TYPE:
          if (__field.type == TType.I32) {
            this.edge_type = iprot.readI32();
            setEdge_typeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case EDGE_NAME:
          if (__field.type == TType.STRING) {
            this.edge_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EDGE_TYPE_FIELD_DESC);
    oprot.writeI32(this.edge_type);
    oprot.writeFieldEnd();
    if (this.edge_name != null) {
      oprot.writeFieldBegin(EDGE_NAME_FIELD_DESC);
      oprot.writeBinary(this.edge_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("PrivilegeEdge");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("edge_type");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getEdge_type(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("edge_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEdge_name() == null) {
      sb.append("null");
    } else {
        int __edge_name_size = Math.min(this.getEdge_name().length, 128);
        for (int i = 0; i < __edge_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getEdge_name()[i]).length() > 1 ? Integer.toHexString(this.getEdge_name()[i]).substring(Integer.toHexString(this.getEdge_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getEdge_name()[i]).toUpperCase());
        }
        if (this.getEdge_name().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

