/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class PartInfo implements TBase, java.io.Serializable, Cloneable, Comparable<PartInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("PartInfo");
  private static final TField PEERS_FIELD_DESC = new TField("peers", TType.LIST, (short)1);
  private static final TField IS_LEADERS_FIELD_DESC = new TField("is_leaders", TType.LIST, (short)2);

  public List<com.vesoft.nebula.HostAddr> peers;
  public List<Boolean> is_leaders;
  public static final int PEERS = 1;
  public static final int IS_LEADERS = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PEERS, new FieldMetaData("peers", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class))));
    tmpMetaDataMap.put(IS_LEADERS, new FieldMetaData("is_leaders", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.BOOL))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(PartInfo.class, metaDataMap);
  }

  public PartInfo() {
  }

  public PartInfo(
    List<com.vesoft.nebula.HostAddr> peers,
    List<Boolean> is_leaders)
  {
    this();
    this.peers = peers;
    this.is_leaders = is_leaders;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartInfo(PartInfo other) {
    if (other.isSetPeers()) {
      this.peers = TBaseHelper.deepCopy(other.peers);
    }
    if (other.isSetIs_leaders()) {
      this.is_leaders = TBaseHelper.deepCopy(other.is_leaders);
    }
  }

  public PartInfo deepCopy() {
    return new PartInfo(this);
  }

  @Deprecated
  public PartInfo clone() {
    return new PartInfo(this);
  }

  public List<com.vesoft.nebula.HostAddr>  getPeers() {
    return this.peers;
  }

  public PartInfo setPeers(List<com.vesoft.nebula.HostAddr> peers) {
    this.peers = peers;
    return this;
  }

  public void unsetPeers() {
    this.peers = null;
  }

  // Returns true if field peers is set (has been assigned a value) and false otherwise
  public boolean isSetPeers() {
    return this.peers != null;
  }

  public void setPeersIsSet(boolean value) {
    if (!value) {
      this.peers = null;
    }
  }

  public List<Boolean>  getIs_leaders() {
    return this.is_leaders;
  }

  public PartInfo setIs_leaders(List<Boolean> is_leaders) {
    this.is_leaders = is_leaders;
    return this;
  }

  public void unsetIs_leaders() {
    this.is_leaders = null;
  }

  // Returns true if field is_leaders is set (has been assigned a value) and false otherwise
  public boolean isSetIs_leaders() {
    return this.is_leaders != null;
  }

  public void setIs_leadersIsSet(boolean value) {
    if (!value) {
      this.is_leaders = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PEERS:
      if (value == null) {
        unsetPeers();
      } else {
        setPeers((List<com.vesoft.nebula.HostAddr>)value);
      }
      break;

    case IS_LEADERS:
      if (value == null) {
        unsetIs_leaders();
      } else {
        setIs_leaders((List<Boolean>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PEERS:
      return getPeers();

    case IS_LEADERS:
      return getIs_leaders();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PEERS:
      return isSetPeers();
    case IS_LEADERS:
      return isSetIs_leaders();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartInfo)
      return this.equals((PartInfo)that);
    return false;
  }

  public boolean equals(PartInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_peers = true && this.isSetPeers();
    boolean that_present_peers = true && that.isSetPeers();
    if (this_present_peers || that_present_peers) {
      if (!(this_present_peers && that_present_peers))
        return false;
      if (!TBaseHelper.equalsNobinary(this.peers, that.peers))
        return false;
    }

    boolean this_present_is_leaders = true && this.isSetIs_leaders();
    boolean that_present_is_leaders = true && that.isSetIs_leaders();
    if (this_present_is_leaders || that_present_is_leaders) {
      if (!(this_present_is_leaders && that_present_is_leaders))
        return false;
      if (!TBaseHelper.equalsNobinary(this.is_leaders, that.is_leaders))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_peers = true && (isSetPeers());
    builder.append(present_peers);
    if (present_peers)
      builder.append(peers);

    boolean present_is_leaders = true && (isSetIs_leaders());
    builder.append(present_is_leaders);
    if (present_is_leaders)
      builder.append(is_leaders);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(PartInfo other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPeers()).compareTo(other.isSetPeers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(peers, other.peers);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIs_leaders()).compareTo(other.isSetIs_leaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(is_leaders, other.is_leaders);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PEERS:
          if (field.type == TType.LIST) {
            {
              TList _list54 = iprot.readListBegin();
              this.peers = new ArrayList<com.vesoft.nebula.HostAddr>(Math.max(0, _list54.size));
              for (int _i55 = 0; 
                   (_list54.size < 0) ? iprot.peekList() : (_i55 < _list54.size); 
                   ++_i55)
              {
                com.vesoft.nebula.HostAddr _elem56;
                _elem56 = new com.vesoft.nebula.HostAddr();
                _elem56.read(iprot);
                this.peers.add(_elem56);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IS_LEADERS:
          if (field.type == TType.LIST) {
            {
              TList _list57 = iprot.readListBegin();
              this.is_leaders = new ArrayList<Boolean>(Math.max(0, _list57.size));
              for (int _i58 = 0; 
                   (_list57.size < 0) ? iprot.peekList() : (_i58 < _list57.size); 
                   ++_i58)
              {
                boolean _elem59;
                _elem59 = iprot.readBool();
                this.is_leaders.add(_elem59);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.peers != null) {
      oprot.writeFieldBegin(PEERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.peers.size()));
        for (com.vesoft.nebula.HostAddr _iter60 : this.peers)        {
          _iter60.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.is_leaders != null) {
      oprot.writeFieldBegin(IS_LEADERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.BOOL, this.is_leaders.size()));
        for (boolean _iter61 : this.is_leaders)        {
          oprot.writeBool(_iter61);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("PartInfo");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("peers");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getPeers() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getPeers(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("is_leaders");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getIs_leaders() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getIs_leaders(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

