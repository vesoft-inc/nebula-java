/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class BalanceReq implements TBase, java.io.Serializable, Cloneable, Comparable<BalanceReq> {
  private static final TStruct STRUCT_DESC = new TStruct("BalanceReq");
  private static final TField SPACE_ID_FIELD_DESC = new TField("space_id", TType.I32, (short)1);
  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)2);
  private static final TField HOST_DEL_FIELD_DESC = new TField("host_del", TType.LIST, (short)3);
  private static final TField STOP_FIELD_DESC = new TField("stop", TType.BOOL, (short)4);

  public int space_id;
  public long id;
  public List<com.vesoft.nebula.HostAddr> host_del;
  public boolean stop;
  public static final int SPACE_ID = 1;
  public static final int ID = 2;
  public static final int HOST_DEL = 3;
  public static final int STOP = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SPACE_ID_ISSET_ID = 0;
  private static final int __ID_ISSET_ID = 1;
  private static final int __STOP_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE_ID, new FieldMetaData("space_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(ID, new FieldMetaData("id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(HOST_DEL, new FieldMetaData("host_del", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class))));
    tmpMetaDataMap.put(STOP, new FieldMetaData("stop", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(BalanceReq.class, metaDataMap);
  }

  public BalanceReq() {
  }

  public BalanceReq(
    int space_id,
    long id,
    List<com.vesoft.nebula.HostAddr> host_del,
    boolean stop)
  {
    this();
    this.space_id = space_id;
    setSpace_idIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.host_del = host_del;
    this.stop = stop;
    setStopIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BalanceReq(BalanceReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.space_id = TBaseHelper.deepCopy(other.space_id);
    this.id = TBaseHelper.deepCopy(other.id);
    if (other.isSetHost_del()) {
      this.host_del = TBaseHelper.deepCopy(other.host_del);
    }
    this.stop = TBaseHelper.deepCopy(other.stop);
  }

  public BalanceReq deepCopy() {
    return new BalanceReq(this);
  }

  @Deprecated
  public BalanceReq clone() {
    return new BalanceReq(this);
  }

  public int  getSpace_id() {
    return this.space_id;
  }

  public BalanceReq setSpace_id(int space_id) {
    this.space_id = space_id;
    setSpace_idIsSet(true);
    return this;
  }

  public void unsetSpace_id() {
    __isset_bit_vector.clear(__SPACE_ID_ISSET_ID);
  }

  // Returns true if field space_id is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_id() {
    return __isset_bit_vector.get(__SPACE_ID_ISSET_ID);
  }

  public void setSpace_idIsSet(boolean value) {
    __isset_bit_vector.set(__SPACE_ID_ISSET_ID, value);
  }

  public long  getId() {
    return this.id;
  }

  public BalanceReq setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public List<com.vesoft.nebula.HostAddr>  getHost_del() {
    return this.host_del;
  }

  public BalanceReq setHost_del(List<com.vesoft.nebula.HostAddr> host_del) {
    this.host_del = host_del;
    return this;
  }

  public void unsetHost_del() {
    this.host_del = null;
  }

  // Returns true if field host_del is set (has been assigned a value) and false otherwise
  public boolean isSetHost_del() {
    return this.host_del != null;
  }

  public void setHost_delIsSet(boolean value) {
    if (!value) {
      this.host_del = null;
    }
  }

  public boolean  isStop() {
    return this.stop;
  }

  public BalanceReq setStop(boolean stop) {
    this.stop = stop;
    setStopIsSet(true);
    return this;
  }

  public void unsetStop() {
    __isset_bit_vector.clear(__STOP_ISSET_ID);
  }

  // Returns true if field stop is set (has been assigned a value) and false otherwise
  public boolean isSetStop() {
    return __isset_bit_vector.get(__STOP_ISSET_ID);
  }

  public void setStopIsSet(boolean value) {
    __isset_bit_vector.set(__STOP_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SPACE_ID:
      if (value == null) {
        unsetSpace_id();
      } else {
        setSpace_id((Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case HOST_DEL:
      if (value == null) {
        unsetHost_del();
      } else {
        setHost_del((List<com.vesoft.nebula.HostAddr>)value);
      }
      break;

    case STOP:
      if (value == null) {
        unsetStop();
      } else {
        setStop((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return new Integer(getSpace_id());

    case ID:
      return new Long(getId());

    case HOST_DEL:
      return getHost_del();

    case STOP:
      return new Boolean(isStop());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return isSetSpace_id();
    case ID:
      return isSetId();
    case HOST_DEL:
      return isSetHost_del();
    case STOP:
      return isSetStop();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BalanceReq)
      return this.equals((BalanceReq)that);
    return false;
  }

  public boolean equals(BalanceReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_space_id = true && this.isSetSpace_id();
    boolean that_present_space_id = true && that.isSetSpace_id();
    if (this_present_space_id || that_present_space_id) {
      if (!(this_present_space_id && that_present_space_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.space_id, that.space_id))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.id, that.id))
        return false;
    }

    boolean this_present_host_del = true && this.isSetHost_del();
    boolean that_present_host_del = true && that.isSetHost_del();
    if (this_present_host_del || that_present_host_del) {
      if (!(this_present_host_del && that_present_host_del))
        return false;
      if (!TBaseHelper.equalsNobinary(this.host_del, that.host_del))
        return false;
    }

    boolean this_present_stop = true && this.isSetStop();
    boolean that_present_stop = true && that.isSetStop();
    if (this_present_stop || that_present_stop) {
      if (!(this_present_stop && that_present_stop))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stop, that.stop))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_space_id = true && (isSetSpace_id());
    builder.append(present_space_id);
    if (present_space_id)
      builder.append(space_id);

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_host_del = true && (isSetHost_del());
    builder.append(present_host_del);
    if (present_host_del)
      builder.append(host_del);

    boolean present_stop = true && (isSetStop());
    builder.append(present_stop);
    if (present_stop)
      builder.append(stop);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(BalanceReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpace_id()).compareTo(other.isSetSpace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_id, other.space_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id, other.id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHost_del()).compareTo(other.isSetHost_del());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(host_del, other.host_del);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStop()).compareTo(other.isSetStop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stop, other.stop);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            setSpace_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ID:
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOST_DEL:
          if (field.type == TType.LIST) {
            {
              TList _list133 = iprot.readListBegin();
              this.host_del = new ArrayList<com.vesoft.nebula.HostAddr>(Math.max(0, _list133.size));
              for (int _i134 = 0; 
                   (_list133.size < 0) ? iprot.peekList() : (_i134 < _list133.size); 
                   ++_i134)
              {
                com.vesoft.nebula.HostAddr _elem135;
                _elem135 = new com.vesoft.nebula.HostAddr();
                _elem135.read(iprot);
                this.host_del.add(_elem135);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STOP:
          if (field.type == TType.BOOL) {
            this.stop = iprot.readBool();
            setStopIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetSpace_id()) {
      oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
      oprot.writeI32(this.space_id);
      oprot.writeFieldEnd();
    }
    if (isSetId()) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(this.id);
      oprot.writeFieldEnd();
    }
    if (this.host_del != null) {
      if (isSetHost_del()) {
        oprot.writeFieldBegin(HOST_DEL_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.host_del.size()));
          for (com.vesoft.nebula.HostAddr _iter136 : this.host_del)          {
            _iter136.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetStop()) {
      oprot.writeFieldBegin(STOP_FIELD_DESC);
      oprot.writeBool(this.stop);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("BalanceReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    if (isSetSpace_id())
    {
      sb.append(indentStr);
      sb.append("space_id");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getSpace_id(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetId())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("id");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getId(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetHost_del())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("host_del");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getHost_del() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getHost_del(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetStop())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stop");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. isStop(), indent + 1, prettyPrint));
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

