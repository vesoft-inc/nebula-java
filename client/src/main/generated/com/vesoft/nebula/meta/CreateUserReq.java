/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class CreateUserReq implements TBase, java.io.Serializable, Cloneable, Comparable<CreateUserReq> {
  private static final TStruct STRUCT_DESC = new TStruct("CreateUserReq");
  private static final TField USER_FIELD_DESC = new TField("user", TType.STRUCT, (short)1);
  private static final TField ENCODED_PWD_FIELD_DESC = new TField("encoded_pwd", TType.STRING, (short)2);
  private static final TField MISSING_OK_FIELD_DESC = new TField("missing_ok", TType.BOOL, (short)3);

  public UserItem user;
  public String encoded_pwd;
  public boolean missing_ok;
  public static final int USER = 1;
  public static final int ENCODED_PWD = 2;
  public static final int MISSING_OK = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __MISSING_OK_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, UserItem.class)));
    tmpMetaDataMap.put(ENCODED_PWD, new FieldMetaData("encoded_pwd", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(MISSING_OK, new FieldMetaData("missing_ok", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(CreateUserReq.class, metaDataMap);
  }

  public CreateUserReq() {
  }

  public CreateUserReq(
    UserItem user,
    String encoded_pwd,
    boolean missing_ok)
  {
    this();
    this.user = user;
    this.encoded_pwd = encoded_pwd;
    this.missing_ok = missing_ok;
    setMissing_okIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateUserReq(CreateUserReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUser()) {
      this.user = TBaseHelper.deepCopy(other.user);
    }
    if (other.isSetEncoded_pwd()) {
      this.encoded_pwd = TBaseHelper.deepCopy(other.encoded_pwd);
    }
    this.missing_ok = TBaseHelper.deepCopy(other.missing_ok);
  }

  public CreateUserReq deepCopy() {
    return new CreateUserReq(this);
  }

  @Deprecated
  public CreateUserReq clone() {
    return new CreateUserReq(this);
  }

  public UserItem  getUser() {
    return this.user;
  }

  public CreateUserReq setUser(UserItem user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  // Returns true if field user is set (has been assigned a value) and false otherwise
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String  getEncoded_pwd() {
    return this.encoded_pwd;
  }

  public CreateUserReq setEncoded_pwd(String encoded_pwd) {
    this.encoded_pwd = encoded_pwd;
    return this;
  }

  public void unsetEncoded_pwd() {
    this.encoded_pwd = null;
  }

  // Returns true if field encoded_pwd is set (has been assigned a value) and false otherwise
  public boolean isSetEncoded_pwd() {
    return this.encoded_pwd != null;
  }

  public void setEncoded_pwdIsSet(boolean value) {
    if (!value) {
      this.encoded_pwd = null;
    }
  }

  public boolean  isMissing_ok() {
    return this.missing_ok;
  }

  public CreateUserReq setMissing_ok(boolean missing_ok) {
    this.missing_ok = missing_ok;
    setMissing_okIsSet(true);
    return this;
  }

  public void unsetMissing_ok() {
    __isset_bit_vector.clear(__MISSING_OK_ISSET_ID);
  }

  // Returns true if field missing_ok is set (has been assigned a value) and false otherwise
  public boolean isSetMissing_ok() {
    return __isset_bit_vector.get(__MISSING_OK_ISSET_ID);
  }

  public void setMissing_okIsSet(boolean value) {
    __isset_bit_vector.set(__MISSING_OK_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((UserItem)value);
      }
      break;

    case ENCODED_PWD:
      if (value == null) {
        unsetEncoded_pwd();
      } else {
        setEncoded_pwd((String)value);
      }
      break;

    case MISSING_OK:
      if (value == null) {
        unsetMissing_ok();
      } else {
        setMissing_ok((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case USER:
      return getUser();

    case ENCODED_PWD:
      return getEncoded_pwd();

    case MISSING_OK:
      return new Boolean(isMissing_ok());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case USER:
      return isSetUser();
    case ENCODED_PWD:
      return isSetEncoded_pwd();
    case MISSING_OK:
      return isSetMissing_ok();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateUserReq)
      return this.equals((CreateUserReq)that);
    return false;
  }

  public boolean equals(CreateUserReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!TBaseHelper.equalsNobinary(this.user, that.user))
        return false;
    }

    boolean this_present_encoded_pwd = true && this.isSetEncoded_pwd();
    boolean that_present_encoded_pwd = true && that.isSetEncoded_pwd();
    if (this_present_encoded_pwd || that_present_encoded_pwd) {
      if (!(this_present_encoded_pwd && that_present_encoded_pwd))
        return false;
      if (!TBaseHelper.equalsNobinary(this.encoded_pwd, that.encoded_pwd))
        return false;
    }

    boolean this_present_missing_ok = true;
    boolean that_present_missing_ok = true;
    if (this_present_missing_ok || that_present_missing_ok) {
      if (!(this_present_missing_ok && that_present_missing_ok))
        return false;
      if (!TBaseHelper.equalsNobinary(this.missing_ok, that.missing_ok))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_user = true && (isSetUser());
    builder.append(present_user);
    if (present_user)
      builder.append(user);

    boolean present_encoded_pwd = true && (isSetEncoded_pwd());
    builder.append(present_encoded_pwd);
    if (present_encoded_pwd)
      builder.append(encoded_pwd);

    boolean present_missing_ok = true;
    builder.append(present_missing_ok);
    if (present_missing_ok)
      builder.append(missing_ok);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(CreateUserReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(user, other.user);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEncoded_pwd()).compareTo(other.isSetEncoded_pwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(encoded_pwd, other.encoded_pwd);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMissing_ok()).compareTo(other.isSetMissing_ok());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(missing_ok, other.missing_ok);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case USER:
          if (field.type == TType.STRUCT) {
            this.user = new UserItem();
            this.user.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCODED_PWD:
          if (field.type == TType.STRING) {
            this.encoded_pwd = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MISSING_OK:
          if (field.type == TType.BOOL) {
            this.missing_ok = iprot.readBool();
            setMissing_okIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.user != null) {
      oprot.writeFieldBegin(USER_FIELD_DESC);
      this.user.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.encoded_pwd != null) {
      oprot.writeFieldBegin(ENCODED_PWD_FIELD_DESC);
      oprot.writeString(this.encoded_pwd);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MISSING_OK_FIELD_DESC);
    oprot.writeBool(this.missing_ok);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("CreateUserReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("user");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getUser() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getUser(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("encoded_pwd");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEncoded_pwd() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEncoded_pwd(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("missing_ok");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isMissing_ok(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

