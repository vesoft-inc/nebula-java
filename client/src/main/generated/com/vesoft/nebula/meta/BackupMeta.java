/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class BackupMeta implements TBase, java.io.Serializable, Cloneable, Comparable<BackupMeta> {
  private static final TStruct STRUCT_DESC = new TStruct("BackupMeta");
  private static final TField BACKUP_INFO_FIELD_DESC = new TField("backup_info", TType.MAP, (short)1);
  private static final TField META_FILES_FIELD_DESC = new TField("meta_files", TType.LIST, (short)2);
  private static final TField BACKUP_NAME_FIELD_DESC = new TField("backup_name", TType.STRING, (short)3);

  public Map<Integer,SpaceBackupInfo> backup_info;
  public List<byte[]> meta_files;
  public byte[] backup_name;
  public static final int BACKUP_INFO = 1;
  public static final int META_FILES = 2;
  public static final int BACKUP_NAME = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(BACKUP_INFO, new FieldMetaData("backup_info", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, SpaceBackupInfo.class))));
    tmpMetaDataMap.put(META_FILES, new FieldMetaData("meta_files", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BACKUP_NAME, new FieldMetaData("backup_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(BackupMeta.class, metaDataMap);
  }

  public BackupMeta() {
  }

  public BackupMeta(
    Map<Integer,SpaceBackupInfo> backup_info,
    List<byte[]> meta_files,
    byte[] backup_name)
  {
    this();
    this.backup_info = backup_info;
    this.meta_files = meta_files;
    this.backup_name = backup_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BackupMeta(BackupMeta other) {
    if (other.isSetBackup_info()) {
      this.backup_info = TBaseHelper.deepCopy(other.backup_info);
    }
    if (other.isSetMeta_files()) {
      this.meta_files = TBaseHelper.deepCopy(other.meta_files);
    }
    if (other.isSetBackup_name()) {
      this.backup_name = TBaseHelper.deepCopy(other.backup_name);
    }
  }

  public BackupMeta deepCopy() {
    return new BackupMeta(this);
  }

  @Deprecated
  public BackupMeta clone() {
    return new BackupMeta(this);
  }

  public Map<Integer,SpaceBackupInfo>  getBackup_info() {
    return this.backup_info;
  }

  public BackupMeta setBackup_info(Map<Integer,SpaceBackupInfo> backup_info) {
    this.backup_info = backup_info;
    return this;
  }

  public void unsetBackup_info() {
    this.backup_info = null;
  }

  // Returns true if field backup_info is set (has been assigned a value) and false otherwise
  public boolean isSetBackup_info() {
    return this.backup_info != null;
  }

  public void setBackup_infoIsSet(boolean value) {
    if (!value) {
      this.backup_info = null;
    }
  }

  public List<byte[]>  getMeta_files() {
    return this.meta_files;
  }

  public BackupMeta setMeta_files(List<byte[]> meta_files) {
    this.meta_files = meta_files;
    return this;
  }

  public void unsetMeta_files() {
    this.meta_files = null;
  }

  // Returns true if field meta_files is set (has been assigned a value) and false otherwise
  public boolean isSetMeta_files() {
    return this.meta_files != null;
  }

  public void setMeta_filesIsSet(boolean value) {
    if (!value) {
      this.meta_files = null;
    }
  }

  public byte[]  getBackup_name() {
    return this.backup_name;
  }

  public BackupMeta setBackup_name(byte[] backup_name) {
    this.backup_name = backup_name;
    return this;
  }

  public void unsetBackup_name() {
    this.backup_name = null;
  }

  // Returns true if field backup_name is set (has been assigned a value) and false otherwise
  public boolean isSetBackup_name() {
    return this.backup_name != null;
  }

  public void setBackup_nameIsSet(boolean value) {
    if (!value) {
      this.backup_name = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case BACKUP_INFO:
      if (value == null) {
        unsetBackup_info();
      } else {
        setBackup_info((Map<Integer,SpaceBackupInfo>)value);
      }
      break;

    case META_FILES:
      if (value == null) {
        unsetMeta_files();
      } else {
        setMeta_files((List<byte[]>)value);
      }
      break;

    case BACKUP_NAME:
      if (value == null) {
        unsetBackup_name();
      } else {
        setBackup_name((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case BACKUP_INFO:
      return getBackup_info();

    case META_FILES:
      return getMeta_files();

    case BACKUP_NAME:
      return getBackup_name();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case BACKUP_INFO:
      return isSetBackup_info();
    case META_FILES:
      return isSetMeta_files();
    case BACKUP_NAME:
      return isSetBackup_name();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BackupMeta)
      return this.equals((BackupMeta)that);
    return false;
  }

  public boolean equals(BackupMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_backup_info = true && this.isSetBackup_info();
    boolean that_present_backup_info = true && that.isSetBackup_info();
    if (this_present_backup_info || that_present_backup_info) {
      if (!(this_present_backup_info && that_present_backup_info))
        return false;
      if (!TBaseHelper.equalsNobinary(this.backup_info, that.backup_info))
        return false;
    }

    boolean this_present_meta_files = true && this.isSetMeta_files();
    boolean that_present_meta_files = true && that.isSetMeta_files();
    if (this_present_meta_files || that_present_meta_files) {
      if (!(this_present_meta_files && that_present_meta_files))
        return false;
      if (!TBaseHelper.equalsSlow(this.meta_files, that.meta_files))
        return false;
    }

    boolean this_present_backup_name = true && this.isSetBackup_name();
    boolean that_present_backup_name = true && that.isSetBackup_name();
    if (this_present_backup_name || that_present_backup_name) {
      if (!(this_present_backup_name && that_present_backup_name))
        return false;
      if (!TBaseHelper.equalsSlow(this.backup_name, that.backup_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_backup_info = true && (isSetBackup_info());
    builder.append(present_backup_info);
    if (present_backup_info)
      builder.append(backup_info);

    boolean present_meta_files = true && (isSetMeta_files());
    builder.append(present_meta_files);
    if (present_meta_files)
      builder.append(meta_files);

    boolean present_backup_name = true && (isSetBackup_name());
    builder.append(present_backup_name);
    if (present_backup_name)
      builder.append(backup_name);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(BackupMeta other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBackup_info()).compareTo(other.isSetBackup_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(backup_info, other.backup_info);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMeta_files()).compareTo(other.isSetMeta_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(meta_files, other.meta_files);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBackup_name()).compareTo(other.isSetBackup_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(backup_name, other.backup_name);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case BACKUP_INFO:
          if (field.type == TType.MAP) {
            {
              TMap _map223 = iprot.readMapBegin();
              this.backup_info = new HashMap<Integer,SpaceBackupInfo>(Math.max(0, 2*_map223.size));
              for (int _i224 = 0; 
                   (_map223.size < 0) ? iprot.peekMap() : (_i224 < _map223.size); 
                   ++_i224)
              {
                int _key225;
                SpaceBackupInfo _val226;
                _key225 = iprot.readI32();
                _val226 = new SpaceBackupInfo();
                _val226.read(iprot);
                this.backup_info.put(_key225, _val226);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case META_FILES:
          if (field.type == TType.LIST) {
            {
              TList _list227 = iprot.readListBegin();
              this.meta_files = new ArrayList<byte[]>(Math.max(0, _list227.size));
              for (int _i228 = 0; 
                   (_list227.size < 0) ? iprot.peekList() : (_i228 < _list227.size); 
                   ++_i228)
              {
                byte[] _elem229;
                _elem229 = iprot.readBinary();
                this.meta_files.add(_elem229);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BACKUP_NAME:
          if (field.type == TType.STRING) {
            this.backup_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.backup_info != null) {
      oprot.writeFieldBegin(BACKUP_INFO_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.backup_info.size()));
        for (Map.Entry<Integer, SpaceBackupInfo> _iter230 : this.backup_info.entrySet())        {
          oprot.writeI32(_iter230.getKey());
          _iter230.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.meta_files != null) {
      oprot.writeFieldBegin(META_FILES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.meta_files.size()));
        for (byte[] _iter231 : this.meta_files)        {
          oprot.writeBinary(_iter231);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.backup_name != null) {
      oprot.writeFieldBegin(BACKUP_NAME_FIELD_DESC);
      oprot.writeBinary(this.backup_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("BackupMeta");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("backup_info");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBackup_info() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBackup_info(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("meta_files");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getMeta_files() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getMeta_files(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("backup_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBackup_name() == null) {
      sb.append("null");
    } else {
        int __backup_name_size = Math.min(this. getBackup_name().length, 128);
        for (int i = 0; i < __backup_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getBackup_name()[i]).length() > 1 ? Integer.toHexString(this. getBackup_name()[i]).substring(Integer.toHexString(this. getBackup_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getBackup_name()[i]).toUpperCase());
        }
        if (this. getBackup_name().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

