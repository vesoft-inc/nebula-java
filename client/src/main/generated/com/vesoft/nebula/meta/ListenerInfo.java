/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ListenerInfo implements TBase, java.io.Serializable, Cloneable, Comparable<ListenerInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("ListenerInfo");
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
  private static final TField HOST_FIELD_DESC = new TField("host", TType.STRUCT, (short)2);
  private static final TField PART_ID_FIELD_DESC = new TField("part_id", TType.I32, (short)3);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)4);
  private static final TField SYNC_STATUS_FIELD_DESC = new TField("sync_status", TType.I32, (short)5);
  private static final TField SPACE_NAME_FIELD_DESC = new TField("space_name", TType.STRING, (short)6);

  /**
   * 
   * @see ListenerType
   */
  public ListenerType type;
  public com.vesoft.nebula.HostAddr host;
  public int part_id;
  /**
   * 
   * @see HostStatus
   */
  public HostStatus status;
  /**
   * 
   * @see com.vesoft.nebula.SyncStatus
   */
  public com.vesoft.nebula.SyncStatus sync_status;
  public byte[] space_name;
  public static final int TYPE = 1;
  public static final int HOST = 2;
  public static final int PART_ID = 3;
  public static final int STATUS = 4;
  public static final int SYNC_STATUS = 5;
  public static final int SPACE_NAME = 6;

  // isset id assignments
  private static final int __PART_ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(HOST, new FieldMetaData("host", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(PART_ID, new FieldMetaData("part_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SYNC_STATUS, new FieldMetaData("sync_status", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SPACE_NAME, new FieldMetaData("space_name", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ListenerInfo.class, metaDataMap);
  }

  public ListenerInfo() {
  }

  public ListenerInfo(
      ListenerType type,
      com.vesoft.nebula.HostAddr host,
      int part_id,
      HostStatus status) {
    this();
    this.type = type;
    this.host = host;
    this.part_id = part_id;
    setPart_idIsSet(true);
    this.status = status;
  }

  public ListenerInfo(
      ListenerType type,
      com.vesoft.nebula.HostAddr host,
      int part_id,
      HostStatus status,
      com.vesoft.nebula.SyncStatus sync_status,
      byte[] space_name) {
    this();
    this.type = type;
    this.host = host;
    this.part_id = part_id;
    setPart_idIsSet(true);
    this.status = status;
    this.sync_status = sync_status;
    this.space_name = space_name;
  }

  public static class Builder {
    private ListenerType type;
    private com.vesoft.nebula.HostAddr host;
    private int part_id;
    private HostStatus status;
    private com.vesoft.nebula.SyncStatus sync_status;
    private byte[] space_name;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setType(final ListenerType type) {
      this.type = type;
      return this;
    }

    public Builder setHost(final com.vesoft.nebula.HostAddr host) {
      this.host = host;
      return this;
    }

    public Builder setPart_id(final int part_id) {
      this.part_id = part_id;
      __optional_isset.set(__PART_ID_ISSET_ID, true);
      return this;
    }

    public Builder setStatus(final HostStatus status) {
      this.status = status;
      return this;
    }

    public Builder setSync_status(final com.vesoft.nebula.SyncStatus sync_status) {
      this.sync_status = sync_status;
      return this;
    }

    public Builder setSpace_name(final byte[] space_name) {
      this.space_name = space_name;
      return this;
    }

    public ListenerInfo build() {
      ListenerInfo result = new ListenerInfo();
      result.setType(this.type);
      result.setHost(this.host);
      if (__optional_isset.get(__PART_ID_ISSET_ID)) {
        result.setPart_id(this.part_id);
      }
      result.setStatus(this.status);
      result.setSync_status(this.sync_status);
      result.setSpace_name(this.space_name);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListenerInfo(ListenerInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType()) {
      this.type = TBaseHelper.deepCopy(other.type);
    }
    if (other.isSetHost()) {
      this.host = TBaseHelper.deepCopy(other.host);
    }
    this.part_id = TBaseHelper.deepCopy(other.part_id);
    if (other.isSetStatus()) {
      this.status = TBaseHelper.deepCopy(other.status);
    }
    if (other.isSetSync_status()) {
      this.sync_status = TBaseHelper.deepCopy(other.sync_status);
    }
    if (other.isSetSpace_name()) {
      this.space_name = TBaseHelper.deepCopy(other.space_name);
    }
  }

  public ListenerInfo deepCopy() {
    return new ListenerInfo(this);
  }

  /**
   * 
   * @see ListenerType
   */
  public ListenerType getType() {
    return this.type;
  }

  /**
   * 
   * @see ListenerType
   */
  public ListenerInfo setType(ListenerType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean __value) {
    if (!__value) {
      this.type = null;
    }
  }

  public com.vesoft.nebula.HostAddr getHost() {
    return this.host;
  }

  public ListenerInfo setHost(com.vesoft.nebula.HostAddr host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  // Returns true if field host is set (has been assigned a value) and false otherwise
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean __value) {
    if (!__value) {
      this.host = null;
    }
  }

  public int getPart_id() {
    return this.part_id;
  }

  public ListenerInfo setPart_id(int part_id) {
    this.part_id = part_id;
    setPart_idIsSet(true);
    return this;
  }

  public void unsetPart_id() {
    __isset_bit_vector.clear(__PART_ID_ISSET_ID);
  }

  // Returns true if field part_id is set (has been assigned a value) and false otherwise
  public boolean isSetPart_id() {
    return __isset_bit_vector.get(__PART_ID_ISSET_ID);
  }

  public void setPart_idIsSet(boolean __value) {
    __isset_bit_vector.set(__PART_ID_ISSET_ID, __value);
  }

  /**
   * 
   * @see HostStatus
   */
  public HostStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see HostStatus
   */
  public ListenerInfo setStatus(HostStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean __value) {
    if (!__value) {
      this.status = null;
    }
  }

  /**
   * 
   * @see com.vesoft.nebula.SyncStatus
   */
  public com.vesoft.nebula.SyncStatus getSync_status() {
    return this.sync_status;
  }

  /**
   * 
   * @see com.vesoft.nebula.SyncStatus
   */
  public ListenerInfo setSync_status(com.vesoft.nebula.SyncStatus sync_status) {
    this.sync_status = sync_status;
    return this;
  }

  public void unsetSync_status() {
    this.sync_status = null;
  }

  // Returns true if field sync_status is set (has been assigned a value) and false otherwise
  public boolean isSetSync_status() {
    return this.sync_status != null;
  }

  public void setSync_statusIsSet(boolean __value) {
    if (!__value) {
      this.sync_status = null;
    }
  }

  public byte[] getSpace_name() {
    return this.space_name;
  }

  public ListenerInfo setSpace_name(byte[] space_name) {
    this.space_name = space_name;
    return this;
  }

  public void unsetSpace_name() {
    this.space_name = null;
  }

  // Returns true if field space_name is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_name() {
    return this.space_name != null;
  }

  public void setSpace_nameIsSet(boolean __value) {
    if (!__value) {
      this.space_name = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case TYPE:
      if (__value == null) {
        unsetType();
      } else {
        setType((ListenerType)__value);
      }
      break;

    case HOST:
      if (__value == null) {
        unsetHost();
      } else {
        setHost((com.vesoft.nebula.HostAddr)__value);
      }
      break;

    case PART_ID:
      if (__value == null) {
        unsetPart_id();
      } else {
        setPart_id((Integer)__value);
      }
      break;

    case STATUS:
      if (__value == null) {
        unsetStatus();
      } else {
        setStatus((HostStatus)__value);
      }
      break;

    case SYNC_STATUS:
      if (__value == null) {
        unsetSync_status();
      } else {
        setSync_status((com.vesoft.nebula.SyncStatus)__value);
      }
      break;

    case SPACE_NAME:
      if (__value == null) {
        unsetSpace_name();
      } else {
        setSpace_name((byte[])__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TYPE:
      return getType();

    case HOST:
      return getHost();

    case PART_ID:
      return new Integer(getPart_id());

    case STATUS:
      return getStatus();

    case SYNC_STATUS:
      return getSync_status();

    case SPACE_NAME:
      return getSpace_name();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof ListenerInfo))
      return false;
    ListenerInfo that = (ListenerInfo)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetType(), that.isSetType(), this.type, that.type)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetHost(), that.isSetHost(), this.host, that.host)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.part_id, that.part_id)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStatus(), that.isSetStatus(), this.status, that.status)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSync_status(), that.isSetSync_status(), this.sync_status, that.sync_status)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetSpace_name(), that.isSetSpace_name(), this.space_name, that.space_name)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {type, host, part_id, status, sync_status, space_name});
  }

  @Override
  public int compareTo(ListenerInfo other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(type, other.type);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(host, other.host);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPart_id()).compareTo(other.isSetPart_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(part_id, other.part_id);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSync_status()).compareTo(other.isSetSync_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(sync_status, other.sync_status);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSpace_name()).compareTo(other.isSetSpace_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_name, other.space_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case TYPE:
          if (__field.type == TType.I32) {
            this.type = ListenerType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case HOST:
          if (__field.type == TType.STRUCT) {
            this.host = new com.vesoft.nebula.HostAddr();
            this.host.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PART_ID:
          if (__field.type == TType.I32) {
            this.part_id = iprot.readI32();
            setPart_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STATUS:
          if (__field.type == TType.I32) {
            this.status = HostStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SYNC_STATUS:
          if (__field.type == TType.I32) {
            this.sync_status = com.vesoft.nebula.SyncStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SPACE_NAME:
          if (__field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type == null ? 0 : this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      this.host.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PART_ID_FIELD_DESC);
    oprot.writeI32(this.part_id);
    oprot.writeFieldEnd();
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status == null ? 0 : this.status.getValue());
      oprot.writeFieldEnd();
    }
    if (this.sync_status != null) {
      if (isSetSync_status()) {
        oprot.writeFieldBegin(SYNC_STATUS_FIELD_DESC);
        oprot.writeI32(this.sync_status == null ? 0 : this.sync_status.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.space_name != null) {
      if (isSetSpace_name()) {
        oprot.writeFieldBegin(SPACE_NAME_FIELD_DESC);
        oprot.writeBinary(this.space_name);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ListenerInfo");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("type");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getType() == null) {
      sb.append("null");
    } else {
      String type_name = this.getType() == null ? "null" : this.getType().name();
      if (type_name != null) {
        sb.append(type_name);
        sb.append(" (");
      }
      sb.append(this.getType());
      if (type_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("host");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getHost() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getHost(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("part_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getPart_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStatus() == null) {
      sb.append("null");
    } else {
      String status_name = this.getStatus() == null ? "null" : this.getStatus().name();
      if (status_name != null) {
        sb.append(status_name);
        sb.append(" (");
      }
      sb.append(this.getStatus());
      if (status_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (isSetSync_status())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("sync_status");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSync_status() == null) {
        sb.append("null");
      } else {
        String sync_status_name = this.getSync_status() == null ? "null" : this.getSync_status().name();
        if (sync_status_name != null) {
          sb.append(sync_status_name);
          sb.append(" (");
        }
        sb.append(this.getSync_status());
        if (sync_status_name != null) {
          sb.append(")");
        }
      }
      first = false;
    }
    if (isSetSpace_name())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("space_name");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSpace_name() == null) {
        sb.append("null");
      } else {
          int __space_name_size = Math.min(this.getSpace_name().length, 128);
          for (int i = 0; i < __space_name_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getSpace_name()[i]).length() > 1 ? Integer.toHexString(this.getSpace_name()[i]).substring(Integer.toHexString(this.getSpace_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getSpace_name()[i]).toUpperCase());
          }
          if (this.getSpace_name().length > 128) sb.append(" ...");
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

