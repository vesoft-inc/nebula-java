/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ServiceInfo implements TBase, java.io.Serializable, Cloneable, Comparable<ServiceInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("ServiceInfo");
  private static final TField DIR_FIELD_DESC = new TField("dir", TType.STRUCT, (short)1);
  private static final TField ADDR_FIELD_DESC = new TField("addr", TType.STRUCT, (short)2);
  private static final TField ROLE_FIELD_DESC = new TField("role", TType.I32, (short)3);

  public com.vesoft.nebula.DirInfo dir;
  public com.vesoft.nebula.HostAddr addr;
  /**
   * 
   * @see HostRole
   */
  public HostRole role;
  public static final int DIR = 1;
  public static final int ADDR = 2;
  public static final int ROLE = 3;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(DIR, new FieldMetaData("dir", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.DirInfo.class)));
    tmpMetaDataMap.put(ADDR, new FieldMetaData("addr", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(ROLE, new FieldMetaData("role", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ServiceInfo.class, metaDataMap);
  }

  public ServiceInfo() {
  }

  public ServiceInfo(
      com.vesoft.nebula.DirInfo dir,
      com.vesoft.nebula.HostAddr addr,
      HostRole role) {
    this();
    this.dir = dir;
    this.addr = addr;
    this.role = role;
  }

  public static class Builder {
    private com.vesoft.nebula.DirInfo dir;
    private com.vesoft.nebula.HostAddr addr;
    private HostRole role;

    public Builder() {
    }

    public Builder setDir(final com.vesoft.nebula.DirInfo dir) {
      this.dir = dir;
      return this;
    }

    public Builder setAddr(final com.vesoft.nebula.HostAddr addr) {
      this.addr = addr;
      return this;
    }

    public Builder setRole(final HostRole role) {
      this.role = role;
      return this;
    }

    public ServiceInfo build() {
      ServiceInfo result = new ServiceInfo();
      result.setDir(this.dir);
      result.setAddr(this.addr);
      result.setRole(this.role);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceInfo(ServiceInfo other) {
    if (other.isSetDir()) {
      this.dir = TBaseHelper.deepCopy(other.dir);
    }
    if (other.isSetAddr()) {
      this.addr = TBaseHelper.deepCopy(other.addr);
    }
    if (other.isSetRole()) {
      this.role = TBaseHelper.deepCopy(other.role);
    }
  }

  public ServiceInfo deepCopy() {
    return new ServiceInfo(this);
  }

  public com.vesoft.nebula.DirInfo getDir() {
    return this.dir;
  }

  public ServiceInfo setDir(com.vesoft.nebula.DirInfo dir) {
    this.dir = dir;
    return this;
  }

  public void unsetDir() {
    this.dir = null;
  }

  // Returns true if field dir is set (has been assigned a value) and false otherwise
  public boolean isSetDir() {
    return this.dir != null;
  }

  public void setDirIsSet(boolean __value) {
    if (!__value) {
      this.dir = null;
    }
  }

  public com.vesoft.nebula.HostAddr getAddr() {
    return this.addr;
  }

  public ServiceInfo setAddr(com.vesoft.nebula.HostAddr addr) {
    this.addr = addr;
    return this;
  }

  public void unsetAddr() {
    this.addr = null;
  }

  // Returns true if field addr is set (has been assigned a value) and false otherwise
  public boolean isSetAddr() {
    return this.addr != null;
  }

  public void setAddrIsSet(boolean __value) {
    if (!__value) {
      this.addr = null;
    }
  }

  /**
   * 
   * @see HostRole
   */
  public HostRole getRole() {
    return this.role;
  }

  /**
   * 
   * @see HostRole
   */
  public ServiceInfo setRole(HostRole role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  // Returns true if field role is set (has been assigned a value) and false otherwise
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean __value) {
    if (!__value) {
      this.role = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case DIR:
      if (__value == null) {
        unsetDir();
      } else {
        setDir((com.vesoft.nebula.DirInfo)__value);
      }
      break;

    case ADDR:
      if (__value == null) {
        unsetAddr();
      } else {
        setAddr((com.vesoft.nebula.HostAddr)__value);
      }
      break;

    case ROLE:
      if (__value == null) {
        unsetRole();
      } else {
        setRole((HostRole)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case DIR:
      return getDir();

    case ADDR:
      return getAddr();

    case ROLE:
      return getRole();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof ServiceInfo))
      return false;
    ServiceInfo that = (ServiceInfo)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetDir(), that.isSetDir(), this.dir, that.dir)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAddr(), that.isSetAddr(), this.addr, that.addr)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetRole(), that.isSetRole(), this.role, that.role)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {dir, addr, role});
  }

  @Override
  public int compareTo(ServiceInfo other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDir()).compareTo(other.isSetDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(dir, other.dir);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAddr()).compareTo(other.isSetAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(addr, other.addr);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(role, other.role);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case DIR:
          if (__field.type == TType.STRUCT) {
            this.dir = new com.vesoft.nebula.DirInfo();
            this.dir.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADDR:
          if (__field.type == TType.STRUCT) {
            this.addr = new com.vesoft.nebula.HostAddr();
            this.addr.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ROLE:
          if (__field.type == TType.I32) {
            this.role = HostRole.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.dir != null) {
      oprot.writeFieldBegin(DIR_FIELD_DESC);
      this.dir.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.addr != null) {
      oprot.writeFieldBegin(ADDR_FIELD_DESC);
      this.addr.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.role != null) {
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(this.role == null ? 0 : this.role.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ServiceInfo");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("dir");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getDir() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getDir(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("addr");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAddr() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAddr(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("role");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getRole() == null) {
      sb.append("null");
    } else {
      String role_name = this.getRole() == null ? "null" : this.getRole().name();
      if (role_name != null) {
        sb.append(role_name);
        sb.append(" (");
      }
      sb.append(this.getRole());
      if (role_name != null) {
        sb.append(")");
      }
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

