/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class RegConfigReq implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RegConfigReq");
  private static final TField ITEMS_FIELD_DESC = new TField("items", TType.LIST, (short)1);

  public List<ConfigItem> items;
  public static final int ITEMS = 1;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ITEMS, new FieldMetaData("items", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, ConfigItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(RegConfigReq.class, metaDataMap);
  }

  public RegConfigReq() {
  }

  public RegConfigReq(
      List<ConfigItem> items) {
    this();
    this.items = items;
  }

  public static class Builder {
    private List<ConfigItem> items;

    public Builder() {
    }

    public Builder setItems(final List<ConfigItem> items) {
      this.items = items;
      return this;
    }

    public RegConfigReq build() {
      RegConfigReq result = new RegConfigReq();
      result.setItems(this.items);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegConfigReq(RegConfigReq other) {
    if (other.isSetItems()) {
      this.items = TBaseHelper.deepCopy(other.items);
    }
  }

  public RegConfigReq deepCopy() {
    return new RegConfigReq(this);
  }

  public List<ConfigItem> getItems() {
    return this.items;
  }

  public RegConfigReq setItems(List<ConfigItem> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  // Returns true if field items is set (has been assigned a value) and false otherwise
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean __value) {
    if (!__value) {
      this.items = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ITEMS:
      if (__value == null) {
        unsetItems();
      } else {
        setItems((List<ConfigItem>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ITEMS:
      return getItems();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof RegConfigReq))
      return false;
    RegConfigReq that = (RegConfigReq)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetItems(), that.isSetItems(), this.items, that.items)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {items});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ITEMS:
          if (__field.type == TType.LIST) {
            {
              TList _list182 = iprot.readListBegin();
              this.items = new ArrayList<ConfigItem>(Math.max(0, _list182.size));
              for (int _i183 = 0; 
                   (_list182.size < 0) ? iprot.peekList() : (_i183 < _list182.size); 
                   ++_i183)
              {
                ConfigItem _elem184;
                _elem184 = new ConfigItem();
                _elem184.read(iprot);
                this.items.add(_elem184);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.items != null) {
      oprot.writeFieldBegin(ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.items.size()));
        for (ConfigItem _iter185 : this.items)        {
          _iter185.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("RegConfigReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("items");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getItems() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getItems(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

