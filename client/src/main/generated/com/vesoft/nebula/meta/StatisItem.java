/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class StatisItem implements TBase, java.io.Serializable, Cloneable, Comparable<StatisItem> {
  private static final TStruct STRUCT_DESC = new TStruct("StatisItem");
  private static final TField TAG_VERTICES_FIELD_DESC = new TField("tag_vertices", TType.MAP, (short)1);
  private static final TField EDGES_FIELD_DESC = new TField("edges", TType.MAP, (short)2);
  private static final TField SPACE_VERTICES_FIELD_DESC = new TField("space_vertices", TType.I64, (short)3);
  private static final TField SPACE_EDGES_FIELD_DESC = new TField("space_edges", TType.I64, (short)4);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)5);

  public Map<byte[],Long> tag_vertices;
  public Map<byte[],Long> edges;
  public long space_vertices;
  public long space_edges;
  /**
   * 
   * @see JobStatus
   */
  public int status;
  public static final int TAG_VERTICES = 1;
  public static final int EDGES = 2;
  public static final int SPACE_VERTICES = 3;
  public static final int SPACE_EDGES = 4;
  public static final int STATUS = 5;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SPACE_VERTICES_ISSET_ID = 0;
  private static final int __SPACE_EDGES_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TAG_VERTICES, new FieldMetaData("tag_vertices", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(EDGES, new FieldMetaData("edges", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(SPACE_VERTICES, new FieldMetaData("space_vertices", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(SPACE_EDGES, new FieldMetaData("space_edges", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(StatisItem.class, metaDataMap);
  }

  public StatisItem() {
  }

  public StatisItem(
    Map<byte[],Long> tag_vertices,
    Map<byte[],Long> edges,
    long space_vertices,
    long space_edges,
    int status)
  {
    this();
    this.tag_vertices = tag_vertices;
    this.edges = edges;
    this.space_vertices = space_vertices;
    setSpace_verticesIsSet(true);
    this.space_edges = space_edges;
    setSpace_edgesIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatisItem(StatisItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTag_vertices()) {
      this.tag_vertices = TBaseHelper.deepCopy(other.tag_vertices);
    }
    if (other.isSetEdges()) {
      this.edges = TBaseHelper.deepCopy(other.edges);
    }
    this.space_vertices = TBaseHelper.deepCopy(other.space_vertices);
    this.space_edges = TBaseHelper.deepCopy(other.space_edges);
    this.status = TBaseHelper.deepCopy(other.status);
  }

  public StatisItem deepCopy() {
    return new StatisItem(this);
  }

  @Deprecated
  public StatisItem clone() {
    return new StatisItem(this);
  }

  public Map<byte[],Long>  getTag_vertices() {
    return this.tag_vertices;
  }

  public StatisItem setTag_vertices(Map<byte[],Long> tag_vertices) {
    this.tag_vertices = tag_vertices;
    return this;
  }

  public void unsetTag_vertices() {
    this.tag_vertices = null;
  }

  // Returns true if field tag_vertices is set (has been assigned a value) and false otherwise
  public boolean isSetTag_vertices() {
    return this.tag_vertices != null;
  }

  public void setTag_verticesIsSet(boolean value) {
    if (!value) {
      this.tag_vertices = null;
    }
  }

  public Map<byte[],Long>  getEdges() {
    return this.edges;
  }

  public StatisItem setEdges(Map<byte[],Long> edges) {
    this.edges = edges;
    return this;
  }

  public void unsetEdges() {
    this.edges = null;
  }

  // Returns true if field edges is set (has been assigned a value) and false otherwise
  public boolean isSetEdges() {
    return this.edges != null;
  }

  public void setEdgesIsSet(boolean value) {
    if (!value) {
      this.edges = null;
    }
  }

  public long  getSpace_vertices() {
    return this.space_vertices;
  }

  public StatisItem setSpace_vertices(long space_vertices) {
    this.space_vertices = space_vertices;
    setSpace_verticesIsSet(true);
    return this;
  }

  public void unsetSpace_vertices() {
    __isset_bit_vector.clear(__SPACE_VERTICES_ISSET_ID);
  }

  // Returns true if field space_vertices is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_vertices() {
    return __isset_bit_vector.get(__SPACE_VERTICES_ISSET_ID);
  }

  public void setSpace_verticesIsSet(boolean value) {
    __isset_bit_vector.set(__SPACE_VERTICES_ISSET_ID, value);
  }

  public long  getSpace_edges() {
    return this.space_edges;
  }

  public StatisItem setSpace_edges(long space_edges) {
    this.space_edges = space_edges;
    setSpace_edgesIsSet(true);
    return this;
  }

  public void unsetSpace_edges() {
    __isset_bit_vector.clear(__SPACE_EDGES_ISSET_ID);
  }

  // Returns true if field space_edges is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_edges() {
    return __isset_bit_vector.get(__SPACE_EDGES_ISSET_ID);
  }

  public void setSpace_edgesIsSet(boolean value) {
    __isset_bit_vector.set(__SPACE_EDGES_ISSET_ID, value);
  }

  /**
   * 
   * @see JobStatus
   */
  public int  getStatus() {
    return this.status;
  }

  /**
   * 
   * @see JobStatus
   */
  public StatisItem setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TAG_VERTICES:
      if (value == null) {
        unsetTag_vertices();
      } else {
        setTag_vertices((Map<byte[],Long>)value);
      }
      break;

    case EDGES:
      if (value == null) {
        unsetEdges();
      } else {
        setEdges((Map<byte[],Long>)value);
      }
      break;

    case SPACE_VERTICES:
      if (value == null) {
        unsetSpace_vertices();
      } else {
        setSpace_vertices((Long)value);
      }
      break;

    case SPACE_EDGES:
      if (value == null) {
        unsetSpace_edges();
      } else {
        setSpace_edges((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TAG_VERTICES:
      return getTag_vertices();

    case EDGES:
      return getEdges();

    case SPACE_VERTICES:
      return new Long(getSpace_vertices());

    case SPACE_EDGES:
      return new Long(getSpace_edges());

    case STATUS:
      return getStatus();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TAG_VERTICES:
      return isSetTag_vertices();
    case EDGES:
      return isSetEdges();
    case SPACE_VERTICES:
      return isSetSpace_vertices();
    case SPACE_EDGES:
      return isSetSpace_edges();
    case STATUS:
      return isSetStatus();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatisItem)
      return this.equals((StatisItem)that);
    return false;
  }

  public boolean equals(StatisItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tag_vertices = true && this.isSetTag_vertices();
    boolean that_present_tag_vertices = true && that.isSetTag_vertices();
    if (this_present_tag_vertices || that_present_tag_vertices) {
      if (!(this_present_tag_vertices && that_present_tag_vertices))
        return false;
      if (!TBaseHelper.equalsSlow(this.tag_vertices, that.tag_vertices))
        return false;
    }

    boolean this_present_edges = true && this.isSetEdges();
    boolean that_present_edges = true && that.isSetEdges();
    if (this_present_edges || that_present_edges) {
      if (!(this_present_edges && that_present_edges))
        return false;
      if (!TBaseHelper.equalsSlow(this.edges, that.edges))
        return false;
    }

    boolean this_present_space_vertices = true;
    boolean that_present_space_vertices = true;
    if (this_present_space_vertices || that_present_space_vertices) {
      if (!(this_present_space_vertices && that_present_space_vertices))
        return false;
      if (!TBaseHelper.equalsNobinary(this.space_vertices, that.space_vertices))
        return false;
    }

    boolean this_present_space_edges = true;
    boolean that_present_space_edges = true;
    if (this_present_space_edges || that_present_space_edges) {
      if (!(this_present_space_edges && that_present_space_edges))
        return false;
      if (!TBaseHelper.equalsNobinary(this.space_edges, that.space_edges))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!TBaseHelper.equalsNobinary(this.status, that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_tag_vertices = true && (isSetTag_vertices());
    builder.append(present_tag_vertices);
    if (present_tag_vertices)
      builder.append(tag_vertices);

    boolean present_edges = true && (isSetEdges());
    builder.append(present_edges);
    if (present_edges)
      builder.append(edges);

    boolean present_space_vertices = true;
    builder.append(present_space_vertices);
    if (present_space_vertices)
      builder.append(space_vertices);

    boolean present_space_edges = true;
    builder.append(present_space_edges);
    if (present_space_edges)
      builder.append(space_edges);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(StatisItem other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTag_vertices()).compareTo(other.isSetTag_vertices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(tag_vertices, other.tag_vertices);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEdges()).compareTo(other.isSetEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edges, other.edges);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSpace_vertices()).compareTo(other.isSetSpace_vertices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_vertices, other.space_vertices);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSpace_edges()).compareTo(other.isSetSpace_edges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_edges, other.space_edges);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TAG_VERTICES:
          if (field.type == TType.MAP) {
            {
              TMap _map42 = iprot.readMapBegin();
              this.tag_vertices = new HashMap<byte[],Long>(Math.max(0, 2*_map42.size));
              for (int _i43 = 0; 
                   (_map42.size < 0) ? iprot.peekMap() : (_i43 < _map42.size); 
                   ++_i43)
              {
                byte[] _key44;
                long _val45;
                _key44 = iprot.readBinary();
                _val45 = iprot.readI64();
                this.tag_vertices.put(_key44, _val45);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGES:
          if (field.type == TType.MAP) {
            {
              TMap _map46 = iprot.readMapBegin();
              this.edges = new HashMap<byte[],Long>(Math.max(0, 2*_map46.size));
              for (int _i47 = 0; 
                   (_map46.size < 0) ? iprot.peekMap() : (_i47 < _map46.size); 
                   ++_i47)
              {
                byte[] _key48;
                long _val49;
                _key48 = iprot.readBinary();
                _val49 = iprot.readI64();
                this.edges.put(_key48, _val49);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACE_VERTICES:
          if (field.type == TType.I64) {
            this.space_vertices = iprot.readI64();
            setSpace_verticesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACE_EDGES:
          if (field.type == TType.I64) {
            this.space_edges = iprot.readI64();
            setSpace_edgesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tag_vertices != null) {
      oprot.writeFieldBegin(TAG_VERTICES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.tag_vertices.size()));
        for (Map.Entry<byte[], Long> _iter50 : this.tag_vertices.entrySet())        {
          oprot.writeBinary(_iter50.getKey());
          oprot.writeI64(_iter50.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.edges != null) {
      oprot.writeFieldBegin(EDGES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.edges.size()));
        for (Map.Entry<byte[], Long> _iter51 : this.edges.entrySet())        {
          oprot.writeBinary(_iter51.getKey());
          oprot.writeI64(_iter51.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SPACE_VERTICES_FIELD_DESC);
    oprot.writeI64(this.space_vertices);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPACE_EDGES_FIELD_DESC);
    oprot.writeI64(this.space_edges);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("StatisItem");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("tag_vertices");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTag_vertices() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTag_vertices(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("edges");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEdges() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEdges(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space_vertices");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSpace_vertices(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space_edges");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSpace_edges(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    String status_name = JobStatus.VALUES_TO_NAMES.get(this. getStatus());
    if (status_name != null) {
      sb.append(status_name);
      sb.append(" (");
    }
    sb.append(this. getStatus());
    if (status_name != null) {
      sb.append(")");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !JobStatus.VALID_VALUES.contains(status)){
      throw new TProtocolException("The field 'status' has been assigned the invalid value " + status);
    }
  }

}

