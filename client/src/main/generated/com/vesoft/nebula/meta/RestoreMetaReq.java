/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class RestoreMetaReq implements TBase, java.io.Serializable, Cloneable, Comparable<RestoreMetaReq> {
  private static final TStruct STRUCT_DESC = new TStruct("RestoreMetaReq");
  private static final TField FILES_FIELD_DESC = new TField("files", TType.LIST, (short)1);
  private static final TField HOSTS_FIELD_DESC = new TField("hosts", TType.LIST, (short)2);

  public List<byte[]> files;
  public List<HostPair> hosts;
  public static final int FILES = 1;
  public static final int HOSTS = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(FILES, new FieldMetaData("files", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(HOSTS, new FieldMetaData("hosts", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, HostPair.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(RestoreMetaReq.class, metaDataMap);
  }

  public RestoreMetaReq() {
  }

  public RestoreMetaReq(
      List<byte[]> files,
      List<HostPair> hosts) {
    this();
    this.files = files;
    this.hosts = hosts;
  }

  public static class Builder {
    private List<byte[]> files;
    private List<HostPair> hosts;

    public Builder() {
    }

    public Builder setFiles(final List<byte[]> files) {
      this.files = files;
      return this;
    }

    public Builder setHosts(final List<HostPair> hosts) {
      this.hosts = hosts;
      return this;
    }

    public RestoreMetaReq build() {
      RestoreMetaReq result = new RestoreMetaReq();
      result.setFiles(this.files);
      result.setHosts(this.hosts);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RestoreMetaReq(RestoreMetaReq other) {
    if (other.isSetFiles()) {
      this.files = TBaseHelper.deepCopy(other.files);
    }
    if (other.isSetHosts()) {
      this.hosts = TBaseHelper.deepCopy(other.hosts);
    }
  }

  public RestoreMetaReq deepCopy() {
    return new RestoreMetaReq(this);
  }

  public List<byte[]> getFiles() {
    return this.files;
  }

  public RestoreMetaReq setFiles(List<byte[]> files) {
    this.files = files;
    return this;
  }

  public void unsetFiles() {
    this.files = null;
  }

  // Returns true if field files is set (has been assigned a value) and false otherwise
  public boolean isSetFiles() {
    return this.files != null;
  }

  public void setFilesIsSet(boolean __value) {
    if (!__value) {
      this.files = null;
    }
  }

  public List<HostPair> getHosts() {
    return this.hosts;
  }

  public RestoreMetaReq setHosts(List<HostPair> hosts) {
    this.hosts = hosts;
    return this;
  }

  public void unsetHosts() {
    this.hosts = null;
  }

  // Returns true if field hosts is set (has been assigned a value) and false otherwise
  public boolean isSetHosts() {
    return this.hosts != null;
  }

  public void setHostsIsSet(boolean __value) {
    if (!__value) {
      this.hosts = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case FILES:
      if (__value == null) {
        unsetFiles();
      } else {
        setFiles((List<byte[]>)__value);
      }
      break;

    case HOSTS:
      if (__value == null) {
        unsetHosts();
      } else {
        setHosts((List<HostPair>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case FILES:
      return getFiles();

    case HOSTS:
      return getHosts();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof RestoreMetaReq))
      return false;
    RestoreMetaReq that = (RestoreMetaReq)_that;

    if (!TBaseHelper.equalsSlow(this.isSetFiles(), that.isSetFiles(), this.files, that.files)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetHosts(), that.isSetHosts(), this.hosts, that.hosts)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {files, hosts});
  }

  @Override
  public int compareTo(RestoreMetaReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(files, other.files);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHosts()).compareTo(other.isSetHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(hosts, other.hosts);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case FILES:
          if (__field.type == TType.LIST) {
            {
              TList _list263 = iprot.readListBegin();
              this.files = new ArrayList<byte[]>(Math.max(0, _list263.size));
              for (int _i264 = 0; 
                   (_list263.size < 0) ? iprot.peekList() : (_i264 < _list263.size); 
                   ++_i264)
              {
                byte[] _elem265;
                _elem265 = iprot.readBinary();
                this.files.add(_elem265);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case HOSTS:
          if (__field.type == TType.LIST) {
            {
              TList _list266 = iprot.readListBegin();
              this.hosts = new ArrayList<HostPair>(Math.max(0, _list266.size));
              for (int _i267 = 0; 
                   (_list266.size < 0) ? iprot.peekList() : (_i267 < _list266.size); 
                   ++_i267)
              {
                HostPair _elem268;
                _elem268 = new HostPair();
                _elem268.read(iprot);
                this.hosts.add(_elem268);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.files != null) {
      oprot.writeFieldBegin(FILES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.files.size()));
        for (byte[] _iter269 : this.files)        {
          oprot.writeBinary(_iter269);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.hosts != null) {
      oprot.writeFieldBegin(HOSTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.hosts.size()));
        for (HostPair _iter270 : this.hosts)        {
          _iter270.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("RestoreMetaReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("files");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getFiles() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getFiles(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("hosts");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getHosts() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getHosts(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

