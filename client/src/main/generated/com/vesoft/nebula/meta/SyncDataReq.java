/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SyncDataReq implements TBase, java.io.Serializable, Cloneable, Comparable<SyncDataReq> {
  private static final TStruct STRUCT_DESC = new TStruct("SyncDataReq");
  private static final TField CLUSTER_FIELD_DESC = new TField("cluster", TType.I64, (short)1);
  private static final TField SPACE_ID_FIELD_DESC = new TField("space_id", TType.I32, (short)2);
  private static final TField LOGS_FIELD_DESC = new TField("logs", TType.LIST, (short)3);

  public long cluster;
  public int space_id;
  public List<byte[]> logs;
  public static final int CLUSTER = 1;
  public static final int SPACE_ID = 2;
  public static final int LOGS = 3;

  // isset id assignments
  private static final int __CLUSTER_ISSET_ID = 0;
  private static final int __SPACE_ID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CLUSTER, new FieldMetaData("cluster", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(SPACE_ID, new FieldMetaData("space_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(LOGS, new FieldMetaData("logs", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SyncDataReq.class, metaDataMap);
  }

  public SyncDataReq() {
  }

  public SyncDataReq(
      long cluster,
      int space_id,
      List<byte[]> logs) {
    this();
    this.cluster = cluster;
    setClusterIsSet(true);
    this.space_id = space_id;
    setSpace_idIsSet(true);
    this.logs = logs;
  }

  public static class Builder {
    private long cluster;
    private int space_id;
    private List<byte[]> logs;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setCluster(final long cluster) {
      this.cluster = cluster;
      __optional_isset.set(__CLUSTER_ISSET_ID, true);
      return this;
    }

    public Builder setSpace_id(final int space_id) {
      this.space_id = space_id;
      __optional_isset.set(__SPACE_ID_ISSET_ID, true);
      return this;
    }

    public Builder setLogs(final List<byte[]> logs) {
      this.logs = logs;
      return this;
    }

    public SyncDataReq build() {
      SyncDataReq result = new SyncDataReq();
      if (__optional_isset.get(__CLUSTER_ISSET_ID)) {
        result.setCluster(this.cluster);
      }
      if (__optional_isset.get(__SPACE_ID_ISSET_ID)) {
        result.setSpace_id(this.space_id);
      }
      result.setLogs(this.logs);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncDataReq(SyncDataReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.cluster = TBaseHelper.deepCopy(other.cluster);
    this.space_id = TBaseHelper.deepCopy(other.space_id);
    if (other.isSetLogs()) {
      this.logs = TBaseHelper.deepCopy(other.logs);
    }
  }

  public SyncDataReq deepCopy() {
    return new SyncDataReq(this);
  }

  public long getCluster() {
    return this.cluster;
  }

  public SyncDataReq setCluster(long cluster) {
    this.cluster = cluster;
    setClusterIsSet(true);
    return this;
  }

  public void unsetCluster() {
    __isset_bit_vector.clear(__CLUSTER_ISSET_ID);
  }

  // Returns true if field cluster is set (has been assigned a value) and false otherwise
  public boolean isSetCluster() {
    return __isset_bit_vector.get(__CLUSTER_ISSET_ID);
  }

  public void setClusterIsSet(boolean __value) {
    __isset_bit_vector.set(__CLUSTER_ISSET_ID, __value);
  }

  public int getSpace_id() {
    return this.space_id;
  }

  public SyncDataReq setSpace_id(int space_id) {
    this.space_id = space_id;
    setSpace_idIsSet(true);
    return this;
  }

  public void unsetSpace_id() {
    __isset_bit_vector.clear(__SPACE_ID_ISSET_ID);
  }

  // Returns true if field space_id is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_id() {
    return __isset_bit_vector.get(__SPACE_ID_ISSET_ID);
  }

  public void setSpace_idIsSet(boolean __value) {
    __isset_bit_vector.set(__SPACE_ID_ISSET_ID, __value);
  }

  public List<byte[]> getLogs() {
    return this.logs;
  }

  public SyncDataReq setLogs(List<byte[]> logs) {
    this.logs = logs;
    return this;
  }

  public void unsetLogs() {
    this.logs = null;
  }

  // Returns true if field logs is set (has been assigned a value) and false otherwise
  public boolean isSetLogs() {
    return this.logs != null;
  }

  public void setLogsIsSet(boolean __value) {
    if (!__value) {
      this.logs = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case CLUSTER:
      if (__value == null) {
        unsetCluster();
      } else {
        setCluster((Long)__value);
      }
      break;

    case SPACE_ID:
      if (__value == null) {
        unsetSpace_id();
      } else {
        setSpace_id((Integer)__value);
      }
      break;

    case LOGS:
      if (__value == null) {
        unsetLogs();
      } else {
        setLogs((List<byte[]>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CLUSTER:
      return new Long(getCluster());

    case SPACE_ID:
      return new Integer(getSpace_id());

    case LOGS:
      return getLogs();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof SyncDataReq))
      return false;
    SyncDataReq that = (SyncDataReq)_that;

    if (!TBaseHelper.equalsNobinary(this.cluster, that.cluster)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.space_id, that.space_id)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetLogs(), that.isSetLogs(), this.logs, that.logs)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {cluster, space_id, logs});
  }

  @Override
  public int compareTo(SyncDataReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cluster, other.cluster);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSpace_id()).compareTo(other.isSetSpace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_id, other.space_id);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLogs()).compareTo(other.isSetLogs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(logs, other.logs);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case CLUSTER:
          if (__field.type == TType.I64) {
            this.cluster = iprot.readI64();
            setClusterIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SPACE_ID:
          if (__field.type == TType.I32) {
            this.space_id = iprot.readI32();
            setSpace_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LOGS:
          if (__field.type == TType.LIST) {
            {
              TList _list437 = iprot.readListBegin();
              this.logs = new ArrayList<byte[]>(Math.max(0, _list437.size));
              for (int _i438 = 0; 
                   (_list437.size < 0) ? iprot.peekList() : (_i438 < _list437.size); 
                   ++_i438)
              {
                byte[] _elem439;
                _elem439 = iprot.readBinary();
                this.logs.add(_elem439);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
    oprot.writeI64(this.cluster);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.logs != null) {
      oprot.writeFieldBegin(LOGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.logs.size()));
        for (byte[] _iter440 : this.logs)        {
          oprot.writeBinary(_iter440);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SyncDataReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("cluster");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getCluster(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSpace_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("logs");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getLogs() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getLogs(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

