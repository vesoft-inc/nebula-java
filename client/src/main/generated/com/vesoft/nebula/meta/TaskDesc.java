/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class TaskDesc implements TBase, java.io.Serializable, Cloneable, Comparable<TaskDesc> {
  private static final TStruct STRUCT_DESC = new TStruct("TaskDesc");
  private static final TField TASK_ID_FIELD_DESC = new TField("task_id", TType.I32, (short)1);
  private static final TField HOST_FIELD_DESC = new TField("host", TType.STRUCT, (short)2);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)3);
  private static final TField START_TIME_FIELD_DESC = new TField("start_time", TType.I64, (short)4);
  private static final TField STOP_TIME_FIELD_DESC = new TField("stop_time", TType.I64, (short)5);
  private static final TField JOB_ID_FIELD_DESC = new TField("job_id", TType.I32, (short)6);

  public int task_id;
  public com.vesoft.nebula.HostAddr host;
  /**
   * 
   * @see JobStatus
   */
  public int status;
  public long start_time;
  public long stop_time;
  public int job_id;
  public static final int TASK_ID = 1;
  public static final int HOST = 2;
  public static final int STATUS = 3;
  public static final int START_TIME = 4;
  public static final int STOP_TIME = 5;
  public static final int JOB_ID = 6;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __TASK_ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __START_TIME_ISSET_ID = 2;
  private static final int __STOP_TIME_ISSET_ID = 3;
  private static final int __JOB_ID_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TASK_ID, new FieldMetaData("task_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(HOST, new FieldMetaData("host", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(START_TIME, new FieldMetaData("start_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(STOP_TIME, new FieldMetaData("stop_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(JOB_ID, new FieldMetaData("job_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(TaskDesc.class, metaDataMap);
  }

  public TaskDesc() {
  }

  public TaskDesc(
    int task_id,
    com.vesoft.nebula.HostAddr host,
    int status,
    long start_time,
    long stop_time,
    int job_id)
  {
    this();
    this.task_id = task_id;
    setTask_idIsSet(true);
    this.host = host;
    this.status = status;
    setStatusIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.stop_time = stop_time;
    setStop_timeIsSet(true);
    this.job_id = job_id;
    setJob_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskDesc(TaskDesc other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.task_id = TBaseHelper.deepCopy(other.task_id);
    if (other.isSetHost()) {
      this.host = TBaseHelper.deepCopy(other.host);
    }
    this.status = TBaseHelper.deepCopy(other.status);
    this.start_time = TBaseHelper.deepCopy(other.start_time);
    this.stop_time = TBaseHelper.deepCopy(other.stop_time);
    this.job_id = TBaseHelper.deepCopy(other.job_id);
  }

  public TaskDesc deepCopy() {
    return new TaskDesc(this);
  }

  @Deprecated
  public TaskDesc clone() {
    return new TaskDesc(this);
  }

  public int  getTask_id() {
    return this.task_id;
  }

  public TaskDesc setTask_id(int task_id) {
    this.task_id = task_id;
    setTask_idIsSet(true);
    return this;
  }

  public void unsetTask_id() {
    __isset_bit_vector.clear(__TASK_ID_ISSET_ID);
  }

  // Returns true if field task_id is set (has been assigned a value) and false otherwise
  public boolean isSetTask_id() {
    return __isset_bit_vector.get(__TASK_ID_ISSET_ID);
  }

  public void setTask_idIsSet(boolean value) {
    __isset_bit_vector.set(__TASK_ID_ISSET_ID, value);
  }

  public com.vesoft.nebula.HostAddr  getHost() {
    return this.host;
  }

  public TaskDesc setHost(com.vesoft.nebula.HostAddr host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  // Returns true if field host is set (has been assigned a value) and false otherwise
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  /**
   * 
   * @see JobStatus
   */
  public int  getStatus() {
    return this.status;
  }

  /**
   * 
   * @see JobStatus
   */
  public TaskDesc setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public long  getStart_time() {
    return this.start_time;
  }

  public TaskDesc setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bit_vector.clear(__START_TIME_ISSET_ID);
  }

  // Returns true if field start_time is set (has been assigned a value) and false otherwise
  public boolean isSetStart_time() {
    return __isset_bit_vector.get(__START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bit_vector.set(__START_TIME_ISSET_ID, value);
  }

  public long  getStop_time() {
    return this.stop_time;
  }

  public TaskDesc setStop_time(long stop_time) {
    this.stop_time = stop_time;
    setStop_timeIsSet(true);
    return this;
  }

  public void unsetStop_time() {
    __isset_bit_vector.clear(__STOP_TIME_ISSET_ID);
  }

  // Returns true if field stop_time is set (has been assigned a value) and false otherwise
  public boolean isSetStop_time() {
    return __isset_bit_vector.get(__STOP_TIME_ISSET_ID);
  }

  public void setStop_timeIsSet(boolean value) {
    __isset_bit_vector.set(__STOP_TIME_ISSET_ID, value);
  }

  public int  getJob_id() {
    return this.job_id;
  }

  public TaskDesc setJob_id(int job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bit_vector.clear(__JOB_ID_ISSET_ID);
  }

  // Returns true if field job_id is set (has been assigned a value) and false otherwise
  public boolean isSetJob_id() {
    return __isset_bit_vector.get(__JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bit_vector.set(__JOB_ID_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((Integer)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((com.vesoft.nebula.HostAddr)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((Long)value);
      }
      break;

    case STOP_TIME:
      if (value == null) {
        unsetStop_time();
      } else {
        setStop_time((Long)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TASK_ID:
      return new Integer(getTask_id());

    case HOST:
      return getHost();

    case STATUS:
      return getStatus();

    case START_TIME:
      return new Long(getStart_time());

    case STOP_TIME:
      return new Long(getStop_time());

    case JOB_ID:
      return new Integer(getJob_id());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TASK_ID:
      return isSetTask_id();
    case HOST:
      return isSetHost();
    case STATUS:
      return isSetStatus();
    case START_TIME:
      return isSetStart_time();
    case STOP_TIME:
      return isSetStop_time();
    case JOB_ID:
      return isSetJob_id();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskDesc)
      return this.equals((TaskDesc)that);
    return false;
  }

  public boolean equals(TaskDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_task_id = true;
    boolean that_present_task_id = true;
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.task_id, that.task_id))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!TBaseHelper.equalsNobinary(this.host, that.host))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!TBaseHelper.equalsNobinary(this.status, that.status))
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.start_time, that.start_time))
        return false;
    }

    boolean this_present_stop_time = true;
    boolean that_present_stop_time = true;
    if (this_present_stop_time || that_present_stop_time) {
      if (!(this_present_stop_time && that_present_stop_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stop_time, that.stop_time))
        return false;
    }

    boolean this_present_job_id = true;
    boolean that_present_job_id = true;
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.job_id, that.job_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_task_id = true;
    builder.append(present_task_id);
    if (present_task_id)
      builder.append(task_id);

    boolean present_host = true && (isSetHost());
    builder.append(present_host);
    if (present_host)
      builder.append(host);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_start_time = true;
    builder.append(present_start_time);
    if (present_start_time)
      builder.append(start_time);

    boolean present_stop_time = true;
    builder.append(present_stop_time);
    if (present_stop_time)
      builder.append(stop_time);

    boolean present_job_id = true;
    builder.append(present_job_id);
    if (present_job_id)
      builder.append(job_id);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TaskDesc other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(task_id, other.task_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(host, other.host);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(start_time, other.start_time);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStop_time()).compareTo(other.isSetStop_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stop_time, other.stop_time);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetJob_id()).compareTo(other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(job_id, other.job_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TASK_ID:
          if (field.type == TType.I32) {
            this.task_id = iprot.readI32();
            setTask_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOST:
          if (field.type == TType.STRUCT) {
            this.host = new com.vesoft.nebula.HostAddr();
            this.host.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_TIME:
          if (field.type == TType.I64) {
            this.start_time = iprot.readI64();
            setStart_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STOP_TIME:
          if (field.type == TType.I64) {
            this.stop_time = iprot.readI64();
            setStop_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case JOB_ID:
          if (field.type == TType.I32) {
            this.job_id = iprot.readI32();
            setJob_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
    oprot.writeI32(this.task_id);
    oprot.writeFieldEnd();
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      this.host.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(START_TIME_FIELD_DESC);
    oprot.writeI64(this.start_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
    oprot.writeI64(this.stop_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
    oprot.writeI32(this.job_id);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("TaskDesc");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("task_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getTask_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("host");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getHost() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getHost(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    String status_name = JobStatus.VALUES_TO_NAMES.get(this. getStatus());
    if (status_name != null) {
      sb.append(status_name);
      sb.append(" (");
    }
    sb.append(this. getStatus());
    if (status_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("start_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getStart_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("stop_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getStop_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("job_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getJob_id(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !JobStatus.VALID_VALUES.contains(status)){
      throw new TProtocolException("The field 'status' has been assigned the invalid value " + status);
    }
  }

}

