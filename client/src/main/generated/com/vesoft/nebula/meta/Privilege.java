/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Privilege implements TBase, java.io.Serializable, Cloneable, Comparable<Privilege> {
  private static final TStruct STRUCT_DESC = new TStruct("Privilege");
  private static final TField SPACE_FIELD_DESC = new TField("space", TType.I32, (short)1);
  private static final TField READ_FIELD_DESC = new TField("read", TType.STRUCT, (short)2);
  private static final TField WRITE_FIELD_DESC = new TField("write", TType.STRUCT, (short)3);

  public int space;
  public PrivilegeSchema read;
  public PrivilegeSchema write;
  public static final int SPACE = 1;
  public static final int READ = 2;
  public static final int WRITE = 3;

  // isset id assignments
  private static final int __SPACE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE, new FieldMetaData("space", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(READ, new FieldMetaData("read", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, PrivilegeSchema.class)));
    tmpMetaDataMap.put(WRITE, new FieldMetaData("write", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, PrivilegeSchema.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Privilege.class, metaDataMap);
  }

  public Privilege() {
  }

  public Privilege(
      int space) {
    this();
    this.space = space;
    setSpaceIsSet(true);
  }

  public Privilege(
      int space,
      PrivilegeSchema read,
      PrivilegeSchema write) {
    this();
    this.space = space;
    setSpaceIsSet(true);
    this.read = read;
    this.write = write;
  }

  public static class Builder {
    private int space;
    private PrivilegeSchema read;
    private PrivilegeSchema write;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setSpace(final int space) {
      this.space = space;
      __optional_isset.set(__SPACE_ISSET_ID, true);
      return this;
    }

    public Builder setRead(final PrivilegeSchema read) {
      this.read = read;
      return this;
    }

    public Builder setWrite(final PrivilegeSchema write) {
      this.write = write;
      return this;
    }

    public Privilege build() {
      Privilege result = new Privilege();
      if (__optional_isset.get(__SPACE_ISSET_ID)) {
        result.setSpace(this.space);
      }
      result.setRead(this.read);
      result.setWrite(this.write);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Privilege(Privilege other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.space = TBaseHelper.deepCopy(other.space);
    if (other.isSetRead()) {
      this.read = TBaseHelper.deepCopy(other.read);
    }
    if (other.isSetWrite()) {
      this.write = TBaseHelper.deepCopy(other.write);
    }
  }

  public Privilege deepCopy() {
    return new Privilege(this);
  }

  public int getSpace() {
    return this.space;
  }

  public Privilege setSpace(int space) {
    this.space = space;
    setSpaceIsSet(true);
    return this;
  }

  public void unsetSpace() {
    __isset_bit_vector.clear(__SPACE_ISSET_ID);
  }

  // Returns true if field space is set (has been assigned a value) and false otherwise
  public boolean isSetSpace() {
    return __isset_bit_vector.get(__SPACE_ISSET_ID);
  }

  public void setSpaceIsSet(boolean __value) {
    __isset_bit_vector.set(__SPACE_ISSET_ID, __value);
  }

  public PrivilegeSchema getRead() {
    return this.read;
  }

  public Privilege setRead(PrivilegeSchema read) {
    this.read = read;
    return this;
  }

  public void unsetRead() {
    this.read = null;
  }

  // Returns true if field read is set (has been assigned a value) and false otherwise
  public boolean isSetRead() {
    return this.read != null;
  }

  public void setReadIsSet(boolean __value) {
    if (!__value) {
      this.read = null;
    }
  }

  public PrivilegeSchema getWrite() {
    return this.write;
  }

  public Privilege setWrite(PrivilegeSchema write) {
    this.write = write;
    return this;
  }

  public void unsetWrite() {
    this.write = null;
  }

  // Returns true if field write is set (has been assigned a value) and false otherwise
  public boolean isSetWrite() {
    return this.write != null;
  }

  public void setWriteIsSet(boolean __value) {
    if (!__value) {
      this.write = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SPACE:
      if (__value == null) {
        unsetSpace();
      } else {
        setSpace((Integer)__value);
      }
      break;

    case READ:
      if (__value == null) {
        unsetRead();
      } else {
        setRead((PrivilegeSchema)__value);
      }
      break;

    case WRITE:
      if (__value == null) {
        unsetWrite();
      } else {
        setWrite((PrivilegeSchema)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE:
      return new Integer(getSpace());

    case READ:
      return getRead();

    case WRITE:
      return getWrite();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Privilege))
      return false;
    Privilege that = (Privilege)_that;

    if (!TBaseHelper.equalsNobinary(this.space, that.space)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetRead(), that.isSetRead(), this.read, that.read)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetWrite(), that.isSetWrite(), this.write, that.write)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {space, read, write});
  }

  @Override
  public int compareTo(Privilege other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpace()).compareTo(other.isSetSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space, other.space);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRead()).compareTo(other.isSetRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(read, other.read);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetWrite()).compareTo(other.isSetWrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(write, other.write);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SPACE:
          if (__field.type == TType.I32) {
            this.space = iprot.readI32();
            setSpaceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case READ:
          if (__field.type == TType.STRUCT) {
            this.read = new PrivilegeSchema();
            this.read.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case WRITE:
          if (__field.type == TType.STRUCT) {
            this.write = new PrivilegeSchema();
            this.write.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetSpace()) {
      throw new TProtocolException("Required field 'space' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SPACE_FIELD_DESC);
    oprot.writeI32(this.space);
    oprot.writeFieldEnd();
    if (this.read != null) {
      if (isSetRead()) {
        oprot.writeFieldBegin(READ_FIELD_DESC);
        this.read.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.write != null) {
      if (isSetWrite()) {
        oprot.writeFieldBegin(WRITE_FIELD_DESC);
        this.write.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Privilege");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("space");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSpace(), indent + 1, prettyPrint));
    first = false;
    if (isSetRead())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("read");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getRead() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getRead(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetWrite())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("write");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getWrite() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getWrite(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'space' because it's a primitive and you chose the non-beans generator.
  }

}

