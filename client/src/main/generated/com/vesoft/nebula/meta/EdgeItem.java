/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class EdgeItem implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("EdgeItem");
  private static final TField EDGE_TYPE_FIELD_DESC = new TField("edge_type", TType.I32, (short)1);
  private static final TField EDGE_NAME_FIELD_DESC = new TField("edge_name", TType.STRING, (short)2);
  private static final TField VERSION_FIELD_DESC = new TField("version", TType.I64, (short)3);
  private static final TField SCHEMA_FIELD_DESC = new TField("schema", TType.STRUCT, (short)4);

  public int edge_type;
  public String edge_name;
  public long version;
  public com.vesoft.nebula.Schema schema;
  public static final int EDGE_TYPE = 1;
  public static final int EDGE_NAME = 2;
  public static final int VERSION = 3;
  public static final int SCHEMA = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __EDGE_TYPE_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(EDGE_TYPE, new FieldMetaData("edge_type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(EDGE_NAME, new FieldMetaData("edge_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(VERSION, new FieldMetaData("version", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(SCHEMA, new FieldMetaData("schema", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Schema.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(EdgeItem.class, metaDataMap);
  }

  public EdgeItem() {
  }

  public EdgeItem(
    int edge_type,
    String edge_name,
    long version,
    com.vesoft.nebula.Schema schema)
  {
    this();
    this.edge_type = edge_type;
    setEdge_typeIsSet(true);
    this.edge_name = edge_name;
    this.version = version;
    setVersionIsSet(true);
    this.schema = schema;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EdgeItem(EdgeItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.edge_type = TBaseHelper.deepCopy(other.edge_type);
    if (other.isSetEdge_name()) {
      this.edge_name = TBaseHelper.deepCopy(other.edge_name);
    }
    this.version = TBaseHelper.deepCopy(other.version);
    if (other.isSetSchema()) {
      this.schema = TBaseHelper.deepCopy(other.schema);
    }
  }

  public EdgeItem deepCopy() {
    return new EdgeItem(this);
  }

  @Deprecated
  public EdgeItem clone() {
    return new EdgeItem(this);
  }

  public int  getEdge_type() {
    return this.edge_type;
  }

  public EdgeItem setEdge_type(int edge_type) {
    this.edge_type = edge_type;
    setEdge_typeIsSet(true);
    return this;
  }

  public void unsetEdge_type() {
    __isset_bit_vector.clear(__EDGE_TYPE_ISSET_ID);
  }

  // Returns true if field edge_type is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_type() {
    return __isset_bit_vector.get(__EDGE_TYPE_ISSET_ID);
  }

  public void setEdge_typeIsSet(boolean value) {
    __isset_bit_vector.set(__EDGE_TYPE_ISSET_ID, value);
  }

  public String  getEdge_name() {
    return this.edge_name;
  }

  public EdgeItem setEdge_name(String edge_name) {
    this.edge_name = edge_name;
    return this;
  }

  public void unsetEdge_name() {
    this.edge_name = null;
  }

  // Returns true if field edge_name is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_name() {
    return this.edge_name != null;
  }

  public void setEdge_nameIsSet(boolean value) {
    if (!value) {
      this.edge_name = null;
    }
  }

  public long  getVersion() {
    return this.version;
  }

  public EdgeItem setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bit_vector.clear(__VERSION_ISSET_ID);
  }

  // Returns true if field version is set (has been assigned a value) and false otherwise
  public boolean isSetVersion() {
    return __isset_bit_vector.get(__VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bit_vector.set(__VERSION_ISSET_ID, value);
  }

  public com.vesoft.nebula.Schema  getSchema() {
    return this.schema;
  }

  public EdgeItem setSchema(com.vesoft.nebula.Schema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  // Returns true if field schema is set (has been assigned a value) and false otherwise
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case EDGE_TYPE:
      if (value == null) {
        unsetEdge_type();
      } else {
        setEdge_type((Integer)value);
      }
      break;

    case EDGE_NAME:
      if (value == null) {
        unsetEdge_name();
      } else {
        setEdge_name((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((com.vesoft.nebula.Schema)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case EDGE_TYPE:
      return new Integer(getEdge_type());

    case EDGE_NAME:
      return getEdge_name();

    case VERSION:
      return new Long(getVersion());

    case SCHEMA:
      return getSchema();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case EDGE_TYPE:
      return isSetEdge_type();
    case EDGE_NAME:
      return isSetEdge_name();
    case VERSION:
      return isSetVersion();
    case SCHEMA:
      return isSetSchema();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EdgeItem)
      return this.equals((EdgeItem)that);
    return false;
  }

  public boolean equals(EdgeItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_edge_type = true;
    boolean that_present_edge_type = true;
    if (this_present_edge_type || that_present_edge_type) {
      if (!(this_present_edge_type && that_present_edge_type))
        return false;
      if (!TBaseHelper.equalsNobinary(this.edge_type, that.edge_type))
        return false;
    }

    boolean this_present_edge_name = true && this.isSetEdge_name();
    boolean that_present_edge_name = true && that.isSetEdge_name();
    if (this_present_edge_name || that_present_edge_name) {
      if (!(this_present_edge_name && that_present_edge_name))
        return false;
      if (!TBaseHelper.equalsNobinary(this.edge_name, that.edge_name))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!TBaseHelper.equalsNobinary(this.version, that.version))
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!TBaseHelper.equalsNobinary(this.schema, that.schema))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_edge_type = true;
    builder.append(present_edge_type);
    if (present_edge_type)
      builder.append(edge_type);

    boolean present_edge_name = true && (isSetEdge_name());
    builder.append(present_edge_name);
    if (present_edge_name)
      builder.append(edge_name);

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_schema = true && (isSetSchema());
    builder.append(present_schema);
    if (present_schema)
      builder.append(schema);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case EDGE_TYPE:
          if (field.type == TType.I32) {
            this.edge_type = iprot.readI32();
            setEdge_typeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGE_NAME:
          if (field.type == TType.STRING) {
            this.edge_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.I64) {
            this.version = iprot.readI64();
            setVersionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA:
          if (field.type == TType.STRUCT) {
            this.schema = new com.vesoft.nebula.Schema();
            this.schema.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EDGE_TYPE_FIELD_DESC);
    oprot.writeI32(this.edge_type);
    oprot.writeFieldEnd();
    if (this.edge_name != null) {
      oprot.writeFieldBegin(EDGE_NAME_FIELD_DESC);
      oprot.writeString(this.edge_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(VERSION_FIELD_DESC);
    oprot.writeI64(this.version);
    oprot.writeFieldEnd();
    if (this.schema != null) {
      oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
      this.schema.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("EdgeItem");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("edge_type");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getEdge_type(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("edge_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEdge_name() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEdge_name(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("version");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getVersion(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("schema");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getSchema() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getSchema(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

