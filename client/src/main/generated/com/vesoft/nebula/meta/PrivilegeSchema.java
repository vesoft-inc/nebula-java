/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class PrivilegeSchema implements TBase, java.io.Serializable, Cloneable, Comparable<PrivilegeSchema> {
  private static final TStruct STRUCT_DESC = new TStruct("PrivilegeSchema");
  private static final TField ACCESS_ALL_TAGS_FIELD_DESC = new TField("access_all_tags", TType.BOOL, (short)1);
  private static final TField TAGS_FIELD_DESC = new TField("tags", TType.LIST, (short)2);
  private static final TField ACCESS_ALL_EDGES_FIELD_DESC = new TField("access_all_edges", TType.BOOL, (short)3);
  private static final TField EDGE_TYPES_FIELD_DESC = new TField("edge_types", TType.LIST, (short)4);

  public boolean access_all_tags;
  public List<PrivilegeTag> tags;
  public boolean access_all_edges;
  public List<PrivilegeEdge> edge_types;
  public static final int ACCESS_ALL_TAGS = 1;
  public static final int TAGS = 2;
  public static final int ACCESS_ALL_EDGES = 3;
  public static final int EDGE_TYPES = 4;

  // isset id assignments
  private static final int __ACCESS_ALL_TAGS_ISSET_ID = 0;
  private static final int __ACCESS_ALL_EDGES_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ACCESS_ALL_TAGS, new FieldMetaData("access_all_tags", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(TAGS, new FieldMetaData("tags", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, PrivilegeTag.class))));
    tmpMetaDataMap.put(ACCESS_ALL_EDGES, new FieldMetaData("access_all_edges", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(EDGE_TYPES, new FieldMetaData("edge_types", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, PrivilegeEdge.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(PrivilegeSchema.class, metaDataMap);
  }

  public PrivilegeSchema() {
    this.access_all_tags = false;

    this.access_all_edges = false;

  }

  public PrivilegeSchema(
      boolean access_all_tags,
      List<PrivilegeTag> tags,
      boolean access_all_edges,
      List<PrivilegeEdge> edge_types) {
    this();
    this.access_all_tags = access_all_tags;
    setAccess_all_tagsIsSet(true);
    this.tags = tags;
    this.access_all_edges = access_all_edges;
    setAccess_all_edgesIsSet(true);
    this.edge_types = edge_types;
  }

  public static class Builder {
    private boolean access_all_tags;
    private List<PrivilegeTag> tags;
    private boolean access_all_edges;
    private List<PrivilegeEdge> edge_types;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setAccess_all_tags(final boolean access_all_tags) {
      this.access_all_tags = access_all_tags;
      __optional_isset.set(__ACCESS_ALL_TAGS_ISSET_ID, true);
      return this;
    }

    public Builder setTags(final List<PrivilegeTag> tags) {
      this.tags = tags;
      return this;
    }

    public Builder setAccess_all_edges(final boolean access_all_edges) {
      this.access_all_edges = access_all_edges;
      __optional_isset.set(__ACCESS_ALL_EDGES_ISSET_ID, true);
      return this;
    }

    public Builder setEdge_types(final List<PrivilegeEdge> edge_types) {
      this.edge_types = edge_types;
      return this;
    }

    public PrivilegeSchema build() {
      PrivilegeSchema result = new PrivilegeSchema();
      if (__optional_isset.get(__ACCESS_ALL_TAGS_ISSET_ID)) {
        result.setAccess_all_tags(this.access_all_tags);
      }
      result.setTags(this.tags);
      if (__optional_isset.get(__ACCESS_ALL_EDGES_ISSET_ID)) {
        result.setAccess_all_edges(this.access_all_edges);
      }
      result.setEdge_types(this.edge_types);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrivilegeSchema(PrivilegeSchema other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.access_all_tags = TBaseHelper.deepCopy(other.access_all_tags);
    if (other.isSetTags()) {
      this.tags = TBaseHelper.deepCopy(other.tags);
    }
    this.access_all_edges = TBaseHelper.deepCopy(other.access_all_edges);
    if (other.isSetEdge_types()) {
      this.edge_types = TBaseHelper.deepCopy(other.edge_types);
    }
  }

  public PrivilegeSchema deepCopy() {
    return new PrivilegeSchema(this);
  }

  public boolean isAccess_all_tags() {
    return this.access_all_tags;
  }

  public PrivilegeSchema setAccess_all_tags(boolean access_all_tags) {
    this.access_all_tags = access_all_tags;
    setAccess_all_tagsIsSet(true);
    return this;
  }

  public void unsetAccess_all_tags() {
    __isset_bit_vector.clear(__ACCESS_ALL_TAGS_ISSET_ID);
  }

  // Returns true if field access_all_tags is set (has been assigned a value) and false otherwise
  public boolean isSetAccess_all_tags() {
    return __isset_bit_vector.get(__ACCESS_ALL_TAGS_ISSET_ID);
  }

  public void setAccess_all_tagsIsSet(boolean __value) {
    __isset_bit_vector.set(__ACCESS_ALL_TAGS_ISSET_ID, __value);
  }

  public List<PrivilegeTag> getTags() {
    return this.tags;
  }

  public PrivilegeSchema setTags(List<PrivilegeTag> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  // Returns true if field tags is set (has been assigned a value) and false otherwise
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean __value) {
    if (!__value) {
      this.tags = null;
    }
  }

  public boolean isAccess_all_edges() {
    return this.access_all_edges;
  }

  public PrivilegeSchema setAccess_all_edges(boolean access_all_edges) {
    this.access_all_edges = access_all_edges;
    setAccess_all_edgesIsSet(true);
    return this;
  }

  public void unsetAccess_all_edges() {
    __isset_bit_vector.clear(__ACCESS_ALL_EDGES_ISSET_ID);
  }

  // Returns true if field access_all_edges is set (has been assigned a value) and false otherwise
  public boolean isSetAccess_all_edges() {
    return __isset_bit_vector.get(__ACCESS_ALL_EDGES_ISSET_ID);
  }

  public void setAccess_all_edgesIsSet(boolean __value) {
    __isset_bit_vector.set(__ACCESS_ALL_EDGES_ISSET_ID, __value);
  }

  public List<PrivilegeEdge> getEdge_types() {
    return this.edge_types;
  }

  public PrivilegeSchema setEdge_types(List<PrivilegeEdge> edge_types) {
    this.edge_types = edge_types;
    return this;
  }

  public void unsetEdge_types() {
    this.edge_types = null;
  }

  // Returns true if field edge_types is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_types() {
    return this.edge_types != null;
  }

  public void setEdge_typesIsSet(boolean __value) {
    if (!__value) {
      this.edge_types = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ACCESS_ALL_TAGS:
      if (__value == null) {
        unsetAccess_all_tags();
      } else {
        setAccess_all_tags((Boolean)__value);
      }
      break;

    case TAGS:
      if (__value == null) {
        unsetTags();
      } else {
        setTags((List<PrivilegeTag>)__value);
      }
      break;

    case ACCESS_ALL_EDGES:
      if (__value == null) {
        unsetAccess_all_edges();
      } else {
        setAccess_all_edges((Boolean)__value);
      }
      break;

    case EDGE_TYPES:
      if (__value == null) {
        unsetEdge_types();
      } else {
        setEdge_types((List<PrivilegeEdge>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ACCESS_ALL_TAGS:
      return new Boolean(isAccess_all_tags());

    case TAGS:
      return getTags();

    case ACCESS_ALL_EDGES:
      return new Boolean(isAccess_all_edges());

    case EDGE_TYPES:
      return getEdge_types();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof PrivilegeSchema))
      return false;
    PrivilegeSchema that = (PrivilegeSchema)_that;

    if (!TBaseHelper.equalsNobinary(this.access_all_tags, that.access_all_tags)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTags(), that.isSetTags(), this.tags, that.tags)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.access_all_edges, that.access_all_edges)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEdge_types(), that.isSetEdge_types(), this.edge_types, that.edge_types)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {access_all_tags, tags, access_all_edges, edge_types});
  }

  @Override
  public int compareTo(PrivilegeSchema other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccess_all_tags()).compareTo(other.isSetAccess_all_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(access_all_tags, other.access_all_tags);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(tags, other.tags);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAccess_all_edges()).compareTo(other.isSetAccess_all_edges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(access_all_edges, other.access_all_edges);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEdge_types()).compareTo(other.isSetEdge_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edge_types, other.edge_types);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ACCESS_ALL_TAGS:
          if (__field.type == TType.BOOL) {
            this.access_all_tags = iprot.readBool();
            setAccess_all_tagsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TAGS:
          if (__field.type == TType.LIST) {
            {
              TList _list441 = iprot.readListBegin();
              this.tags = new ArrayList<PrivilegeTag>(Math.max(0, _list441.size));
              for (int _i442 = 0; 
                   (_list441.size < 0) ? iprot.peekList() : (_i442 < _list441.size); 
                   ++_i442)
              {
                PrivilegeTag _elem443;
                _elem443 = new PrivilegeTag();
                _elem443.read(iprot);
                this.tags.add(_elem443);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ACCESS_ALL_EDGES:
          if (__field.type == TType.BOOL) {
            this.access_all_edges = iprot.readBool();
            setAccess_all_edgesIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case EDGE_TYPES:
          if (__field.type == TType.LIST) {
            {
              TList _list444 = iprot.readListBegin();
              this.edge_types = new ArrayList<PrivilegeEdge>(Math.max(0, _list444.size));
              for (int _i445 = 0; 
                   (_list444.size < 0) ? iprot.peekList() : (_i445 < _list444.size); 
                   ++_i445)
              {
                PrivilegeEdge _elem446;
                _elem446 = new PrivilegeEdge();
                _elem446.read(iprot);
                this.edge_types.add(_elem446);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ACCESS_ALL_TAGS_FIELD_DESC);
    oprot.writeBool(this.access_all_tags);
    oprot.writeFieldEnd();
    if (this.tags != null) {
      oprot.writeFieldBegin(TAGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.tags.size()));
        for (PrivilegeTag _iter447 : this.tags)        {
          _iter447.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ACCESS_ALL_EDGES_FIELD_DESC);
    oprot.writeBool(this.access_all_edges);
    oprot.writeFieldEnd();
    if (this.edge_types != null) {
      oprot.writeFieldBegin(EDGE_TYPES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.edge_types.size()));
        for (PrivilegeEdge _iter448 : this.edge_types)        {
          _iter448.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("PrivilegeSchema");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("access_all_tags");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isAccess_all_tags(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("tags");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTags() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getTags(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("access_all_edges");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isAccess_all_edges(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("edge_types");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEdge_types() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEdge_types(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

