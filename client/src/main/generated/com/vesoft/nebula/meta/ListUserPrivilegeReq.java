/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ListUserPrivilegeReq implements TBase, java.io.Serializable, Cloneable, Comparable<ListUserPrivilegeReq> {
  private static final TStruct STRUCT_DESC = new TStruct("ListUserPrivilegeReq");
  private static final TField USER_NAME_FIELD_DESC = new TField("user_name", TType.STRING, (short)1);

  public byte[] user_name;
  public static final int USER_NAME = 1;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(USER_NAME, new FieldMetaData("user_name", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ListUserPrivilegeReq.class, metaDataMap);
  }

  public ListUserPrivilegeReq() {
  }

  public ListUserPrivilegeReq(
      byte[] user_name) {
    this();
    this.user_name = user_name;
  }

  public static class Builder {
    private byte[] user_name;

    public Builder() {
    }

    public Builder setUser_name(final byte[] user_name) {
      this.user_name = user_name;
      return this;
    }

    public ListUserPrivilegeReq build() {
      ListUserPrivilegeReq result = new ListUserPrivilegeReq();
      result.setUser_name(this.user_name);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListUserPrivilegeReq(ListUserPrivilegeReq other) {
    if (other.isSetUser_name()) {
      this.user_name = TBaseHelper.deepCopy(other.user_name);
    }
  }

  public ListUserPrivilegeReq deepCopy() {
    return new ListUserPrivilegeReq(this);
  }

  public byte[] getUser_name() {
    return this.user_name;
  }

  public ListUserPrivilegeReq setUser_name(byte[] user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  // Returns true if field user_name is set (has been assigned a value) and false otherwise
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean __value) {
    if (!__value) {
      this.user_name = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case USER_NAME:
      if (__value == null) {
        unsetUser_name();
      } else {
        setUser_name((byte[])__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case USER_NAME:
      return getUser_name();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof ListUserPrivilegeReq))
      return false;
    ListUserPrivilegeReq that = (ListUserPrivilegeReq)_that;

    if (!TBaseHelper.equalsSlow(this.isSetUser_name(), that.isSetUser_name(), this.user_name, that.user_name)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {user_name});
  }

  @Override
  public int compareTo(ListUserPrivilegeReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(user_name, other.user_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case USER_NAME:
          if (__field.type == TType.STRING) {
            this.user_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.user_name != null) {
      if (isSetUser_name()) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeBinary(this.user_name);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ListUserPrivilegeReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    if (isSetUser_name())
    {
      sb.append(indentStr);
      sb.append("user_name");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getUser_name() == null) {
        sb.append("null");
      } else {
          int __user_name_size = Math.min(this.getUser_name().length, 128);
          for (int i = 0; i < __user_name_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getUser_name()[i]).length() > 1 ? Integer.toHexString(this.getUser_name()[i]).substring(Integer.toHexString(this.getUser_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getUser_name()[i]).toUpperCase());
          }
          if (this.getUser_name().length > 128) sb.append(" ...");
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

