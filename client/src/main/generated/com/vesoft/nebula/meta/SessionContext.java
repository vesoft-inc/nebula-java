/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SessionContext implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SessionContext");
  private static final TField SESSION_ID_FIELD_DESC = new TField("session_id", TType.I64, (short)1);
  private static final TField USER_NAME_FIELD_DESC = new TField("user_name", TType.STRING, (short)2);
  private static final TField TIMEZONE_FIELD_DESC = new TField("timezone", TType.I32, (short)3);
  private static final TField SCHEMA_FIELD_DESC = new TField("schema", TType.STRUCT, (short)4);
  private static final TField SPACE_NAME_FIELD_DESC = new TField("space_name", TType.STRING, (short)5);
  private static final TField PARAM_DICT_FIELD_DESC = new TField("param_dict", TType.MAP, (short)6);
  private static final TField PARAM_FALGS_FIELD_DESC = new TField("param_falgs", TType.MAP, (short)7);
  private static final TField IS_TERMINATED_FIELD_DESC = new TField("is_terminated", TType.BOOL, (short)8);

  public long session_id;
  public byte[] user_name;
  public int timezone;
  public SessionSchema schema;
  public byte[] space_name;
  public Map<byte[],com.vesoft.nebula.Value> param_dict;
  public Map<byte[],com.vesoft.nebula.Value> param_falgs;
  public boolean is_terminated;
  public static final int SESSION_ID = 1;
  public static final int USER_NAME = 2;
  public static final int TIMEZONE = 3;
  public static final int SCHEMA = 4;
  public static final int SPACE_NAME = 5;
  public static final int PARAM_DICT = 6;
  public static final int PARAM_FALGS = 7;
  public static final int IS_TERMINATED = 8;

  // isset id assignments
  private static final int __SESSION_ID_ISSET_ID = 0;
  private static final int __TIMEZONE_ISSET_ID = 1;
  private static final int __IS_TERMINATED_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SESSION_ID, new FieldMetaData("session_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(USER_NAME, new FieldMetaData("user_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(TIMEZONE, new FieldMetaData("timezone", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SCHEMA, new FieldMetaData("schema", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, SessionSchema.class)));
    tmpMetaDataMap.put(SPACE_NAME, new FieldMetaData("space_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(PARAM_DICT, new FieldMetaData("param_dict", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class))));
    tmpMetaDataMap.put(PARAM_FALGS, new FieldMetaData("param_falgs", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class))));
    tmpMetaDataMap.put(IS_TERMINATED, new FieldMetaData("is_terminated", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SessionContext.class, metaDataMap);
  }

  public SessionContext() {
    this.is_terminated = false;

  }

  public SessionContext(
      long session_id,
      byte[] user_name,
      int timezone,
      SessionSchema schema,
      byte[] space_name,
      Map<byte[],com.vesoft.nebula.Value> param_dict,
      Map<byte[],com.vesoft.nebula.Value> param_falgs,
      boolean is_terminated) {
    this();
    this.session_id = session_id;
    setSession_idIsSet(true);
    this.user_name = user_name;
    this.timezone = timezone;
    setTimezoneIsSet(true);
    this.schema = schema;
    this.space_name = space_name;
    this.param_dict = param_dict;
    this.param_falgs = param_falgs;
    this.is_terminated = is_terminated;
    setIs_terminatedIsSet(true);
  }

  public static class Builder {
    private long session_id;
    private byte[] user_name;
    private int timezone;
    private SessionSchema schema;
    private byte[] space_name;
    private Map<byte[],com.vesoft.nebula.Value> param_dict;
    private Map<byte[],com.vesoft.nebula.Value> param_falgs;
    private boolean is_terminated;

    BitSet __optional_isset = new BitSet(3);

    public Builder() {
    }

    public Builder setSession_id(final long session_id) {
      this.session_id = session_id;
      __optional_isset.set(__SESSION_ID_ISSET_ID, true);
      return this;
    }

    public Builder setUser_name(final byte[] user_name) {
      this.user_name = user_name;
      return this;
    }

    public Builder setTimezone(final int timezone) {
      this.timezone = timezone;
      __optional_isset.set(__TIMEZONE_ISSET_ID, true);
      return this;
    }

    public Builder setSchema(final SessionSchema schema) {
      this.schema = schema;
      return this;
    }

    public Builder setSpace_name(final byte[] space_name) {
      this.space_name = space_name;
      return this;
    }

    public Builder setParam_dict(final Map<byte[],com.vesoft.nebula.Value> param_dict) {
      this.param_dict = param_dict;
      return this;
    }

    public Builder setParam_falgs(final Map<byte[],com.vesoft.nebula.Value> param_falgs) {
      this.param_falgs = param_falgs;
      return this;
    }

    public Builder setIs_terminated(final boolean is_terminated) {
      this.is_terminated = is_terminated;
      __optional_isset.set(__IS_TERMINATED_ISSET_ID, true);
      return this;
    }

    public SessionContext build() {
      SessionContext result = new SessionContext();
      if (__optional_isset.get(__SESSION_ID_ISSET_ID)) {
        result.setSession_id(this.session_id);
      }
      result.setUser_name(this.user_name);
      if (__optional_isset.get(__TIMEZONE_ISSET_ID)) {
        result.setTimezone(this.timezone);
      }
      result.setSchema(this.schema);
      result.setSpace_name(this.space_name);
      result.setParam_dict(this.param_dict);
      result.setParam_falgs(this.param_falgs);
      if (__optional_isset.get(__IS_TERMINATED_ISSET_ID)) {
        result.setIs_terminated(this.is_terminated);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SessionContext(SessionContext other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.session_id = TBaseHelper.deepCopy(other.session_id);
    if (other.isSetUser_name()) {
      this.user_name = TBaseHelper.deepCopy(other.user_name);
    }
    this.timezone = TBaseHelper.deepCopy(other.timezone);
    if (other.isSetSchema()) {
      this.schema = TBaseHelper.deepCopy(other.schema);
    }
    if (other.isSetSpace_name()) {
      this.space_name = TBaseHelper.deepCopy(other.space_name);
    }
    if (other.isSetParam_dict()) {
      this.param_dict = TBaseHelper.deepCopy(other.param_dict);
    }
    if (other.isSetParam_falgs()) {
      this.param_falgs = TBaseHelper.deepCopy(other.param_falgs);
    }
    this.is_terminated = TBaseHelper.deepCopy(other.is_terminated);
  }

  public SessionContext deepCopy() {
    return new SessionContext(this);
  }

  public long getSession_id() {
    return this.session_id;
  }

  public SessionContext setSession_id(long session_id) {
    this.session_id = session_id;
    setSession_idIsSet(true);
    return this;
  }

  public void unsetSession_id() {
    __isset_bit_vector.clear(__SESSION_ID_ISSET_ID);
  }

  // Returns true if field session_id is set (has been assigned a value) and false otherwise
  public boolean isSetSession_id() {
    return __isset_bit_vector.get(__SESSION_ID_ISSET_ID);
  }

  public void setSession_idIsSet(boolean __value) {
    __isset_bit_vector.set(__SESSION_ID_ISSET_ID, __value);
  }

  public byte[] getUser_name() {
    return this.user_name;
  }

  public SessionContext setUser_name(byte[] user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  // Returns true if field user_name is set (has been assigned a value) and false otherwise
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean __value) {
    if (!__value) {
      this.user_name = null;
    }
  }

  public int getTimezone() {
    return this.timezone;
  }

  public SessionContext setTimezone(int timezone) {
    this.timezone = timezone;
    setTimezoneIsSet(true);
    return this;
  }

  public void unsetTimezone() {
    __isset_bit_vector.clear(__TIMEZONE_ISSET_ID);
  }

  // Returns true if field timezone is set (has been assigned a value) and false otherwise
  public boolean isSetTimezone() {
    return __isset_bit_vector.get(__TIMEZONE_ISSET_ID);
  }

  public void setTimezoneIsSet(boolean __value) {
    __isset_bit_vector.set(__TIMEZONE_ISSET_ID, __value);
  }

  public SessionSchema getSchema() {
    return this.schema;
  }

  public SessionContext setSchema(SessionSchema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  // Returns true if field schema is set (has been assigned a value) and false otherwise
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean __value) {
    if (!__value) {
      this.schema = null;
    }
  }

  public byte[] getSpace_name() {
    return this.space_name;
  }

  public SessionContext setSpace_name(byte[] space_name) {
    this.space_name = space_name;
    return this;
  }

  public void unsetSpace_name() {
    this.space_name = null;
  }

  // Returns true if field space_name is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_name() {
    return this.space_name != null;
  }

  public void setSpace_nameIsSet(boolean __value) {
    if (!__value) {
      this.space_name = null;
    }
  }

  public Map<byte[],com.vesoft.nebula.Value> getParam_dict() {
    return this.param_dict;
  }

  public SessionContext setParam_dict(Map<byte[],com.vesoft.nebula.Value> param_dict) {
    this.param_dict = param_dict;
    return this;
  }

  public void unsetParam_dict() {
    this.param_dict = null;
  }

  // Returns true if field param_dict is set (has been assigned a value) and false otherwise
  public boolean isSetParam_dict() {
    return this.param_dict != null;
  }

  public void setParam_dictIsSet(boolean __value) {
    if (!__value) {
      this.param_dict = null;
    }
  }

  public Map<byte[],com.vesoft.nebula.Value> getParam_falgs() {
    return this.param_falgs;
  }

  public SessionContext setParam_falgs(Map<byte[],com.vesoft.nebula.Value> param_falgs) {
    this.param_falgs = param_falgs;
    return this;
  }

  public void unsetParam_falgs() {
    this.param_falgs = null;
  }

  // Returns true if field param_falgs is set (has been assigned a value) and false otherwise
  public boolean isSetParam_falgs() {
    return this.param_falgs != null;
  }

  public void setParam_falgsIsSet(boolean __value) {
    if (!__value) {
      this.param_falgs = null;
    }
  }

  public boolean isIs_terminated() {
    return this.is_terminated;
  }

  public SessionContext setIs_terminated(boolean is_terminated) {
    this.is_terminated = is_terminated;
    setIs_terminatedIsSet(true);
    return this;
  }

  public void unsetIs_terminated() {
    __isset_bit_vector.clear(__IS_TERMINATED_ISSET_ID);
  }

  // Returns true if field is_terminated is set (has been assigned a value) and false otherwise
  public boolean isSetIs_terminated() {
    return __isset_bit_vector.get(__IS_TERMINATED_ISSET_ID);
  }

  public void setIs_terminatedIsSet(boolean __value) {
    __isset_bit_vector.set(__IS_TERMINATED_ISSET_ID, __value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SESSION_ID:
      if (__value == null) {
        unsetSession_id();
      } else {
        setSession_id((Long)__value);
      }
      break;

    case USER_NAME:
      if (__value == null) {
        unsetUser_name();
      } else {
        setUser_name((byte[])__value);
      }
      break;

    case TIMEZONE:
      if (__value == null) {
        unsetTimezone();
      } else {
        setTimezone((Integer)__value);
      }
      break;

    case SCHEMA:
      if (__value == null) {
        unsetSchema();
      } else {
        setSchema((SessionSchema)__value);
      }
      break;

    case SPACE_NAME:
      if (__value == null) {
        unsetSpace_name();
      } else {
        setSpace_name((byte[])__value);
      }
      break;

    case PARAM_DICT:
      if (__value == null) {
        unsetParam_dict();
      } else {
        setParam_dict((Map<byte[],com.vesoft.nebula.Value>)__value);
      }
      break;

    case PARAM_FALGS:
      if (__value == null) {
        unsetParam_falgs();
      } else {
        setParam_falgs((Map<byte[],com.vesoft.nebula.Value>)__value);
      }
      break;

    case IS_TERMINATED:
      if (__value == null) {
        unsetIs_terminated();
      } else {
        setIs_terminated((Boolean)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SESSION_ID:
      return new Long(getSession_id());

    case USER_NAME:
      return getUser_name();

    case TIMEZONE:
      return new Integer(getTimezone());

    case SCHEMA:
      return getSchema();

    case SPACE_NAME:
      return getSpace_name();

    case PARAM_DICT:
      return getParam_dict();

    case PARAM_FALGS:
      return getParam_falgs();

    case IS_TERMINATED:
      return new Boolean(isIs_terminated());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof SessionContext))
      return false;
    SessionContext that = (SessionContext)_that;

    if (!TBaseHelper.equalsNobinary(this.session_id, that.session_id)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetUser_name(), that.isSetUser_name(), this.user_name, that.user_name)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.timezone, that.timezone)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSchema(), that.isSetSchema(), this.schema, that.schema)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetSpace_name(), that.isSetSpace_name(), this.space_name, that.space_name)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetParam_dict(), that.isSetParam_dict(), this.param_dict, that.param_dict)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetParam_falgs(), that.isSetParam_falgs(), this.param_falgs, that.param_falgs)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.is_terminated, that.is_terminated)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {session_id, user_name, timezone, schema, space_name, param_dict, param_falgs, is_terminated});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SESSION_ID:
          if (__field.type == TType.I64) {
            this.session_id = iprot.readI64();
            setSession_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case USER_NAME:
          if (__field.type == TType.STRING) {
            this.user_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TIMEZONE:
          if (__field.type == TType.I32) {
            this.timezone = iprot.readI32();
            setTimezoneIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SCHEMA:
          if (__field.type == TType.STRUCT) {
            this.schema = new SessionSchema();
            this.schema.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SPACE_NAME:
          if (__field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PARAM_DICT:
          if (__field.type == TType.MAP) {
            {
              TMap _map304 = iprot.readMapBegin();
              this.param_dict = new HashMap<byte[],com.vesoft.nebula.Value>(Math.max(0, 2*_map304.size));
              for (int _i305 = 0; 
                   (_map304.size < 0) ? iprot.peekMap() : (_i305 < _map304.size); 
                   ++_i305)
              {
                byte[] _key306;
                com.vesoft.nebula.Value _val307;
                _key306 = iprot.readBinary();
                _val307 = new com.vesoft.nebula.Value();
                _val307.read(iprot);
                this.param_dict.put(_key306, _val307);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PARAM_FALGS:
          if (__field.type == TType.MAP) {
            {
              TMap _map308 = iprot.readMapBegin();
              this.param_falgs = new HashMap<byte[],com.vesoft.nebula.Value>(Math.max(0, 2*_map308.size));
              for (int _i309 = 0; 
                   (_map308.size < 0) ? iprot.peekMap() : (_i309 < _map308.size); 
                   ++_i309)
              {
                byte[] _key310;
                com.vesoft.nebula.Value _val311;
                _key310 = iprot.readBinary();
                _val311 = new com.vesoft.nebula.Value();
                _val311.read(iprot);
                this.param_falgs.put(_key310, _val311);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case IS_TERMINATED:
          if (__field.type == TType.BOOL) {
            this.is_terminated = iprot.readBool();
            setIs_terminatedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
    oprot.writeI64(this.session_id);
    oprot.writeFieldEnd();
    if (this.user_name != null) {
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeBinary(this.user_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
    oprot.writeI32(this.timezone);
    oprot.writeFieldEnd();
    if (this.schema != null) {
      oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
      this.schema.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.space_name != null) {
      oprot.writeFieldBegin(SPACE_NAME_FIELD_DESC);
      oprot.writeBinary(this.space_name);
      oprot.writeFieldEnd();
    }
    if (this.param_dict != null) {
      oprot.writeFieldBegin(PARAM_DICT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.param_dict.size()));
        for (Map.Entry<byte[], com.vesoft.nebula.Value> _iter312 : this.param_dict.entrySet())        {
          oprot.writeBinary(_iter312.getKey());
          _iter312.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.param_falgs != null) {
      oprot.writeFieldBegin(PARAM_FALGS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.param_falgs.size()));
        for (Map.Entry<byte[], com.vesoft.nebula.Value> _iter313 : this.param_falgs.entrySet())        {
          oprot.writeBinary(_iter313.getKey());
          _iter313.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_TERMINATED_FIELD_DESC);
    oprot.writeBool(this.is_terminated);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SessionContext");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("session_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSession_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("user_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUser_name() == null) {
      sb.append("null");
    } else {
        int __user_name_size = Math.min(this.getUser_name().length, 128);
        for (int i = 0; i < __user_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getUser_name()[i]).length() > 1 ? Integer.toHexString(this.getUser_name()[i]).substring(Integer.toHexString(this.getUser_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getUser_name()[i]).toUpperCase());
        }
        if (this.getUser_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("timezone");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTimezone(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("schema");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSchema() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSchema(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSpace_name() == null) {
      sb.append("null");
    } else {
        int __space_name_size = Math.min(this.getSpace_name().length, 128);
        for (int i = 0; i < __space_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getSpace_name()[i]).length() > 1 ? Integer.toHexString(this.getSpace_name()[i]).substring(Integer.toHexString(this.getSpace_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getSpace_name()[i]).toUpperCase());
        }
        if (this.getSpace_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("param_dict");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getParam_dict() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getParam_dict(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("param_falgs");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getParam_falgs() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getParam_falgs(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("is_terminated");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isIs_terminated(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

