/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AdminJobResult implements TBase, java.io.Serializable, Cloneable, Comparable<AdminJobResult> {
  private static final TStruct STRUCT_DESC = new TStruct("AdminJobResult");
  private static final TField JOB_ID_FIELD_DESC = new TField("job_id", TType.I32, (short)1);
  private static final TField JOB_DESC_FIELD_DESC = new TField("job_desc", TType.LIST, (short)2);
  private static final TField TASK_DESC_FIELD_DESC = new TField("task_desc", TType.LIST, (short)3);
  private static final TField RECOVERED_JOB_NUM_FIELD_DESC = new TField("recovered_job_num", TType.I32, (short)4);

  public int job_id;
  public List<JobDesc> job_desc;
  public List<TaskDesc> task_desc;
  public int recovered_job_num;
  public static final int JOB_ID = 1;
  public static final int JOB_DESC = 2;
  public static final int TASK_DESC = 3;
  public static final int RECOVERED_JOB_NUM = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __JOB_ID_ISSET_ID = 0;
  private static final int __RECOVERED_JOB_NUM_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(JOB_ID, new FieldMetaData("job_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(JOB_DESC, new FieldMetaData("job_desc", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, JobDesc.class))));
    tmpMetaDataMap.put(TASK_DESC, new FieldMetaData("task_desc", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TaskDesc.class))));
    tmpMetaDataMap.put(RECOVERED_JOB_NUM, new FieldMetaData("recovered_job_num", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AdminJobResult.class, metaDataMap);
  }

  public AdminJobResult() {
  }

  public AdminJobResult(
    int job_id,
    List<JobDesc> job_desc,
    List<TaskDesc> task_desc,
    int recovered_job_num)
  {
    this();
    this.job_id = job_id;
    setJob_idIsSet(true);
    this.job_desc = job_desc;
    this.task_desc = task_desc;
    this.recovered_job_num = recovered_job_num;
    setRecovered_job_numIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdminJobResult(AdminJobResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.job_id = TBaseHelper.deepCopy(other.job_id);
    if (other.isSetJob_desc()) {
      this.job_desc = TBaseHelper.deepCopy(other.job_desc);
    }
    if (other.isSetTask_desc()) {
      this.task_desc = TBaseHelper.deepCopy(other.task_desc);
    }
    this.recovered_job_num = TBaseHelper.deepCopy(other.recovered_job_num);
  }

  public AdminJobResult deepCopy() {
    return new AdminJobResult(this);
  }

  @Deprecated
  public AdminJobResult clone() {
    return new AdminJobResult(this);
  }

  public int  getJob_id() {
    return this.job_id;
  }

  public AdminJobResult setJob_id(int job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bit_vector.clear(__JOB_ID_ISSET_ID);
  }

  // Returns true if field job_id is set (has been assigned a value) and false otherwise
  public boolean isSetJob_id() {
    return __isset_bit_vector.get(__JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bit_vector.set(__JOB_ID_ISSET_ID, value);
  }

  public List<JobDesc>  getJob_desc() {
    return this.job_desc;
  }

  public AdminJobResult setJob_desc(List<JobDesc> job_desc) {
    this.job_desc = job_desc;
    return this;
  }

  public void unsetJob_desc() {
    this.job_desc = null;
  }

  // Returns true if field job_desc is set (has been assigned a value) and false otherwise
  public boolean isSetJob_desc() {
    return this.job_desc != null;
  }

  public void setJob_descIsSet(boolean value) {
    if (!value) {
      this.job_desc = null;
    }
  }

  public List<TaskDesc>  getTask_desc() {
    return this.task_desc;
  }

  public AdminJobResult setTask_desc(List<TaskDesc> task_desc) {
    this.task_desc = task_desc;
    return this;
  }

  public void unsetTask_desc() {
    this.task_desc = null;
  }

  // Returns true if field task_desc is set (has been assigned a value) and false otherwise
  public boolean isSetTask_desc() {
    return this.task_desc != null;
  }

  public void setTask_descIsSet(boolean value) {
    if (!value) {
      this.task_desc = null;
    }
  }

  public int  getRecovered_job_num() {
    return this.recovered_job_num;
  }

  public AdminJobResult setRecovered_job_num(int recovered_job_num) {
    this.recovered_job_num = recovered_job_num;
    setRecovered_job_numIsSet(true);
    return this;
  }

  public void unsetRecovered_job_num() {
    __isset_bit_vector.clear(__RECOVERED_JOB_NUM_ISSET_ID);
  }

  // Returns true if field recovered_job_num is set (has been assigned a value) and false otherwise
  public boolean isSetRecovered_job_num() {
    return __isset_bit_vector.get(__RECOVERED_JOB_NUM_ISSET_ID);
  }

  public void setRecovered_job_numIsSet(boolean value) {
    __isset_bit_vector.set(__RECOVERED_JOB_NUM_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((Integer)value);
      }
      break;

    case JOB_DESC:
      if (value == null) {
        unsetJob_desc();
      } else {
        setJob_desc((List<JobDesc>)value);
      }
      break;

    case TASK_DESC:
      if (value == null) {
        unsetTask_desc();
      } else {
        setTask_desc((List<TaskDesc>)value);
      }
      break;

    case RECOVERED_JOB_NUM:
      if (value == null) {
        unsetRecovered_job_num();
      } else {
        setRecovered_job_num((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case JOB_ID:
      return new Integer(getJob_id());

    case JOB_DESC:
      return getJob_desc();

    case TASK_DESC:
      return getTask_desc();

    case RECOVERED_JOB_NUM:
      return new Integer(getRecovered_job_num());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case JOB_ID:
      return isSetJob_id();
    case JOB_DESC:
      return isSetJob_desc();
    case TASK_DESC:
      return isSetTask_desc();
    case RECOVERED_JOB_NUM:
      return isSetRecovered_job_num();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdminJobResult)
      return this.equals((AdminJobResult)that);
    return false;
  }

  public boolean equals(AdminJobResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.job_id, that.job_id))
        return false;
    }

    boolean this_present_job_desc = true && this.isSetJob_desc();
    boolean that_present_job_desc = true && that.isSetJob_desc();
    if (this_present_job_desc || that_present_job_desc) {
      if (!(this_present_job_desc && that_present_job_desc))
        return false;
      if (!TBaseHelper.equalsNobinary(this.job_desc, that.job_desc))
        return false;
    }

    boolean this_present_task_desc = true && this.isSetTask_desc();
    boolean that_present_task_desc = true && that.isSetTask_desc();
    if (this_present_task_desc || that_present_task_desc) {
      if (!(this_present_task_desc && that_present_task_desc))
        return false;
      if (!TBaseHelper.equalsNobinary(this.task_desc, that.task_desc))
        return false;
    }

    boolean this_present_recovered_job_num = true && this.isSetRecovered_job_num();
    boolean that_present_recovered_job_num = true && that.isSetRecovered_job_num();
    if (this_present_recovered_job_num || that_present_recovered_job_num) {
      if (!(this_present_recovered_job_num && that_present_recovered_job_num))
        return false;
      if (!TBaseHelper.equalsNobinary(this.recovered_job_num, that.recovered_job_num))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_job_id = true && (isSetJob_id());
    builder.append(present_job_id);
    if (present_job_id)
      builder.append(job_id);

    boolean present_job_desc = true && (isSetJob_desc());
    builder.append(present_job_desc);
    if (present_job_desc)
      builder.append(job_desc);

    boolean present_task_desc = true && (isSetTask_desc());
    builder.append(present_task_desc);
    if (present_task_desc)
      builder.append(task_desc);

    boolean present_recovered_job_num = true && (isSetRecovered_job_num());
    builder.append(present_recovered_job_num);
    if (present_recovered_job_num)
      builder.append(recovered_job_num);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(AdminJobResult other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJob_id()).compareTo(other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(job_id, other.job_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetJob_desc()).compareTo(other.isSetJob_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(job_desc, other.job_desc);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTask_desc()).compareTo(other.isSetTask_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(task_desc, other.task_desc);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRecovered_job_num()).compareTo(other.isSetRecovered_job_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(recovered_job_num, other.recovered_job_num);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case JOB_ID:
          if (field.type == TType.I32) {
            this.job_id = iprot.readI32();
            setJob_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case JOB_DESC:
          if (field.type == TType.LIST) {
            {
              TList _list26 = iprot.readListBegin();
              this.job_desc = new ArrayList<JobDesc>(Math.max(0, _list26.size));
              for (int _i27 = 0; 
                   (_list26.size < 0) ? iprot.peekList() : (_i27 < _list26.size); 
                   ++_i27)
              {
                JobDesc _elem28;
                _elem28 = new JobDesc();
                _elem28.read(iprot);
                this.job_desc.add(_elem28);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASK_DESC:
          if (field.type == TType.LIST) {
            {
              TList _list29 = iprot.readListBegin();
              this.task_desc = new ArrayList<TaskDesc>(Math.max(0, _list29.size));
              for (int _i30 = 0; 
                   (_list29.size < 0) ? iprot.peekList() : (_i30 < _list29.size); 
                   ++_i30)
              {
                TaskDesc _elem31;
                _elem31 = new TaskDesc();
                _elem31.read(iprot);
                this.task_desc.add(_elem31);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECOVERED_JOB_NUM:
          if (field.type == TType.I32) {
            this.recovered_job_num = iprot.readI32();
            setRecovered_job_numIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetJob_id()) {
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI32(this.job_id);
      oprot.writeFieldEnd();
    }
    if (this.job_desc != null) {
      if (isSetJob_desc()) {
        oprot.writeFieldBegin(JOB_DESC_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.job_desc.size()));
          for (JobDesc _iter32 : this.job_desc)          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.task_desc != null) {
      if (isSetTask_desc()) {
        oprot.writeFieldBegin(TASK_DESC_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.task_desc.size()));
          for (TaskDesc _iter33 : this.task_desc)          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetRecovered_job_num()) {
      oprot.writeFieldBegin(RECOVERED_JOB_NUM_FIELD_DESC);
      oprot.writeI32(this.recovered_job_num);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AdminJobResult");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    if (isSetJob_id())
    {
      sb.append(indentStr);
      sb.append("job_id");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getJob_id(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetJob_desc())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("job_desc");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getJob_desc() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getJob_desc(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetTask_desc())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("task_desc");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getTask_desc() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getTask_desc(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetRecovered_job_num())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("recovered_job_num");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getRecovered_job_num(), indent + 1, prettyPrint));
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

