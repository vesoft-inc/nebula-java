/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class IndexFields implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("IndexFields");
  private static final TField FIELDS_FIELD_DESC = new TField("fields", TType.MAP, (short)1);

  public Map<String,List<com.vesoft.nebula.ColumnDef>> fields;
  public static final int FIELDS = 1;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(FIELDS, new FieldMetaData("fields", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, com.vesoft.nebula.ColumnDef.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(IndexFields.class, metaDataMap);
  }

  public IndexFields() {
  }

  public IndexFields(
    Map<String,List<com.vesoft.nebula.ColumnDef>> fields)
  {
    this();
    this.fields = fields;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexFields(IndexFields other) {
    if (other.isSetFields()) {
      this.fields = TBaseHelper.deepCopy(other.fields);
    }
  }

  public IndexFields deepCopy() {
    return new IndexFields(this);
  }

  @Deprecated
  public IndexFields clone() {
    return new IndexFields(this);
  }

  public Map<String,List<com.vesoft.nebula.ColumnDef>>  getFields() {
    return this.fields;
  }

  public IndexFields setFields(Map<String,List<com.vesoft.nebula.ColumnDef>> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  // Returns true if field fields is set (has been assigned a value) and false otherwise
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((Map<String,List<com.vesoft.nebula.ColumnDef>>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case FIELDS:
      return getFields();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case FIELDS:
      return isSetFields();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndexFields)
      return this.equals((IndexFields)that);
    return false;
  }

  public boolean equals(IndexFields that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!TBaseHelper.equalsNobinary(this.fields, that.fields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fields = true && (isSetFields());
    builder.append(present_fields);
    if (present_fields)
      builder.append(fields);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case FIELDS:
          if (field.type == TType.MAP) {
            {
              TMap _map9 = iprot.readMapBegin();
              this.fields = new HashMap<String,List<com.vesoft.nebula.ColumnDef>>(Math.max(0, 2*_map9.size));
              for (int _i10 = 0; 
                   (_map9.size < 0) ? iprot.peekMap() : (_i10 < _map9.size); 
                   ++_i10)
              {
                String _key11;
                List<com.vesoft.nebula.ColumnDef> _val12;
                _key11 = iprot.readString();
                {
                  TList _list13 = iprot.readListBegin();
                  _val12 = new ArrayList<com.vesoft.nebula.ColumnDef>(Math.max(0, _list13.size));
                  for (int _i14 = 0; 
                       (_list13.size < 0) ? iprot.peekList() : (_i14 < _list13.size); 
                       ++_i14)
                  {
                    com.vesoft.nebula.ColumnDef _elem15;
                    _elem15 = new com.vesoft.nebula.ColumnDef();
                    _elem15.read(iprot);
                    _val12.add(_elem15);
                  }
                  iprot.readListEnd();
                }
                this.fields.put(_key11, _val12);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.fields != null) {
      oprot.writeFieldBegin(FIELDS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.fields.size()));
        for (Map.Entry<String, List<com.vesoft.nebula.ColumnDef>> _iter16 : this.fields.entrySet())        {
          oprot.writeString(_iter16.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter16.getValue().size()));
            for (com.vesoft.nebula.ColumnDef _iter17 : _iter16.getValue())            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("IndexFields");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("fields");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getFields() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getFields(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

