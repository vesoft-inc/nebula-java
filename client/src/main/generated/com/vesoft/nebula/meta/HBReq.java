/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class HBReq implements TBase, java.io.Serializable, Cloneable, Comparable<HBReq> {
  private static final TStruct STRUCT_DESC = new TStruct("HBReq");
  private static final TField ROLE_FIELD_DESC = new TField("role", TType.I32, (short)1);
  private static final TField HOST_FIELD_DESC = new TField("host", TType.STRUCT, (short)2);
  private static final TField CLUSTER_ID_FIELD_DESC = new TField("cluster_id", TType.I64, (short)3);
  private static final TField LEADER_PART_IDS_FIELD_DESC = new TField("leader_partIds", TType.MAP, (short)4);
  private static final TField GIT_INFO_SHA_FIELD_DESC = new TField("git_info_sha", TType.STRING, (short)5);
  private static final TField VERSION_FIELD_DESC = new TField("version", TType.STRING, (short)6);

  /**
   * 
   * @see HostRole
   */
  public HostRole role;
  public com.vesoft.nebula.HostAddr host;
  public long cluster_id;
  public Map<Integer,List<LeaderInfo>> leader_partIds;
  public byte[] git_info_sha;
  public byte[] version;
  public static final int ROLE = 1;
  public static final int HOST = 2;
  public static final int CLUSTER_ID = 3;
  public static final int LEADER_PARTIDS = 4;
  public static final int GIT_INFO_SHA = 5;
  public static final int VERSION = 6;

  // isset id assignments
  private static final int __CLUSTER_ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ROLE, new FieldMetaData("role", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(HOST, new FieldMetaData("host", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(CLUSTER_ID, new FieldMetaData("cluster_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LEADER_PARTIDS, new FieldMetaData("leader_partIds", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, LeaderInfo.class)))));
    tmpMetaDataMap.put(GIT_INFO_SHA, new FieldMetaData("git_info_sha", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(VERSION, new FieldMetaData("version", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(HBReq.class, metaDataMap);
  }

  public HBReq() {
  }

  public HBReq(
      HostRole role,
      com.vesoft.nebula.HostAddr host,
      long cluster_id,
      byte[] git_info_sha) {
    this();
    this.role = role;
    this.host = host;
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    this.git_info_sha = git_info_sha;
  }

  public HBReq(
      HostRole role,
      com.vesoft.nebula.HostAddr host,
      long cluster_id,
      Map<Integer,List<LeaderInfo>> leader_partIds,
      byte[] git_info_sha,
      byte[] version) {
    this();
    this.role = role;
    this.host = host;
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    this.leader_partIds = leader_partIds;
    this.git_info_sha = git_info_sha;
    this.version = version;
  }

  public static class Builder {
    private HostRole role;
    private com.vesoft.nebula.HostAddr host;
    private long cluster_id;
    private Map<Integer,List<LeaderInfo>> leader_partIds;
    private byte[] git_info_sha;
    private byte[] version;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setRole(final HostRole role) {
      this.role = role;
      return this;
    }

    public Builder setHost(final com.vesoft.nebula.HostAddr host) {
      this.host = host;
      return this;
    }

    public Builder setCluster_id(final long cluster_id) {
      this.cluster_id = cluster_id;
      __optional_isset.set(__CLUSTER_ID_ISSET_ID, true);
      return this;
    }

    public Builder setLeader_partIds(final Map<Integer,List<LeaderInfo>> leader_partIds) {
      this.leader_partIds = leader_partIds;
      return this;
    }

    public Builder setGit_info_sha(final byte[] git_info_sha) {
      this.git_info_sha = git_info_sha;
      return this;
    }

    public Builder setVersion(final byte[] version) {
      this.version = version;
      return this;
    }

    public HBReq build() {
      HBReq result = new HBReq();
      result.setRole(this.role);
      result.setHost(this.host);
      if (__optional_isset.get(__CLUSTER_ID_ISSET_ID)) {
        result.setCluster_id(this.cluster_id);
      }
      result.setLeader_partIds(this.leader_partIds);
      result.setGit_info_sha(this.git_info_sha);
      result.setVersion(this.version);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HBReq(HBReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRole()) {
      this.role = TBaseHelper.deepCopy(other.role);
    }
    if (other.isSetHost()) {
      this.host = TBaseHelper.deepCopy(other.host);
    }
    this.cluster_id = TBaseHelper.deepCopy(other.cluster_id);
    if (other.isSetLeader_partIds()) {
      this.leader_partIds = TBaseHelper.deepCopy(other.leader_partIds);
    }
    if (other.isSetGit_info_sha()) {
      this.git_info_sha = TBaseHelper.deepCopy(other.git_info_sha);
    }
    if (other.isSetVersion()) {
      this.version = TBaseHelper.deepCopy(other.version);
    }
  }

  public HBReq deepCopy() {
    return new HBReq(this);
  }

  /**
   * 
   * @see HostRole
   */
  public HostRole getRole() {
    return this.role;
  }

  /**
   * 
   * @see HostRole
   */
  public HBReq setRole(HostRole role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  // Returns true if field role is set (has been assigned a value) and false otherwise
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean __value) {
    if (!__value) {
      this.role = null;
    }
  }

  public com.vesoft.nebula.HostAddr getHost() {
    return this.host;
  }

  public HBReq setHost(com.vesoft.nebula.HostAddr host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  // Returns true if field host is set (has been assigned a value) and false otherwise
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean __value) {
    if (!__value) {
      this.host = null;
    }
  }

  public long getCluster_id() {
    return this.cluster_id;
  }

  public HBReq setCluster_id(long cluster_id) {
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    return this;
  }

  public void unsetCluster_id() {
    __isset_bit_vector.clear(__CLUSTER_ID_ISSET_ID);
  }

  // Returns true if field cluster_id is set (has been assigned a value) and false otherwise
  public boolean isSetCluster_id() {
    return __isset_bit_vector.get(__CLUSTER_ID_ISSET_ID);
  }

  public void setCluster_idIsSet(boolean __value) {
    __isset_bit_vector.set(__CLUSTER_ID_ISSET_ID, __value);
  }

  public Map<Integer,List<LeaderInfo>> getLeader_partIds() {
    return this.leader_partIds;
  }

  public HBReq setLeader_partIds(Map<Integer,List<LeaderInfo>> leader_partIds) {
    this.leader_partIds = leader_partIds;
    return this;
  }

  public void unsetLeader_partIds() {
    this.leader_partIds = null;
  }

  // Returns true if field leader_partIds is set (has been assigned a value) and false otherwise
  public boolean isSetLeader_partIds() {
    return this.leader_partIds != null;
  }

  public void setLeader_partIdsIsSet(boolean __value) {
    if (!__value) {
      this.leader_partIds = null;
    }
  }

  public byte[] getGit_info_sha() {
    return this.git_info_sha;
  }

  public HBReq setGit_info_sha(byte[] git_info_sha) {
    this.git_info_sha = git_info_sha;
    return this;
  }

  public void unsetGit_info_sha() {
    this.git_info_sha = null;
  }

  // Returns true if field git_info_sha is set (has been assigned a value) and false otherwise
  public boolean isSetGit_info_sha() {
    return this.git_info_sha != null;
  }

  public void setGit_info_shaIsSet(boolean __value) {
    if (!__value) {
      this.git_info_sha = null;
    }
  }

  public byte[] getVersion() {
    return this.version;
  }

  public HBReq setVersion(byte[] version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  // Returns true if field version is set (has been assigned a value) and false otherwise
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean __value) {
    if (!__value) {
      this.version = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ROLE:
      if (__value == null) {
        unsetRole();
      } else {
        setRole((HostRole)__value);
      }
      break;

    case HOST:
      if (__value == null) {
        unsetHost();
      } else {
        setHost((com.vesoft.nebula.HostAddr)__value);
      }
      break;

    case CLUSTER_ID:
      if (__value == null) {
        unsetCluster_id();
      } else {
        setCluster_id((Long)__value);
      }
      break;

    case LEADER_PARTIDS:
      if (__value == null) {
        unsetLeader_partIds();
      } else {
        setLeader_partIds((Map<Integer,List<LeaderInfo>>)__value);
      }
      break;

    case GIT_INFO_SHA:
      if (__value == null) {
        unsetGit_info_sha();
      } else {
        setGit_info_sha((byte[])__value);
      }
      break;

    case VERSION:
      if (__value == null) {
        unsetVersion();
      } else {
        setVersion((byte[])__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ROLE:
      return getRole();

    case HOST:
      return getHost();

    case CLUSTER_ID:
      return new Long(getCluster_id());

    case LEADER_PARTIDS:
      return getLeader_partIds();

    case GIT_INFO_SHA:
      return getGit_info_sha();

    case VERSION:
      return getVersion();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof HBReq))
      return false;
    HBReq that = (HBReq)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetRole(), that.isSetRole(), this.role, that.role)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetHost(), that.isSetHost(), this.host, that.host)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.cluster_id, that.cluster_id)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetLeader_partIds(), that.isSetLeader_partIds(), this.leader_partIds, that.leader_partIds)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetGit_info_sha(), that.isSetGit_info_sha(), this.git_info_sha, that.git_info_sha)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetVersion(), that.isSetVersion(), this.version, that.version)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {role, host, cluster_id, leader_partIds, git_info_sha, version});
  }

  @Override
  public int compareTo(HBReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(role, other.role);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(host, other.host);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCluster_id()).compareTo(other.isSetCluster_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cluster_id, other.cluster_id);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLeader_partIds()).compareTo(other.isSetLeader_partIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(leader_partIds, other.leader_partIds);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetGit_info_sha()).compareTo(other.isSetGit_info_sha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(git_info_sha, other.git_info_sha);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(version, other.version);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ROLE:
          if (__field.type == TType.I32) {
            this.role = HostRole.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case HOST:
          if (__field.type == TType.STRUCT) {
            this.host = new com.vesoft.nebula.HostAddr();
            this.host.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case CLUSTER_ID:
          if (__field.type == TType.I64) {
            this.cluster_id = iprot.readI64();
            setCluster_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LEADER_PARTIDS:
          if (__field.type == TType.MAP) {
            {
              TMap _map140 = iprot.readMapBegin();
              this.leader_partIds = new HashMap<Integer,List<LeaderInfo>>(Math.max(0, 2*_map140.size));
              for (int _i141 = 0; 
                   (_map140.size < 0) ? iprot.peekMap() : (_i141 < _map140.size); 
                   ++_i141)
              {
                int _key142;
                List<LeaderInfo> _val143;
                _key142 = iprot.readI32();
                {
                  TList _list144 = iprot.readListBegin();
                  _val143 = new ArrayList<LeaderInfo>(Math.max(0, _list144.size));
                  for (int _i145 = 0; 
                       (_list144.size < 0) ? iprot.peekList() : (_i145 < _list144.size); 
                       ++_i145)
                  {
                    LeaderInfo _elem146;
                    _elem146 = new LeaderInfo();
                    _elem146.read(iprot);
                    _val143.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                this.leader_partIds.put(_key142, _val143);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case GIT_INFO_SHA:
          if (__field.type == TType.STRING) {
            this.git_info_sha = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case VERSION:
          if (__field.type == TType.STRING) {
            this.version = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.role != null) {
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(this.role == null ? 0 : this.role.getValue());
      oprot.writeFieldEnd();
    }
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      this.host.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
    oprot.writeI64(this.cluster_id);
    oprot.writeFieldEnd();
    if (this.leader_partIds != null) {
      if (isSetLeader_partIds()) {
        oprot.writeFieldBegin(LEADER_PART_IDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.leader_partIds.size()));
          for (Map.Entry<Integer, List<LeaderInfo>> _iter147 : this.leader_partIds.entrySet())          {
            oprot.writeI32(_iter147.getKey());
            {
              oprot.writeListBegin(new TList(TType.STRUCT, _iter147.getValue().size()));
              for (LeaderInfo _iter148 : _iter147.getValue())              {
                _iter148.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.git_info_sha != null) {
      oprot.writeFieldBegin(GIT_INFO_SHA_FIELD_DESC);
      oprot.writeBinary(this.git_info_sha);
      oprot.writeFieldEnd();
    }
    if (this.version != null) {
      if (isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeBinary(this.version);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("HBReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("role");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getRole() == null) {
      sb.append("null");
    } else {
      String role_name = this.getRole() == null ? "null" : this.getRole().name();
      if (role_name != null) {
        sb.append(role_name);
        sb.append(" (");
      }
      sb.append(this.getRole());
      if (role_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("host");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getHost() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getHost(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("cluster_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getCluster_id(), indent + 1, prettyPrint));
    first = false;
    if (isSetLeader_partIds())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("leader_partIds");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getLeader_partIds() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getLeader_partIds(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("git_info_sha");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getGit_info_sha() == null) {
      sb.append("null");
    } else {
        int __git_info_sha_size = Math.min(this.getGit_info_sha().length, 128);
        for (int i = 0; i < __git_info_sha_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getGit_info_sha()[i]).length() > 1 ? Integer.toHexString(this.getGit_info_sha()[i]).substring(Integer.toHexString(this.getGit_info_sha()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getGit_info_sha()[i]).toUpperCase());
        }
        if (this.getGit_info_sha().length > 128) sb.append(" ...");
    }
    first = false;
    if (isSetVersion())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("version");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getVersion() == null) {
        sb.append("null");
      } else {
          int __version_size = Math.min(this.getVersion().length, 128);
          for (int i = 0; i < __version_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getVersion()[i]).length() > 1 ? Integer.toHexString(this.getVersion()[i]).substring(Integer.toHexString(this.getVersion()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getVersion()[i]).toUpperCase());
          }
          if (this.getVersion().length > 128) sb.append(" ...");
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

