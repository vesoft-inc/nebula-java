/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class HBReq implements TBase, java.io.Serializable, Cloneable, Comparable<HBReq> {
  private static final TStruct STRUCT_DESC = new TStruct("HBReq");
  private static final TField ROLE_FIELD_DESC = new TField("role", TType.I32, (short)1);
  private static final TField HOST_FIELD_DESC = new TField("host", TType.STRUCT, (short)2);
  private static final TField CLUSTER_ID_FIELD_DESC = new TField("cluster_id", TType.I64, (short)3);
  private static final TField LEADER_PART_IDS_FIELD_DESC = new TField("leader_partIds", TType.MAP, (short)4);
  private static final TField GIT_INFO_SHA_FIELD_DESC = new TField("git_info_sha", TType.STRING, (short)5);

  /**
   * 
   * @see HostRole
   */
  public int role;
  public com.vesoft.nebula.HostAddr host;
  public long cluster_id;
  public Map<Integer,List<Integer>> leader_partIds;
  public byte[] git_info_sha;
  public static final int ROLE = 1;
  public static final int HOST = 2;
  public static final int CLUSTER_ID = 3;
  public static final int LEADER_PARTIDS = 4;
  public static final int GIT_INFO_SHA = 5;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __ROLE_ISSET_ID = 0;
  private static final int __CLUSTER_ID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ROLE, new FieldMetaData("role", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(HOST, new FieldMetaData("host", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(CLUSTER_ID, new FieldMetaData("cluster_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LEADER_PARTIDS, new FieldMetaData("leader_partIds", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(GIT_INFO_SHA, new FieldMetaData("git_info_sha", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(HBReq.class, metaDataMap);
  }

  public HBReq() {
  }

  public HBReq(
    int role,
    com.vesoft.nebula.HostAddr host,
    long cluster_id,
    byte[] git_info_sha)
  {
    this();
    this.role = role;
    setRoleIsSet(true);
    this.host = host;
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    this.git_info_sha = git_info_sha;
  }

  public HBReq(
    int role,
    com.vesoft.nebula.HostAddr host,
    long cluster_id,
    Map<Integer,List<Integer>> leader_partIds,
    byte[] git_info_sha)
  {
    this();
    this.role = role;
    setRoleIsSet(true);
    this.host = host;
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    this.leader_partIds = leader_partIds;
    this.git_info_sha = git_info_sha;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HBReq(HBReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.role = TBaseHelper.deepCopy(other.role);
    if (other.isSetHost()) {
      this.host = TBaseHelper.deepCopy(other.host);
    }
    this.cluster_id = TBaseHelper.deepCopy(other.cluster_id);
    if (other.isSetLeader_partIds()) {
      this.leader_partIds = TBaseHelper.deepCopy(other.leader_partIds);
    }
    if (other.isSetGit_info_sha()) {
      this.git_info_sha = TBaseHelper.deepCopy(other.git_info_sha);
    }
  }

  public HBReq deepCopy() {
    return new HBReq(this);
  }

  @Deprecated
  public HBReq clone() {
    return new HBReq(this);
  }

  /**
   * 
   * @see HostRole
   */
  public int  getRole() {
    return this.role;
  }

  /**
   * 
   * @see HostRole
   */
  public HBReq setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bit_vector.clear(__ROLE_ISSET_ID);
  }

  // Returns true if field role is set (has been assigned a value) and false otherwise
  public boolean isSetRole() {
    return __isset_bit_vector.get(__ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bit_vector.set(__ROLE_ISSET_ID, value);
  }

  public com.vesoft.nebula.HostAddr  getHost() {
    return this.host;
  }

  public HBReq setHost(com.vesoft.nebula.HostAddr host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  // Returns true if field host is set (has been assigned a value) and false otherwise
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public long  getCluster_id() {
    return this.cluster_id;
  }

  public HBReq setCluster_id(long cluster_id) {
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    return this;
  }

  public void unsetCluster_id() {
    __isset_bit_vector.clear(__CLUSTER_ID_ISSET_ID);
  }

  // Returns true if field cluster_id is set (has been assigned a value) and false otherwise
  public boolean isSetCluster_id() {
    return __isset_bit_vector.get(__CLUSTER_ID_ISSET_ID);
  }

  public void setCluster_idIsSet(boolean value) {
    __isset_bit_vector.set(__CLUSTER_ID_ISSET_ID, value);
  }

  public Map<Integer,List<Integer>>  getLeader_partIds() {
    return this.leader_partIds;
  }

  public HBReq setLeader_partIds(Map<Integer,List<Integer>> leader_partIds) {
    this.leader_partIds = leader_partIds;
    return this;
  }

  public void unsetLeader_partIds() {
    this.leader_partIds = null;
  }

  // Returns true if field leader_partIds is set (has been assigned a value) and false otherwise
  public boolean isSetLeader_partIds() {
    return this.leader_partIds != null;
  }

  public void setLeader_partIdsIsSet(boolean value) {
    if (!value) {
      this.leader_partIds = null;
    }
  }

  public byte[]  getGit_info_sha() {
    return this.git_info_sha;
  }

  public HBReq setGit_info_sha(byte[] git_info_sha) {
    this.git_info_sha = git_info_sha;
    return this;
  }

  public void unsetGit_info_sha() {
    this.git_info_sha = null;
  }

  // Returns true if field git_info_sha is set (has been assigned a value) and false otherwise
  public boolean isSetGit_info_sha() {
    return this.git_info_sha != null;
  }

  public void setGit_info_shaIsSet(boolean value) {
    if (!value) {
      this.git_info_sha = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((com.vesoft.nebula.HostAddr)value);
      }
      break;

    case CLUSTER_ID:
      if (value == null) {
        unsetCluster_id();
      } else {
        setCluster_id((Long)value);
      }
      break;

    case LEADER_PARTIDS:
      if (value == null) {
        unsetLeader_partIds();
      } else {
        setLeader_partIds((Map<Integer,List<Integer>>)value);
      }
      break;

    case GIT_INFO_SHA:
      if (value == null) {
        unsetGit_info_sha();
      } else {
        setGit_info_sha((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ROLE:
      return getRole();

    case HOST:
      return getHost();

    case CLUSTER_ID:
      return new Long(getCluster_id());

    case LEADER_PARTIDS:
      return getLeader_partIds();

    case GIT_INFO_SHA:
      return getGit_info_sha();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ROLE:
      return isSetRole();
    case HOST:
      return isSetHost();
    case CLUSTER_ID:
      return isSetCluster_id();
    case LEADER_PARTIDS:
      return isSetLeader_partIds();
    case GIT_INFO_SHA:
      return isSetGit_info_sha();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HBReq)
      return this.equals((HBReq)that);
    return false;
  }

  public boolean equals(HBReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!TBaseHelper.equalsNobinary(this.role, that.role))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!TBaseHelper.equalsNobinary(this.host, that.host))
        return false;
    }

    boolean this_present_cluster_id = true;
    boolean that_present_cluster_id = true;
    if (this_present_cluster_id || that_present_cluster_id) {
      if (!(this_present_cluster_id && that_present_cluster_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.cluster_id, that.cluster_id))
        return false;
    }

    boolean this_present_leader_partIds = true && this.isSetLeader_partIds();
    boolean that_present_leader_partIds = true && that.isSetLeader_partIds();
    if (this_present_leader_partIds || that_present_leader_partIds) {
      if (!(this_present_leader_partIds && that_present_leader_partIds))
        return false;
      if (!TBaseHelper.equalsNobinary(this.leader_partIds, that.leader_partIds))
        return false;
    }

    boolean this_present_git_info_sha = true && this.isSetGit_info_sha();
    boolean that_present_git_info_sha = true && that.isSetGit_info_sha();
    if (this_present_git_info_sha || that_present_git_info_sha) {
      if (!(this_present_git_info_sha && that_present_git_info_sha))
        return false;
      if (!TBaseHelper.equalsSlow(this.git_info_sha, that.git_info_sha))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_role = true;
    builder.append(present_role);
    if (present_role)
      builder.append(role);

    boolean present_host = true && (isSetHost());
    builder.append(present_host);
    if (present_host)
      builder.append(host);

    boolean present_cluster_id = true;
    builder.append(present_cluster_id);
    if (present_cluster_id)
      builder.append(cluster_id);

    boolean present_leader_partIds = true && (isSetLeader_partIds());
    builder.append(present_leader_partIds);
    if (present_leader_partIds)
      builder.append(leader_partIds);

    boolean present_git_info_sha = true && (isSetGit_info_sha());
    builder.append(present_git_info_sha);
    if (present_git_info_sha)
      builder.append(git_info_sha);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(HBReq other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(role, other.role);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(host, other.host);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCluster_id()).compareTo(other.isSetCluster_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cluster_id, other.cluster_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLeader_partIds()).compareTo(other.isSetLeader_partIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(leader_partIds, other.leader_partIds);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetGit_info_sha()).compareTo(other.isSetGit_info_sha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(git_info_sha, other.git_info_sha);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ROLE:
          if (field.type == TType.I32) {
            this.role = iprot.readI32();
            setRoleIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOST:
          if (field.type == TType.STRUCT) {
            this.host = new com.vesoft.nebula.HostAddr();
            this.host.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLUSTER_ID:
          if (field.type == TType.I64) {
            this.cluster_id = iprot.readI64();
            setCluster_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LEADER_PARTIDS:
          if (field.type == TType.MAP) {
            {
              TMap _map107 = iprot.readMapBegin();
              this.leader_partIds = new HashMap<Integer,List<Integer>>(Math.max(0, 2*_map107.size));
              for (int _i108 = 0; 
                   (_map107.size < 0) ? iprot.peekMap() : (_i108 < _map107.size); 
                   ++_i108)
              {
                int _key109;
                List<Integer> _val110;
                _key109 = iprot.readI32();
                {
                  TList _list111 = iprot.readListBegin();
                  _val110 = new ArrayList<Integer>(Math.max(0, _list111.size));
                  for (int _i112 = 0; 
                       (_list111.size < 0) ? iprot.peekList() : (_i112 < _list111.size); 
                       ++_i112)
                  {
                    int _elem113;
                    _elem113 = iprot.readI32();
                    _val110.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                this.leader_partIds.put(_key109, _val110);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GIT_INFO_SHA:
          if (field.type == TType.STRING) {
            this.git_info_sha = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ROLE_FIELD_DESC);
    oprot.writeI32(this.role);
    oprot.writeFieldEnd();
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      this.host.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
    oprot.writeI64(this.cluster_id);
    oprot.writeFieldEnd();
    if (this.leader_partIds != null) {
      if (isSetLeader_partIds()) {
        oprot.writeFieldBegin(LEADER_PART_IDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.leader_partIds.size()));
          for (Map.Entry<Integer, List<Integer>> _iter114 : this.leader_partIds.entrySet())          {
            oprot.writeI32(_iter114.getKey());
            {
              oprot.writeListBegin(new TList(TType.I32, _iter114.getValue().size()));
              for (int _iter115 : _iter114.getValue())              {
                oprot.writeI32(_iter115);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.git_info_sha != null) {
      oprot.writeFieldBegin(GIT_INFO_SHA_FIELD_DESC);
      oprot.writeBinary(this.git_info_sha);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("HBReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("role");
    sb.append(space);
    sb.append(":").append(space);
    String role_name = HostRole.VALUES_TO_NAMES.get(this. getRole());
    if (role_name != null) {
      sb.append(role_name);
      sb.append(" (");
    }
    sb.append(this. getRole());
    if (role_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("host");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getHost() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getHost(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("cluster_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getCluster_id(), indent + 1, prettyPrint));
    first = false;
    if (isSetLeader_partIds())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("leader_partIds");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getLeader_partIds() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getLeader_partIds(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("git_info_sha");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getGit_info_sha() == null) {
      sb.append("null");
    } else {
        int __git_info_sha_size = Math.min(this. getGit_info_sha().length, 128);
        for (int i = 0; i < __git_info_sha_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getGit_info_sha()[i]).length() > 1 ? Integer.toHexString(this. getGit_info_sha()[i]).substring(Integer.toHexString(this. getGit_info_sha()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getGit_info_sha()[i]).toUpperCase());
        }
        if (this. getGit_info_sha().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetRole() && !HostRole.VALID_VALUES.contains(role)){
      throw new TProtocolException("The field 'role' has been assigned the invalid value " + role);
    }
  }

}

