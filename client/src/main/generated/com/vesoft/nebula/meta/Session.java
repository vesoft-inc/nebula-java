/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Session implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Session");
  private static final TField SESSION_ID_FIELD_DESC = new TField("session_id", TType.I64, (short)1);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("create_time", TType.I64, (short)2);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("update_time", TType.I64, (short)3);
  private static final TField USER_NAME_FIELD_DESC = new TField("user_name", TType.STRING, (short)4);
  private static final TField SPACE_NAME_FIELD_DESC = new TField("space_name", TType.STRING, (short)5);
  private static final TField GRAPH_ADDR_FIELD_DESC = new TField("graph_addr", TType.STRUCT, (short)6);
  private static final TField TIMEZONE_FIELD_DESC = new TField("timezone", TType.I32, (short)7);
  private static final TField CLIENT_IP_FIELD_DESC = new TField("client_ip", TType.STRING, (short)8);
  private static final TField CONFIGS_FIELD_DESC = new TField("configs", TType.MAP, (short)9);

  public long session_id;
  public long create_time;
  public long update_time;
  public byte[] user_name;
  public byte[] space_name;
  public com.vesoft.nebula.HostAddr graph_addr;
  public int timezone;
  public byte[] client_ip;
  public Map<byte[],com.vesoft.nebula.Value> configs;
  public static final int SESSION_ID = 1;
  public static final int CREATE_TIME = 2;
  public static final int UPDATE_TIME = 3;
  public static final int USER_NAME = 4;
  public static final int SPACE_NAME = 5;
  public static final int GRAPH_ADDR = 6;
  public static final int TIMEZONE = 7;
  public static final int CLIENT_IP = 8;
  public static final int CONFIGS = 9;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SESSION_ID_ISSET_ID = 0;
  private static final int __CREATE_TIME_ISSET_ID = 1;
  private static final int __UPDATE_TIME_ISSET_ID = 2;
  private static final int __TIMEZONE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SESSION_ID, new FieldMetaData("session_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(CREATE_TIME, new FieldMetaData("create_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(UPDATE_TIME, new FieldMetaData("update_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(USER_NAME, new FieldMetaData("user_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(SPACE_NAME, new FieldMetaData("space_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(GRAPH_ADDR, new FieldMetaData("graph_addr", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(TIMEZONE, new FieldMetaData("timezone", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(CLIENT_IP, new FieldMetaData("client_ip", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(CONFIGS, new FieldMetaData("configs", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Session.class, metaDataMap);
  }

  public Session() {
  }

  public Session(
    long session_id,
    long create_time,
    long update_time,
    byte[] user_name,
    byte[] space_name,
    com.vesoft.nebula.HostAddr graph_addr,
    int timezone,
    byte[] client_ip,
    Map<byte[],com.vesoft.nebula.Value> configs)
  {
    this();
    this.session_id = session_id;
    setSession_idIsSet(true);
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    this.update_time = update_time;
    setUpdate_timeIsSet(true);
    this.user_name = user_name;
    this.space_name = space_name;
    this.graph_addr = graph_addr;
    this.timezone = timezone;
    setTimezoneIsSet(true);
    this.client_ip = client_ip;
    this.configs = configs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Session(Session other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.session_id = TBaseHelper.deepCopy(other.session_id);
    this.create_time = TBaseHelper.deepCopy(other.create_time);
    this.update_time = TBaseHelper.deepCopy(other.update_time);
    if (other.isSetUser_name()) {
      this.user_name = TBaseHelper.deepCopy(other.user_name);
    }
    if (other.isSetSpace_name()) {
      this.space_name = TBaseHelper.deepCopy(other.space_name);
    }
    if (other.isSetGraph_addr()) {
      this.graph_addr = TBaseHelper.deepCopy(other.graph_addr);
    }
    this.timezone = TBaseHelper.deepCopy(other.timezone);
    if (other.isSetClient_ip()) {
      this.client_ip = TBaseHelper.deepCopy(other.client_ip);
    }
    if (other.isSetConfigs()) {
      this.configs = TBaseHelper.deepCopy(other.configs);
    }
  }

  public Session deepCopy() {
    return new Session(this);
  }

  @Deprecated
  public Session clone() {
    return new Session(this);
  }

  public long  getSession_id() {
    return this.session_id;
  }

  public Session setSession_id(long session_id) {
    this.session_id = session_id;
    setSession_idIsSet(true);
    return this;
  }

  public void unsetSession_id() {
    __isset_bit_vector.clear(__SESSION_ID_ISSET_ID);
  }

  // Returns true if field session_id is set (has been assigned a value) and false otherwise
  public boolean isSetSession_id() {
    return __isset_bit_vector.get(__SESSION_ID_ISSET_ID);
  }

  public void setSession_idIsSet(boolean value) {
    __isset_bit_vector.set(__SESSION_ID_ISSET_ID, value);
  }

  public long  getCreate_time() {
    return this.create_time;
  }

  public Session setCreate_time(long create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bit_vector.clear(__CREATE_TIME_ISSET_ID);
  }

  // Returns true if field create_time is set (has been assigned a value) and false otherwise
  public boolean isSetCreate_time() {
    return __isset_bit_vector.get(__CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATE_TIME_ISSET_ID, value);
  }

  public long  getUpdate_time() {
    return this.update_time;
  }

  public Session setUpdate_time(long update_time) {
    this.update_time = update_time;
    setUpdate_timeIsSet(true);
    return this;
  }

  public void unsetUpdate_time() {
    __isset_bit_vector.clear(__UPDATE_TIME_ISSET_ID);
  }

  // Returns true if field update_time is set (has been assigned a value) and false otherwise
  public boolean isSetUpdate_time() {
    return __isset_bit_vector.get(__UPDATE_TIME_ISSET_ID);
  }

  public void setUpdate_timeIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATE_TIME_ISSET_ID, value);
  }

  public byte[]  getUser_name() {
    return this.user_name;
  }

  public Session setUser_name(byte[] user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  // Returns true if field user_name is set (has been assigned a value) and false otherwise
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean value) {
    if (!value) {
      this.user_name = null;
    }
  }

  public byte[]  getSpace_name() {
    return this.space_name;
  }

  public Session setSpace_name(byte[] space_name) {
    this.space_name = space_name;
    return this;
  }

  public void unsetSpace_name() {
    this.space_name = null;
  }

  // Returns true if field space_name is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_name() {
    return this.space_name != null;
  }

  public void setSpace_nameIsSet(boolean value) {
    if (!value) {
      this.space_name = null;
    }
  }

  public com.vesoft.nebula.HostAddr  getGraph_addr() {
    return this.graph_addr;
  }

  public Session setGraph_addr(com.vesoft.nebula.HostAddr graph_addr) {
    this.graph_addr = graph_addr;
    return this;
  }

  public void unsetGraph_addr() {
    this.graph_addr = null;
  }

  // Returns true if field graph_addr is set (has been assigned a value) and false otherwise
  public boolean isSetGraph_addr() {
    return this.graph_addr != null;
  }

  public void setGraph_addrIsSet(boolean value) {
    if (!value) {
      this.graph_addr = null;
    }
  }

  public int  getTimezone() {
    return this.timezone;
  }

  public Session setTimezone(int timezone) {
    this.timezone = timezone;
    setTimezoneIsSet(true);
    return this;
  }

  public void unsetTimezone() {
    __isset_bit_vector.clear(__TIMEZONE_ISSET_ID);
  }

  // Returns true if field timezone is set (has been assigned a value) and false otherwise
  public boolean isSetTimezone() {
    return __isset_bit_vector.get(__TIMEZONE_ISSET_ID);
  }

  public void setTimezoneIsSet(boolean value) {
    __isset_bit_vector.set(__TIMEZONE_ISSET_ID, value);
  }

  public byte[]  getClient_ip() {
    return this.client_ip;
  }

  public Session setClient_ip(byte[] client_ip) {
    this.client_ip = client_ip;
    return this;
  }

  public void unsetClient_ip() {
    this.client_ip = null;
  }

  // Returns true if field client_ip is set (has been assigned a value) and false otherwise
  public boolean isSetClient_ip() {
    return this.client_ip != null;
  }

  public void setClient_ipIsSet(boolean value) {
    if (!value) {
      this.client_ip = null;
    }
  }

  public Map<byte[],com.vesoft.nebula.Value>  getConfigs() {
    return this.configs;
  }

  public Session setConfigs(Map<byte[],com.vesoft.nebula.Value> configs) {
    this.configs = configs;
    return this;
  }

  public void unsetConfigs() {
    this.configs = null;
  }

  // Returns true if field configs is set (has been assigned a value) and false otherwise
  public boolean isSetConfigs() {
    return this.configs != null;
  }

  public void setConfigsIsSet(boolean value) {
    if (!value) {
      this.configs = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SESSION_ID:
      if (value == null) {
        unsetSession_id();
      } else {
        setSession_id((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((Long)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUser_name();
      } else {
        setUser_name((byte[])value);
      }
      break;

    case SPACE_NAME:
      if (value == null) {
        unsetSpace_name();
      } else {
        setSpace_name((byte[])value);
      }
      break;

    case GRAPH_ADDR:
      if (value == null) {
        unsetGraph_addr();
      } else {
        setGraph_addr((com.vesoft.nebula.HostAddr)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((Integer)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClient_ip();
      } else {
        setClient_ip((byte[])value);
      }
      break;

    case CONFIGS:
      if (value == null) {
        unsetConfigs();
      } else {
        setConfigs((Map<byte[],com.vesoft.nebula.Value>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SESSION_ID:
      return new Long(getSession_id());

    case CREATE_TIME:
      return new Long(getCreate_time());

    case UPDATE_TIME:
      return new Long(getUpdate_time());

    case USER_NAME:
      return getUser_name();

    case SPACE_NAME:
      return getSpace_name();

    case GRAPH_ADDR:
      return getGraph_addr();

    case TIMEZONE:
      return new Integer(getTimezone());

    case CLIENT_IP:
      return getClient_ip();

    case CONFIGS:
      return getConfigs();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SESSION_ID:
      return isSetSession_id();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case USER_NAME:
      return isSetUser_name();
    case SPACE_NAME:
      return isSetSpace_name();
    case GRAPH_ADDR:
      return isSetGraph_addr();
    case TIMEZONE:
      return isSetTimezone();
    case CLIENT_IP:
      return isSetClient_ip();
    case CONFIGS:
      return isSetConfigs();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Session)
      return this.equals((Session)that);
    return false;
  }

  public boolean equals(Session that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_session_id = true;
    boolean that_present_session_id = true;
    if (this_present_session_id || that_present_session_id) {
      if (!(this_present_session_id && that_present_session_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.session_id, that.session_id))
        return false;
    }

    boolean this_present_create_time = true;
    boolean that_present_create_time = true;
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.create_time, that.create_time))
        return false;
    }

    boolean this_present_update_time = true;
    boolean that_present_update_time = true;
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.update_time, that.update_time))
        return false;
    }

    boolean this_present_user_name = true && this.isSetUser_name();
    boolean that_present_user_name = true && that.isSetUser_name();
    if (this_present_user_name || that_present_user_name) {
      if (!(this_present_user_name && that_present_user_name))
        return false;
      if (!TBaseHelper.equalsSlow(this.user_name, that.user_name))
        return false;
    }

    boolean this_present_space_name = true && this.isSetSpace_name();
    boolean that_present_space_name = true && that.isSetSpace_name();
    if (this_present_space_name || that_present_space_name) {
      if (!(this_present_space_name && that_present_space_name))
        return false;
      if (!TBaseHelper.equalsSlow(this.space_name, that.space_name))
        return false;
    }

    boolean this_present_graph_addr = true && this.isSetGraph_addr();
    boolean that_present_graph_addr = true && that.isSetGraph_addr();
    if (this_present_graph_addr || that_present_graph_addr) {
      if (!(this_present_graph_addr && that_present_graph_addr))
        return false;
      if (!TBaseHelper.equalsNobinary(this.graph_addr, that.graph_addr))
        return false;
    }

    boolean this_present_timezone = true;
    boolean that_present_timezone = true;
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!TBaseHelper.equalsNobinary(this.timezone, that.timezone))
        return false;
    }

    boolean this_present_client_ip = true && this.isSetClient_ip();
    boolean that_present_client_ip = true && that.isSetClient_ip();
    if (this_present_client_ip || that_present_client_ip) {
      if (!(this_present_client_ip && that_present_client_ip))
        return false;
      if (!TBaseHelper.equalsSlow(this.client_ip, that.client_ip))
        return false;
    }

    boolean this_present_configs = true && this.isSetConfigs();
    boolean that_present_configs = true && that.isSetConfigs();
    if (this_present_configs || that_present_configs) {
      if (!(this_present_configs && that_present_configs))
        return false;
      if (!TBaseHelper.equalsSlow(this.configs, that.configs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_session_id = true;
    builder.append(present_session_id);
    if (present_session_id)
      builder.append(session_id);

    boolean present_create_time = true;
    builder.append(present_create_time);
    if (present_create_time)
      builder.append(create_time);

    boolean present_update_time = true;
    builder.append(present_update_time);
    if (present_update_time)
      builder.append(update_time);

    boolean present_user_name = true && (isSetUser_name());
    builder.append(present_user_name);
    if (present_user_name)
      builder.append(user_name);

    boolean present_space_name = true && (isSetSpace_name());
    builder.append(present_space_name);
    if (present_space_name)
      builder.append(space_name);

    boolean present_graph_addr = true && (isSetGraph_addr());
    builder.append(present_graph_addr);
    if (present_graph_addr)
      builder.append(graph_addr);

    boolean present_timezone = true;
    builder.append(present_timezone);
    if (present_timezone)
      builder.append(timezone);

    boolean present_client_ip = true && (isSetClient_ip());
    builder.append(present_client_ip);
    if (present_client_ip)
      builder.append(client_ip);

    boolean present_configs = true && (isSetConfigs());
    builder.append(present_configs);
    if (present_configs)
      builder.append(configs);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SESSION_ID:
          if (field.type == TType.I64) {
            this.session_id = iprot.readI64();
            setSession_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATE_TIME:
          if (field.type == TType.I64) {
            this.create_time = iprot.readI64();
            setCreate_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPDATE_TIME:
          if (field.type == TType.I64) {
            this.update_time = iprot.readI64();
            setUpdate_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USER_NAME:
          if (field.type == TType.STRING) {
            this.user_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACE_NAME:
          if (field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GRAPH_ADDR:
          if (field.type == TType.STRUCT) {
            this.graph_addr = new com.vesoft.nebula.HostAddr();
            this.graph_addr.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TIMEZONE:
          if (field.type == TType.I32) {
            this.timezone = iprot.readI32();
            setTimezoneIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLIENT_IP:
          if (field.type == TType.STRING) {
            this.client_ip = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONFIGS:
          if (field.type == TType.MAP) {
            {
              TMap _map252 = iprot.readMapBegin();
              this.configs = new HashMap<byte[],com.vesoft.nebula.Value>(Math.max(0, 2*_map252.size));
              for (int _i253 = 0; 
                   (_map252.size < 0) ? iprot.peekMap() : (_i253 < _map252.size); 
                   ++_i253)
              {
                byte[] _key254;
                com.vesoft.nebula.Value _val255;
                _key254 = iprot.readBinary();
                _val255 = new com.vesoft.nebula.Value();
                _val255.read(iprot);
                this.configs.put(_key254, _val255);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
    oprot.writeI64(this.session_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.create_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
    oprot.writeI64(this.update_time);
    oprot.writeFieldEnd();
    if (this.user_name != null) {
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeBinary(this.user_name);
      oprot.writeFieldEnd();
    }
    if (this.space_name != null) {
      oprot.writeFieldBegin(SPACE_NAME_FIELD_DESC);
      oprot.writeBinary(this.space_name);
      oprot.writeFieldEnd();
    }
    if (this.graph_addr != null) {
      oprot.writeFieldBegin(GRAPH_ADDR_FIELD_DESC);
      this.graph_addr.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
    oprot.writeI32(this.timezone);
    oprot.writeFieldEnd();
    if (this.client_ip != null) {
      oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
      oprot.writeBinary(this.client_ip);
      oprot.writeFieldEnd();
    }
    if (this.configs != null) {
      oprot.writeFieldBegin(CONFIGS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.configs.size()));
        for (Map.Entry<byte[], com.vesoft.nebula.Value> _iter256 : this.configs.entrySet())        {
          oprot.writeBinary(_iter256.getKey());
          _iter256.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Session");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("session_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSession_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("create_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getCreate_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("update_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getUpdate_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("user_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getUser_name() == null) {
      sb.append("null");
    } else {
        int __user_name_size = Math.min(this. getUser_name().length, 128);
        for (int i = 0; i < __user_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getUser_name()[i]).length() > 1 ? Integer.toHexString(this. getUser_name()[i]).substring(Integer.toHexString(this. getUser_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getUser_name()[i]).toUpperCase());
        }
        if (this. getUser_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getSpace_name() == null) {
      sb.append("null");
    } else {
        int __space_name_size = Math.min(this. getSpace_name().length, 128);
        for (int i = 0; i < __space_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getSpace_name()[i]).length() > 1 ? Integer.toHexString(this. getSpace_name()[i]).substring(Integer.toHexString(this. getSpace_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getSpace_name()[i]).toUpperCase());
        }
        if (this. getSpace_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("graph_addr");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getGraph_addr() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getGraph_addr(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("timezone");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getTimezone(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("client_ip");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getClient_ip() == null) {
      sb.append("null");
    } else {
        int __client_ip_size = Math.min(this. getClient_ip().length, 128);
        for (int i = 0; i < __client_ip_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getClient_ip()[i]).length() > 1 ? Integer.toHexString(this. getClient_ip()[i]).substring(Integer.toHexString(this. getClient_ip()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getClient_ip()[i]).toUpperCase());
        }
        if (this. getClient_ip().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("configs");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getConfigs() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getConfigs(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

