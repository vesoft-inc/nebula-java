/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class JobDesc implements TBase, java.io.Serializable, Cloneable, Comparable<JobDesc> {
  private static final TStruct STRUCT_DESC = new TStruct("JobDesc");
  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField CMD_FIELD_DESC = new TField("cmd", TType.STRING, (short)2);
  private static final TField PARAS_FIELD_DESC = new TField("paras", TType.LIST, (short)3);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)4);
  private static final TField START_TIME_FIELD_DESC = new TField("start_time", TType.I64, (short)5);
  private static final TField STOP_TIME_FIELD_DESC = new TField("stop_time", TType.I64, (short)6);

  public int id;
  public String cmd;
  public List<String> paras;
  /**
   * 
   * @see JobStatus
   */
  public int status;
  public long start_time;
  public long stop_time;
  public static final int ID = 1;
  public static final int CMD = 2;
  public static final int PARAS = 3;
  public static final int STATUS = 4;
  public static final int START_TIME = 5;
  public static final int STOP_TIME = 6;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __START_TIME_ISSET_ID = 2;
  private static final int __STOP_TIME_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(CMD, new FieldMetaData("cmd", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(PARAS, new FieldMetaData("paras", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(START_TIME, new FieldMetaData("start_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(STOP_TIME, new FieldMetaData("stop_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(JobDesc.class, metaDataMap);
  }

  public JobDesc() {
  }

  public JobDesc(
    int id,
    String cmd,
    List<String> paras,
    int status,
    long start_time,
    long stop_time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.cmd = cmd;
    this.paras = paras;
    this.status = status;
    setStatusIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.stop_time = stop_time;
    setStop_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobDesc(JobDesc other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = TBaseHelper.deepCopy(other.id);
    if (other.isSetCmd()) {
      this.cmd = TBaseHelper.deepCopy(other.cmd);
    }
    if (other.isSetParas()) {
      this.paras = TBaseHelper.deepCopy(other.paras);
    }
    this.status = TBaseHelper.deepCopy(other.status);
    this.start_time = TBaseHelper.deepCopy(other.start_time);
    this.stop_time = TBaseHelper.deepCopy(other.stop_time);
  }

  public JobDesc deepCopy() {
    return new JobDesc(this);
  }

  @Deprecated
  public JobDesc clone() {
    return new JobDesc(this);
  }

  public int  getId() {
    return this.id;
  }

  public JobDesc setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String  getCmd() {
    return this.cmd;
  }

  public JobDesc setCmd(String cmd) {
    this.cmd = cmd;
    return this;
  }

  public void unsetCmd() {
    this.cmd = null;
  }

  // Returns true if field cmd is set (has been assigned a value) and false otherwise
  public boolean isSetCmd() {
    return this.cmd != null;
  }

  public void setCmdIsSet(boolean value) {
    if (!value) {
      this.cmd = null;
    }
  }

  public List<String>  getParas() {
    return this.paras;
  }

  public JobDesc setParas(List<String> paras) {
    this.paras = paras;
    return this;
  }

  public void unsetParas() {
    this.paras = null;
  }

  // Returns true if field paras is set (has been assigned a value) and false otherwise
  public boolean isSetParas() {
    return this.paras != null;
  }

  public void setParasIsSet(boolean value) {
    if (!value) {
      this.paras = null;
    }
  }

  /**
   * 
   * @see JobStatus
   */
  public int  getStatus() {
    return this.status;
  }

  /**
   * 
   * @see JobStatus
   */
  public JobDesc setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public long  getStart_time() {
    return this.start_time;
  }

  public JobDesc setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bit_vector.clear(__START_TIME_ISSET_ID);
  }

  // Returns true if field start_time is set (has been assigned a value) and false otherwise
  public boolean isSetStart_time() {
    return __isset_bit_vector.get(__START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bit_vector.set(__START_TIME_ISSET_ID, value);
  }

  public long  getStop_time() {
    return this.stop_time;
  }

  public JobDesc setStop_time(long stop_time) {
    this.stop_time = stop_time;
    setStop_timeIsSet(true);
    return this;
  }

  public void unsetStop_time() {
    __isset_bit_vector.clear(__STOP_TIME_ISSET_ID);
  }

  // Returns true if field stop_time is set (has been assigned a value) and false otherwise
  public boolean isSetStop_time() {
    return __isset_bit_vector.get(__STOP_TIME_ISSET_ID);
  }

  public void setStop_timeIsSet(boolean value) {
    __isset_bit_vector.set(__STOP_TIME_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case CMD:
      if (value == null) {
        unsetCmd();
      } else {
        setCmd((String)value);
      }
      break;

    case PARAS:
      if (value == null) {
        unsetParas();
      } else {
        setParas((List<String>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((Long)value);
      }
      break;

    case STOP_TIME:
      if (value == null) {
        unsetStop_time();
      } else {
        setStop_time((Long)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ID:
      return new Integer(getId());

    case CMD:
      return getCmd();

    case PARAS:
      return getParas();

    case STATUS:
      return getStatus();

    case START_TIME:
      return new Long(getStart_time());

    case STOP_TIME:
      return new Long(getStop_time());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ID:
      return isSetId();
    case CMD:
      return isSetCmd();
    case PARAS:
      return isSetParas();
    case STATUS:
      return isSetStatus();
    case START_TIME:
      return isSetStart_time();
    case STOP_TIME:
      return isSetStop_time();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobDesc)
      return this.equals((JobDesc)that);
    return false;
  }

  public boolean equals(JobDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.id, that.id))
        return false;
    }

    boolean this_present_cmd = true && this.isSetCmd();
    boolean that_present_cmd = true && that.isSetCmd();
    if (this_present_cmd || that_present_cmd) {
      if (!(this_present_cmd && that_present_cmd))
        return false;
      if (!TBaseHelper.equalsNobinary(this.cmd, that.cmd))
        return false;
    }

    boolean this_present_paras = true && this.isSetParas();
    boolean that_present_paras = true && that.isSetParas();
    if (this_present_paras || that_present_paras) {
      if (!(this_present_paras && that_present_paras))
        return false;
      if (!TBaseHelper.equalsNobinary(this.paras, that.paras))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!TBaseHelper.equalsNobinary(this.status, that.status))
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.start_time, that.start_time))
        return false;
    }

    boolean this_present_stop_time = true;
    boolean that_present_stop_time = true;
    if (this_present_stop_time || that_present_stop_time) {
      if (!(this_present_stop_time && that_present_stop_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stop_time, that.stop_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_cmd = true && (isSetCmd());
    builder.append(present_cmd);
    if (present_cmd)
      builder.append(cmd);

    boolean present_paras = true && (isSetParas());
    builder.append(present_paras);
    if (present_paras)
      builder.append(paras);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_start_time = true;
    builder.append(present_start_time);
    if (present_start_time)
      builder.append(start_time);

    boolean present_stop_time = true;
    builder.append(present_stop_time);
    if (present_stop_time)
      builder.append(stop_time);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(JobDesc other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id, other.id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCmd()).compareTo(other.isSetCmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cmd, other.cmd);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetParas()).compareTo(other.isSetParas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(paras, other.paras);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(start_time, other.start_time);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStop_time()).compareTo(other.isSetStop_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stop_time, other.stop_time);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ID:
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CMD:
          if (field.type == TType.STRING) {
            this.cmd = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAS:
          if (field.type == TType.LIST) {
            {
              TList _list22 = iprot.readListBegin();
              this.paras = new ArrayList<String>(Math.max(0, _list22.size));
              for (int _i23 = 0; 
                   (_list22.size < 0) ? iprot.peekList() : (_i23 < _list22.size); 
                   ++_i23)
              {
                String _elem24;
                _elem24 = iprot.readString();
                this.paras.add(_elem24);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_TIME:
          if (field.type == TType.I64) {
            this.start_time = iprot.readI64();
            setStart_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STOP_TIME:
          if (field.type == TType.I64) {
            this.stop_time = iprot.readI64();
            setStop_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.cmd != null) {
      oprot.writeFieldBegin(CMD_FIELD_DESC);
      oprot.writeString(this.cmd);
      oprot.writeFieldEnd();
    }
    if (this.paras != null) {
      oprot.writeFieldBegin(PARAS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.paras.size()));
        for (String _iter25 : this.paras)        {
          oprot.writeString(_iter25);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(START_TIME_FIELD_DESC);
    oprot.writeI64(this.start_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
    oprot.writeI64(this.stop_time);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("JobDesc");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getId(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("cmd");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getCmd() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getCmd(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("paras");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getParas() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getParas(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    String status_name = JobStatus.VALUES_TO_NAMES.get(this. getStatus());
    if (status_name != null) {
      sb.append(status_name);
      sb.append(" (");
    }
    sb.append(this. getStatus());
    if (status_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("start_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getStart_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("stop_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getStop_time(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !JobStatus.VALID_VALUES.contains(status)){
      throw new TProtocolException("The field 'status' has been assigned the invalid value " + status);
    }
  }

}

