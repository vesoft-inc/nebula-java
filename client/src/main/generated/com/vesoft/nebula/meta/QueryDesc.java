/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class QueryDesc implements TBase, java.io.Serializable, Cloneable, Comparable<QueryDesc> {
  private static final TStruct STRUCT_DESC = new TStruct("QueryDesc");
  private static final TField START_TIME_FIELD_DESC = new TField("start_time", TType.I64, (short)1);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)2);
  private static final TField DURATION_FIELD_DESC = new TField("duration", TType.I64, (short)3);
  private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)4);
  private static final TField GRAPH_ADDR_FIELD_DESC = new TField("graph_addr", TType.STRUCT, (short)5);

  public long start_time;
  /**
   * 
   * @see QueryStatus
   */
  public QueryStatus status;
  public long duration;
  public byte[] query;
  public com.vesoft.nebula.HostAddr graph_addr;
  public static final int START_TIME = 1;
  public static final int STATUS = 2;
  public static final int DURATION = 3;
  public static final int QUERY = 4;
  public static final int GRAPH_ADDR = 5;

  // isset id assignments
  private static final int __START_TIME_ISSET_ID = 0;
  private static final int __DURATION_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(START_TIME, new FieldMetaData("start_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(DURATION, new FieldMetaData("duration", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(QUERY, new FieldMetaData("query", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(GRAPH_ADDR, new FieldMetaData("graph_addr", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(QueryDesc.class, metaDataMap);
  }

  public QueryDesc() {
  }

  public QueryDesc(
      long start_time,
      QueryStatus status,
      long duration,
      byte[] query,
      com.vesoft.nebula.HostAddr graph_addr) {
    this();
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.status = status;
    this.duration = duration;
    setDurationIsSet(true);
    this.query = query;
    this.graph_addr = graph_addr;
  }

  public static class Builder {
    private long start_time;
    private QueryStatus status;
    private long duration;
    private byte[] query;
    private com.vesoft.nebula.HostAddr graph_addr;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setStart_time(final long start_time) {
      this.start_time = start_time;
      __optional_isset.set(__START_TIME_ISSET_ID, true);
      return this;
    }

    public Builder setStatus(final QueryStatus status) {
      this.status = status;
      return this;
    }

    public Builder setDuration(final long duration) {
      this.duration = duration;
      __optional_isset.set(__DURATION_ISSET_ID, true);
      return this;
    }

    public Builder setQuery(final byte[] query) {
      this.query = query;
      return this;
    }

    public Builder setGraph_addr(final com.vesoft.nebula.HostAddr graph_addr) {
      this.graph_addr = graph_addr;
      return this;
    }

    public QueryDesc build() {
      QueryDesc result = new QueryDesc();
      if (__optional_isset.get(__START_TIME_ISSET_ID)) {
        result.setStart_time(this.start_time);
      }
      result.setStatus(this.status);
      if (__optional_isset.get(__DURATION_ISSET_ID)) {
        result.setDuration(this.duration);
      }
      result.setQuery(this.query);
      result.setGraph_addr(this.graph_addr);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryDesc(QueryDesc other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.start_time = TBaseHelper.deepCopy(other.start_time);
    if (other.isSetStatus()) {
      this.status = TBaseHelper.deepCopy(other.status);
    }
    this.duration = TBaseHelper.deepCopy(other.duration);
    if (other.isSetQuery()) {
      this.query = TBaseHelper.deepCopy(other.query);
    }
    if (other.isSetGraph_addr()) {
      this.graph_addr = TBaseHelper.deepCopy(other.graph_addr);
    }
  }

  public QueryDesc deepCopy() {
    return new QueryDesc(this);
  }

  public long getStart_time() {
    return this.start_time;
  }

  public QueryDesc setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bit_vector.clear(__START_TIME_ISSET_ID);
  }

  // Returns true if field start_time is set (has been assigned a value) and false otherwise
  public boolean isSetStart_time() {
    return __isset_bit_vector.get(__START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean __value) {
    __isset_bit_vector.set(__START_TIME_ISSET_ID, __value);
  }

  /**
   * 
   * @see QueryStatus
   */
  public QueryStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see QueryStatus
   */
  public QueryDesc setStatus(QueryStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean __value) {
    if (!__value) {
      this.status = null;
    }
  }

  public long getDuration() {
    return this.duration;
  }

  public QueryDesc setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bit_vector.clear(__DURATION_ISSET_ID);
  }

  // Returns true if field duration is set (has been assigned a value) and false otherwise
  public boolean isSetDuration() {
    return __isset_bit_vector.get(__DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean __value) {
    __isset_bit_vector.set(__DURATION_ISSET_ID, __value);
  }

  public byte[] getQuery() {
    return this.query;
  }

  public QueryDesc setQuery(byte[] query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  // Returns true if field query is set (has been assigned a value) and false otherwise
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean __value) {
    if (!__value) {
      this.query = null;
    }
  }

  public com.vesoft.nebula.HostAddr getGraph_addr() {
    return this.graph_addr;
  }

  public QueryDesc setGraph_addr(com.vesoft.nebula.HostAddr graph_addr) {
    this.graph_addr = graph_addr;
    return this;
  }

  public void unsetGraph_addr() {
    this.graph_addr = null;
  }

  // Returns true if field graph_addr is set (has been assigned a value) and false otherwise
  public boolean isSetGraph_addr() {
    return this.graph_addr != null;
  }

  public void setGraph_addrIsSet(boolean __value) {
    if (!__value) {
      this.graph_addr = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case START_TIME:
      if (__value == null) {
        unsetStart_time();
      } else {
        setStart_time((Long)__value);
      }
      break;

    case STATUS:
      if (__value == null) {
        unsetStatus();
      } else {
        setStatus((QueryStatus)__value);
      }
      break;

    case DURATION:
      if (__value == null) {
        unsetDuration();
      } else {
        setDuration((Long)__value);
      }
      break;

    case QUERY:
      if (__value == null) {
        unsetQuery();
      } else {
        setQuery((byte[])__value);
      }
      break;

    case GRAPH_ADDR:
      if (__value == null) {
        unsetGraph_addr();
      } else {
        setGraph_addr((com.vesoft.nebula.HostAddr)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case START_TIME:
      return new Long(getStart_time());

    case STATUS:
      return getStatus();

    case DURATION:
      return new Long(getDuration());

    case QUERY:
      return getQuery();

    case GRAPH_ADDR:
      return getGraph_addr();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof QueryDesc))
      return false;
    QueryDesc that = (QueryDesc)_that;

    if (!TBaseHelper.equalsNobinary(this.start_time, that.start_time)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStatus(), that.isSetStatus(), this.status, that.status)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.duration, that.duration)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetQuery(), that.isSetQuery(), this.query, that.query)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetGraph_addr(), that.isSetGraph_addr(), this.graph_addr, that.graph_addr)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {start_time, status, duration, query, graph_addr});
  }

  @Override
  public int compareTo(QueryDesc other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(start_time, other.start_time);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(duration, other.duration);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(query, other.query);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetGraph_addr()).compareTo(other.isSetGraph_addr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(graph_addr, other.graph_addr);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case START_TIME:
          if (__field.type == TType.I64) {
            this.start_time = iprot.readI64();
            setStart_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STATUS:
          if (__field.type == TType.I32) {
            this.status = QueryStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DURATION:
          if (__field.type == TType.I64) {
            this.duration = iprot.readI64();
            setDurationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case QUERY:
          if (__field.type == TType.STRING) {
            this.query = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case GRAPH_ADDR:
          if (__field.type == TType.STRUCT) {
            this.graph_addr = new com.vesoft.nebula.HostAddr();
            this.graph_addr.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(START_TIME_FIELD_DESC);
    oprot.writeI64(this.start_time);
    oprot.writeFieldEnd();
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status == null ? 0 : this.status.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DURATION_FIELD_DESC);
    oprot.writeI64(this.duration);
    oprot.writeFieldEnd();
    if (this.query != null) {
      oprot.writeFieldBegin(QUERY_FIELD_DESC);
      oprot.writeBinary(this.query);
      oprot.writeFieldEnd();
    }
    if (this.graph_addr != null) {
      oprot.writeFieldBegin(GRAPH_ADDR_FIELD_DESC);
      this.graph_addr.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("QueryDesc");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("start_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getStart_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStatus() == null) {
      sb.append("null");
    } else {
      String status_name = this.getStatus() == null ? "null" : this.getStatus().name();
      if (status_name != null) {
        sb.append(status_name);
        sb.append(" (");
      }
      sb.append(this.getStatus());
      if (status_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("duration");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getDuration(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("query");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getQuery() == null) {
      sb.append("null");
    } else {
        int __query_size = Math.min(this.getQuery().length, 128);
        for (int i = 0; i < __query_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getQuery()[i]).length() > 1 ? Integer.toHexString(this.getQuery()[i]).substring(Integer.toHexString(this.getQuery()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getQuery()[i]).toUpperCase());
        }
        if (this.getQuery().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("graph_addr");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getGraph_addr() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getGraph_addr(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

