/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class CreateTagReq implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CreateTagReq");
  private static final TField SPACE_ID_FIELD_DESC = new TField("space_id", TType.I32, (short)1);
  private static final TField TAG_NAME_FIELD_DESC = new TField("tag_name", TType.STRING, (short)2);
  private static final TField SCHEMA_FIELD_DESC = new TField("schema", TType.STRUCT, (short)3);
  private static final TField IF_NOT_EXISTS_FIELD_DESC = new TField("if_not_exists", TType.BOOL, (short)4);

  public int space_id;
  public String tag_name;
  public com.vesoft.nebula.Schema schema;
  public boolean if_not_exists;
  public static final int SPACE_ID = 1;
  public static final int TAG_NAME = 2;
  public static final int SCHEMA = 3;
  public static final int IF_NOT_EXISTS = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SPACE_ID_ISSET_ID = 0;
  private static final int __IF_NOT_EXISTS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE_ID, new FieldMetaData("space_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TAG_NAME, new FieldMetaData("tag_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(SCHEMA, new FieldMetaData("schema", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Schema.class)));
    tmpMetaDataMap.put(IF_NOT_EXISTS, new FieldMetaData("if_not_exists", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(CreateTagReq.class, metaDataMap);
  }

  public CreateTagReq() {
  }

  public CreateTagReq(
    int space_id,
    String tag_name,
    com.vesoft.nebula.Schema schema,
    boolean if_not_exists)
  {
    this();
    this.space_id = space_id;
    setSpace_idIsSet(true);
    this.tag_name = tag_name;
    this.schema = schema;
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateTagReq(CreateTagReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.space_id = TBaseHelper.deepCopy(other.space_id);
    if (other.isSetTag_name()) {
      this.tag_name = TBaseHelper.deepCopy(other.tag_name);
    }
    if (other.isSetSchema()) {
      this.schema = TBaseHelper.deepCopy(other.schema);
    }
    this.if_not_exists = TBaseHelper.deepCopy(other.if_not_exists);
  }

  public CreateTagReq deepCopy() {
    return new CreateTagReq(this);
  }

  @Deprecated
  public CreateTagReq clone() {
    return new CreateTagReq(this);
  }

  public int  getSpace_id() {
    return this.space_id;
  }

  public CreateTagReq setSpace_id(int space_id) {
    this.space_id = space_id;
    setSpace_idIsSet(true);
    return this;
  }

  public void unsetSpace_id() {
    __isset_bit_vector.clear(__SPACE_ID_ISSET_ID);
  }

  // Returns true if field space_id is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_id() {
    return __isset_bit_vector.get(__SPACE_ID_ISSET_ID);
  }

  public void setSpace_idIsSet(boolean value) {
    __isset_bit_vector.set(__SPACE_ID_ISSET_ID, value);
  }

  public String  getTag_name() {
    return this.tag_name;
  }

  public CreateTagReq setTag_name(String tag_name) {
    this.tag_name = tag_name;
    return this;
  }

  public void unsetTag_name() {
    this.tag_name = null;
  }

  // Returns true if field tag_name is set (has been assigned a value) and false otherwise
  public boolean isSetTag_name() {
    return this.tag_name != null;
  }

  public void setTag_nameIsSet(boolean value) {
    if (!value) {
      this.tag_name = null;
    }
  }

  public com.vesoft.nebula.Schema  getSchema() {
    return this.schema;
  }

  public CreateTagReq setSchema(com.vesoft.nebula.Schema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  // Returns true if field schema is set (has been assigned a value) and false otherwise
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public boolean  isIf_not_exists() {
    return this.if_not_exists;
  }

  public CreateTagReq setIf_not_exists(boolean if_not_exists) {
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
    return this;
  }

  public void unsetIf_not_exists() {
    __isset_bit_vector.clear(__IF_NOT_EXISTS_ISSET_ID);
  }

  // Returns true if field if_not_exists is set (has been assigned a value) and false otherwise
  public boolean isSetIf_not_exists() {
    return __isset_bit_vector.get(__IF_NOT_EXISTS_ISSET_ID);
  }

  public void setIf_not_existsIsSet(boolean value) {
    __isset_bit_vector.set(__IF_NOT_EXISTS_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SPACE_ID:
      if (value == null) {
        unsetSpace_id();
      } else {
        setSpace_id((Integer)value);
      }
      break;

    case TAG_NAME:
      if (value == null) {
        unsetTag_name();
      } else {
        setTag_name((String)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((com.vesoft.nebula.Schema)value);
      }
      break;

    case IF_NOT_EXISTS:
      if (value == null) {
        unsetIf_not_exists();
      } else {
        setIf_not_exists((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return new Integer(getSpace_id());

    case TAG_NAME:
      return getTag_name();

    case SCHEMA:
      return getSchema();

    case IF_NOT_EXISTS:
      return new Boolean(isIf_not_exists());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return isSetSpace_id();
    case TAG_NAME:
      return isSetTag_name();
    case SCHEMA:
      return isSetSchema();
    case IF_NOT_EXISTS:
      return isSetIf_not_exists();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateTagReq)
      return this.equals((CreateTagReq)that);
    return false;
  }

  public boolean equals(CreateTagReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_space_id = true;
    boolean that_present_space_id = true;
    if (this_present_space_id || that_present_space_id) {
      if (!(this_present_space_id && that_present_space_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.space_id, that.space_id))
        return false;
    }

    boolean this_present_tag_name = true && this.isSetTag_name();
    boolean that_present_tag_name = true && that.isSetTag_name();
    if (this_present_tag_name || that_present_tag_name) {
      if (!(this_present_tag_name && that_present_tag_name))
        return false;
      if (!TBaseHelper.equalsNobinary(this.tag_name, that.tag_name))
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!TBaseHelper.equalsNobinary(this.schema, that.schema))
        return false;
    }

    boolean this_present_if_not_exists = true;
    boolean that_present_if_not_exists = true;
    if (this_present_if_not_exists || that_present_if_not_exists) {
      if (!(this_present_if_not_exists && that_present_if_not_exists))
        return false;
      if (!TBaseHelper.equalsNobinary(this.if_not_exists, that.if_not_exists))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_space_id = true;
    builder.append(present_space_id);
    if (present_space_id)
      builder.append(space_id);

    boolean present_tag_name = true && (isSetTag_name());
    builder.append(present_tag_name);
    if (present_tag_name)
      builder.append(tag_name);

    boolean present_schema = true && (isSetSchema());
    builder.append(present_schema);
    if (present_schema)
      builder.append(schema);

    boolean present_if_not_exists = true;
    builder.append(present_if_not_exists);
    if (present_if_not_exists)
      builder.append(if_not_exists);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            setSpace_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_NAME:
          if (field.type == TType.STRING) {
            this.tag_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA:
          if (field.type == TType.STRUCT) {
            this.schema = new com.vesoft.nebula.Schema();
            this.schema.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IF_NOT_EXISTS:
          if (field.type == TType.BOOL) {
            this.if_not_exists = iprot.readBool();
            setIf_not_existsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.tag_name != null) {
      oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
      oprot.writeString(this.tag_name);
      oprot.writeFieldEnd();
    }
    if (this.schema != null) {
      oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
      this.schema.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IF_NOT_EXISTS_FIELD_DESC);
    oprot.writeBool(this.if_not_exists);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("CreateTagReq");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("space_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSpace_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("tag_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTag_name() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTag_name(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("schema");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getSchema() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getSchema(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("if_not_exists");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isIf_not_exists(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

