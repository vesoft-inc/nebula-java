/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class HostItem implements TBase, java.io.Serializable, Cloneable, Comparable<HostItem> {
  private static final TStruct STRUCT_DESC = new TStruct("HostItem");
  private static final TField HOST_ADDR_FIELD_DESC = new TField("hostAddr", TType.STRUCT, (short)1);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)2);
  private static final TField LEADER_PARTS_FIELD_DESC = new TField("leader_parts", TType.MAP, (short)3);
  private static final TField ALL_PARTS_FIELD_DESC = new TField("all_parts", TType.MAP, (short)4);

  public com.vesoft.nebula.HostAddr hostAddr;
  /**
   * 
   * @see HostStatus
   */
  public int status;
  public Map<String,List<Integer>> leader_parts;
  public Map<String,List<Integer>> all_parts;
  public static final int HOSTADDR = 1;
  public static final int STATUS = 2;
  public static final int LEADER_PARTS = 3;
  public static final int ALL_PARTS = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(HOSTADDR, new FieldMetaData("hostAddr", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(LEADER_PARTS, new FieldMetaData("leader_parts", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(ALL_PARTS, new FieldMetaData("all_parts", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(HostItem.class, metaDataMap);
  }

  public HostItem() {
  }

  public HostItem(
    com.vesoft.nebula.HostAddr hostAddr,
    int status,
    Map<String,List<Integer>> leader_parts,
    Map<String,List<Integer>> all_parts)
  {
    this();
    this.hostAddr = hostAddr;
    this.status = status;
    setStatusIsSet(true);
    this.leader_parts = leader_parts;
    this.all_parts = all_parts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostItem(HostItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetHostAddr()) {
      this.hostAddr = TBaseHelper.deepCopy(other.hostAddr);
    }
    this.status = TBaseHelper.deepCopy(other.status);
    if (other.isSetLeader_parts()) {
      this.leader_parts = TBaseHelper.deepCopy(other.leader_parts);
    }
    if (other.isSetAll_parts()) {
      this.all_parts = TBaseHelper.deepCopy(other.all_parts);
    }
  }

  public HostItem deepCopy() {
    return new HostItem(this);
  }

  @Deprecated
  public HostItem clone() {
    return new HostItem(this);
  }

  public com.vesoft.nebula.HostAddr  getHostAddr() {
    return this.hostAddr;
  }

  public HostItem setHostAddr(com.vesoft.nebula.HostAddr hostAddr) {
    this.hostAddr = hostAddr;
    return this;
  }

  public void unsetHostAddr() {
    this.hostAddr = null;
  }

  // Returns true if field hostAddr is set (has been assigned a value) and false otherwise
  public boolean isSetHostAddr() {
    return this.hostAddr != null;
  }

  public void setHostAddrIsSet(boolean value) {
    if (!value) {
      this.hostAddr = null;
    }
  }

  /**
   * 
   * @see HostStatus
   */
  public int  getStatus() {
    return this.status;
  }

  /**
   * 
   * @see HostStatus
   */
  public HostItem setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public Map<String,List<Integer>>  getLeader_parts() {
    return this.leader_parts;
  }

  public HostItem setLeader_parts(Map<String,List<Integer>> leader_parts) {
    this.leader_parts = leader_parts;
    return this;
  }

  public void unsetLeader_parts() {
    this.leader_parts = null;
  }

  // Returns true if field leader_parts is set (has been assigned a value) and false otherwise
  public boolean isSetLeader_parts() {
    return this.leader_parts != null;
  }

  public void setLeader_partsIsSet(boolean value) {
    if (!value) {
      this.leader_parts = null;
    }
  }

  public Map<String,List<Integer>>  getAll_parts() {
    return this.all_parts;
  }

  public HostItem setAll_parts(Map<String,List<Integer>> all_parts) {
    this.all_parts = all_parts;
    return this;
  }

  public void unsetAll_parts() {
    this.all_parts = null;
  }

  // Returns true if field all_parts is set (has been assigned a value) and false otherwise
  public boolean isSetAll_parts() {
    return this.all_parts != null;
  }

  public void setAll_partsIsSet(boolean value) {
    if (!value) {
      this.all_parts = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case HOSTADDR:
      if (value == null) {
        unsetHostAddr();
      } else {
        setHostAddr((com.vesoft.nebula.HostAddr)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LEADER_PARTS:
      if (value == null) {
        unsetLeader_parts();
      } else {
        setLeader_parts((Map<String,List<Integer>>)value);
      }
      break;

    case ALL_PARTS:
      if (value == null) {
        unsetAll_parts();
      } else {
        setAll_parts((Map<String,List<Integer>>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case HOSTADDR:
      return getHostAddr();

    case STATUS:
      return getStatus();

    case LEADER_PARTS:
      return getLeader_parts();

    case ALL_PARTS:
      return getAll_parts();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case HOSTADDR:
      return isSetHostAddr();
    case STATUS:
      return isSetStatus();
    case LEADER_PARTS:
      return isSetLeader_parts();
    case ALL_PARTS:
      return isSetAll_parts();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostItem)
      return this.equals((HostItem)that);
    return false;
  }

  public boolean equals(HostItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hostAddr = true && this.isSetHostAddr();
    boolean that_present_hostAddr = true && that.isSetHostAddr();
    if (this_present_hostAddr || that_present_hostAddr) {
      if (!(this_present_hostAddr && that_present_hostAddr))
        return false;
      if (!TBaseHelper.equalsNobinary(this.hostAddr, that.hostAddr))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!TBaseHelper.equalsNobinary(this.status, that.status))
        return false;
    }

    boolean this_present_leader_parts = true && this.isSetLeader_parts();
    boolean that_present_leader_parts = true && that.isSetLeader_parts();
    if (this_present_leader_parts || that_present_leader_parts) {
      if (!(this_present_leader_parts && that_present_leader_parts))
        return false;
      if (!TBaseHelper.equalsNobinary(this.leader_parts, that.leader_parts))
        return false;
    }

    boolean this_present_all_parts = true && this.isSetAll_parts();
    boolean that_present_all_parts = true && that.isSetAll_parts();
    if (this_present_all_parts || that_present_all_parts) {
      if (!(this_present_all_parts && that_present_all_parts))
        return false;
      if (!TBaseHelper.equalsNobinary(this.all_parts, that.all_parts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_hostAddr = true && (isSetHostAddr());
    builder.append(present_hostAddr);
    if (present_hostAddr)
      builder.append(hostAddr);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_leader_parts = true && (isSetLeader_parts());
    builder.append(present_leader_parts);
    if (present_leader_parts)
      builder.append(leader_parts);

    boolean present_all_parts = true && (isSetAll_parts());
    builder.append(present_all_parts);
    if (present_all_parts)
      builder.append(all_parts);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(HostItem other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostAddr()).compareTo(other.isSetHostAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(hostAddr, other.hostAddr);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLeader_parts()).compareTo(other.isSetLeader_parts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(leader_parts, other.leader_parts);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAll_parts()).compareTo(other.isSetAll_parts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(all_parts, other.all_parts);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case HOSTADDR:
          if (field.type == TType.STRUCT) {
            this.hostAddr = new com.vesoft.nebula.HostAddr();
            this.hostAddr.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LEADER_PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.leader_parts = new HashMap<String,List<Integer>>(Math.max(0, 2*_map0.size));
              for (int _i1 = 0; 
                   (_map0.size < 0) ? iprot.peekMap() : (_i1 < _map0.size); 
                   ++_i1)
              {
                String _key2;
                List<Integer> _val3;
                _key2 = iprot.readString();
                {
                  TList _list4 = iprot.readListBegin();
                  _val3 = new ArrayList<Integer>(Math.max(0, _list4.size));
                  for (int _i5 = 0; 
                       (_list4.size < 0) ? iprot.peekList() : (_i5 < _list4.size); 
                       ++_i5)
                  {
                    int _elem6;
                    _elem6 = iprot.readI32();
                    _val3.add(_elem6);
                  }
                  iprot.readListEnd();
                }
                this.leader_parts.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ALL_PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map7 = iprot.readMapBegin();
              this.all_parts = new HashMap<String,List<Integer>>(Math.max(0, 2*_map7.size));
              for (int _i8 = 0; 
                   (_map7.size < 0) ? iprot.peekMap() : (_i8 < _map7.size); 
                   ++_i8)
              {
                String _key9;
                List<Integer> _val10;
                _key9 = iprot.readString();
                {
                  TList _list11 = iprot.readListBegin();
                  _val10 = new ArrayList<Integer>(Math.max(0, _list11.size));
                  for (int _i12 = 0; 
                       (_list11.size < 0) ? iprot.peekList() : (_i12 < _list11.size); 
                       ++_i12)
                  {
                    int _elem13;
                    _elem13 = iprot.readI32();
                    _val10.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                this.all_parts.put(_key9, _val10);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.hostAddr != null) {
      oprot.writeFieldBegin(HOST_ADDR_FIELD_DESC);
      this.hostAddr.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.leader_parts != null) {
      oprot.writeFieldBegin(LEADER_PARTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.leader_parts.size()));
        for (Map.Entry<String, List<Integer>> _iter14 : this.leader_parts.entrySet())        {
          oprot.writeString(_iter14.getKey());
          {
            oprot.writeListBegin(new TList(TType.I32, _iter14.getValue().size()));
            for (int _iter15 : _iter14.getValue())            {
              oprot.writeI32(_iter15);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.all_parts != null) {
      oprot.writeFieldBegin(ALL_PARTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.all_parts.size()));
        for (Map.Entry<String, List<Integer>> _iter16 : this.all_parts.entrySet())        {
          oprot.writeString(_iter16.getKey());
          {
            oprot.writeListBegin(new TList(TType.I32, _iter16.getValue().size()));
            for (int _iter17 : _iter16.getValue())            {
              oprot.writeI32(_iter17);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("HostItem");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("hostAddr");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getHostAddr() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getHostAddr(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    String status_name = HostStatus.VALUES_TO_NAMES.get(this. getStatus());
    if (status_name != null) {
      sb.append(status_name);
      sb.append(" (");
    }
    sb.append(this. getStatus());
    if (status_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("leader_parts");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getLeader_parts() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getLeader_parts(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("all_parts");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getAll_parts() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getAll_parts(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !HostStatus.VALID_VALUES.contains(status)){
      throw new TProtocolException("The field 'status' has been assigned the invalid value " + status);
    }
  }

}

