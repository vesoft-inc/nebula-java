/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.meta;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class HostItem implements TBase, java.io.Serializable, Cloneable, Comparable<HostItem> {
  private static final TStruct STRUCT_DESC = new TStruct("HostItem");
  private static final TField HOST_ADDR_FIELD_DESC = new TField("hostAddr", TType.STRUCT, (short)1);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)2);
  private static final TField LEADER_PARTS_FIELD_DESC = new TField("leader_parts", TType.MAP, (short)3);
  private static final TField ALL_PARTS_FIELD_DESC = new TField("all_parts", TType.MAP, (short)4);
  private static final TField ROLE_FIELD_DESC = new TField("role", TType.I32, (short)5);
  private static final TField GIT_INFO_SHA_FIELD_DESC = new TField("git_info_sha", TType.STRING, (short)6);

  public com.vesoft.nebula.HostAddr hostAddr;
  /**
   * 
   * @see HostStatus
   */
  public int status;
  public Map<byte[],List<Integer>> leader_parts;
  public Map<byte[],List<Integer>> all_parts;
  public int role;
  public byte[] git_info_sha;
  public static final int HOSTADDR = 1;
  public static final int STATUS = 2;
  public static final int LEADER_PARTS = 3;
  public static final int ALL_PARTS = 4;
  public static final int ROLE = 5;
  public static final int GIT_INFO_SHA = 6;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __ROLE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(HOSTADDR, new FieldMetaData("hostAddr", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.HostAddr.class)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(LEADER_PARTS, new FieldMetaData("leader_parts", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(ALL_PARTS, new FieldMetaData("all_parts", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(ROLE, new FieldMetaData("role", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(GIT_INFO_SHA, new FieldMetaData("git_info_sha", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(HostItem.class, metaDataMap);
  }

  public HostItem() {
  }

  public HostItem(
    com.vesoft.nebula.HostAddr hostAddr,
    int status,
    Map<byte[],List<Integer>> leader_parts,
    Map<byte[],List<Integer>> all_parts,
    int role,
    byte[] git_info_sha)
  {
    this();
    this.hostAddr = hostAddr;
    this.status = status;
    setStatusIsSet(true);
    this.leader_parts = leader_parts;
    this.all_parts = all_parts;
    this.role = role;
    setRoleIsSet(true);
    this.git_info_sha = git_info_sha;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostItem(HostItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetHostAddr()) {
      this.hostAddr = TBaseHelper.deepCopy(other.hostAddr);
    }
    this.status = TBaseHelper.deepCopy(other.status);
    if (other.isSetLeader_parts()) {
      this.leader_parts = TBaseHelper.deepCopy(other.leader_parts);
    }
    if (other.isSetAll_parts()) {
      this.all_parts = TBaseHelper.deepCopy(other.all_parts);
    }
    this.role = TBaseHelper.deepCopy(other.role);
    if (other.isSetGit_info_sha()) {
      this.git_info_sha = TBaseHelper.deepCopy(other.git_info_sha);
    }
  }

  public HostItem deepCopy() {
    return new HostItem(this);
  }

  @Deprecated
  public HostItem clone() {
    return new HostItem(this);
  }

  public com.vesoft.nebula.HostAddr  getHostAddr() {
    return this.hostAddr;
  }

  public HostItem setHostAddr(com.vesoft.nebula.HostAddr hostAddr) {
    this.hostAddr = hostAddr;
    return this;
  }

  public void unsetHostAddr() {
    this.hostAddr = null;
  }

  // Returns true if field hostAddr is set (has been assigned a value) and false otherwise
  public boolean isSetHostAddr() {
    return this.hostAddr != null;
  }

  public void setHostAddrIsSet(boolean value) {
    if (!value) {
      this.hostAddr = null;
    }
  }

  /**
   * 
   * @see HostStatus
   */
  public int  getStatus() {
    return this.status;
  }

  /**
   * 
   * @see HostStatus
   */
  public HostItem setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public Map<byte[],List<Integer>>  getLeader_parts() {
    return this.leader_parts;
  }

  public HostItem setLeader_parts(Map<byte[],List<Integer>> leader_parts) {
    this.leader_parts = leader_parts;
    return this;
  }

  public void unsetLeader_parts() {
    this.leader_parts = null;
  }

  // Returns true if field leader_parts is set (has been assigned a value) and false otherwise
  public boolean isSetLeader_parts() {
    return this.leader_parts != null;
  }

  public void setLeader_partsIsSet(boolean value) {
    if (!value) {
      this.leader_parts = null;
    }
  }

  public Map<byte[],List<Integer>>  getAll_parts() {
    return this.all_parts;
  }

  public HostItem setAll_parts(Map<byte[],List<Integer>> all_parts) {
    this.all_parts = all_parts;
    return this;
  }

  public void unsetAll_parts() {
    this.all_parts = null;
  }

  // Returns true if field all_parts is set (has been assigned a value) and false otherwise
  public boolean isSetAll_parts() {
    return this.all_parts != null;
  }

  public void setAll_partsIsSet(boolean value) {
    if (!value) {
      this.all_parts = null;
    }
  }

  public int  getRole() {
    return this.role;
  }

  public HostItem setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bit_vector.clear(__ROLE_ISSET_ID);
  }

  // Returns true if field role is set (has been assigned a value) and false otherwise
  public boolean isSetRole() {
    return __isset_bit_vector.get(__ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bit_vector.set(__ROLE_ISSET_ID, value);
  }

  public byte[]  getGit_info_sha() {
    return this.git_info_sha;
  }

  public HostItem setGit_info_sha(byte[] git_info_sha) {
    this.git_info_sha = git_info_sha;
    return this;
  }

  public void unsetGit_info_sha() {
    this.git_info_sha = null;
  }

  // Returns true if field git_info_sha is set (has been assigned a value) and false otherwise
  public boolean isSetGit_info_sha() {
    return this.git_info_sha != null;
  }

  public void setGit_info_shaIsSet(boolean value) {
    if (!value) {
      this.git_info_sha = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case HOSTADDR:
      if (value == null) {
        unsetHostAddr();
      } else {
        setHostAddr((com.vesoft.nebula.HostAddr)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LEADER_PARTS:
      if (value == null) {
        unsetLeader_parts();
      } else {
        setLeader_parts((Map<byte[],List<Integer>>)value);
      }
      break;

    case ALL_PARTS:
      if (value == null) {
        unsetAll_parts();
      } else {
        setAll_parts((Map<byte[],List<Integer>>)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    case GIT_INFO_SHA:
      if (value == null) {
        unsetGit_info_sha();
      } else {
        setGit_info_sha((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case HOSTADDR:
      return getHostAddr();

    case STATUS:
      return getStatus();

    case LEADER_PARTS:
      return getLeader_parts();

    case ALL_PARTS:
      return getAll_parts();

    case ROLE:
      return getRole();

    case GIT_INFO_SHA:
      return getGit_info_sha();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case HOSTADDR:
      return isSetHostAddr();
    case STATUS:
      return isSetStatus();
    case LEADER_PARTS:
      return isSetLeader_parts();
    case ALL_PARTS:
      return isSetAll_parts();
    case ROLE:
      return isSetRole();
    case GIT_INFO_SHA:
      return isSetGit_info_sha();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostItem)
      return this.equals((HostItem)that);
    return false;
  }

  public boolean equals(HostItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hostAddr = true && this.isSetHostAddr();
    boolean that_present_hostAddr = true && that.isSetHostAddr();
    if (this_present_hostAddr || that_present_hostAddr) {
      if (!(this_present_hostAddr && that_present_hostAddr))
        return false;
      if (!TBaseHelper.equalsNobinary(this.hostAddr, that.hostAddr))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!TBaseHelper.equalsNobinary(this.status, that.status))
        return false;
    }

    boolean this_present_leader_parts = true && this.isSetLeader_parts();
    boolean that_present_leader_parts = true && that.isSetLeader_parts();
    if (this_present_leader_parts || that_present_leader_parts) {
      if (!(this_present_leader_parts && that_present_leader_parts))
        return false;
      if (!TBaseHelper.equalsSlow(this.leader_parts, that.leader_parts))
        return false;
    }

    boolean this_present_all_parts = true && this.isSetAll_parts();
    boolean that_present_all_parts = true && that.isSetAll_parts();
    if (this_present_all_parts || that_present_all_parts) {
      if (!(this_present_all_parts && that_present_all_parts))
        return false;
      if (!TBaseHelper.equalsSlow(this.all_parts, that.all_parts))
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!TBaseHelper.equalsNobinary(this.role, that.role))
        return false;
    }

    boolean this_present_git_info_sha = true && this.isSetGit_info_sha();
    boolean that_present_git_info_sha = true && that.isSetGit_info_sha();
    if (this_present_git_info_sha || that_present_git_info_sha) {
      if (!(this_present_git_info_sha && that_present_git_info_sha))
        return false;
      if (!TBaseHelper.equalsSlow(this.git_info_sha, that.git_info_sha))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_hostAddr = true && (isSetHostAddr());
    builder.append(present_hostAddr);
    if (present_hostAddr)
      builder.append(hostAddr);

    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_leader_parts = true && (isSetLeader_parts());
    builder.append(present_leader_parts);
    if (present_leader_parts)
      builder.append(leader_parts);

    boolean present_all_parts = true && (isSetAll_parts());
    builder.append(present_all_parts);
    if (present_all_parts)
      builder.append(all_parts);

    boolean present_role = true;
    builder.append(present_role);
    if (present_role)
      builder.append(role);

    boolean present_git_info_sha = true && (isSetGit_info_sha());
    builder.append(present_git_info_sha);
    if (present_git_info_sha)
      builder.append(git_info_sha);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(HostItem other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostAddr()).compareTo(other.isSetHostAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(hostAddr, other.hostAddr);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLeader_parts()).compareTo(other.isSetLeader_parts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(leader_parts, other.leader_parts);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAll_parts()).compareTo(other.isSetAll_parts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(all_parts, other.all_parts);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(role, other.role);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetGit_info_sha()).compareTo(other.isSetGit_info_sha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(git_info_sha, other.git_info_sha);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case HOSTADDR:
          if (field.type == TType.STRUCT) {
            this.hostAddr = new com.vesoft.nebula.HostAddr();
            this.hostAddr.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LEADER_PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map8 = iprot.readMapBegin();
              this.leader_parts = new HashMap<byte[],List<Integer>>(Math.max(0, 2*_map8.size));
              for (int _i9 = 0; 
                   (_map8.size < 0) ? iprot.peekMap() : (_i9 < _map8.size); 
                   ++_i9)
              {
                byte[] _key10;
                List<Integer> _val11;
                _key10 = iprot.readBinary();
                {
                  TList _list12 = iprot.readListBegin();
                  _val11 = new ArrayList<Integer>(Math.max(0, _list12.size));
                  for (int _i13 = 0; 
                       (_list12.size < 0) ? iprot.peekList() : (_i13 < _list12.size); 
                       ++_i13)
                  {
                    int _elem14;
                    _elem14 = iprot.readI32();
                    _val11.add(_elem14);
                  }
                  iprot.readListEnd();
                }
                this.leader_parts.put(_key10, _val11);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ALL_PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map15 = iprot.readMapBegin();
              this.all_parts = new HashMap<byte[],List<Integer>>(Math.max(0, 2*_map15.size));
              for (int _i16 = 0; 
                   (_map15.size < 0) ? iprot.peekMap() : (_i16 < _map15.size); 
                   ++_i16)
              {
                byte[] _key17;
                List<Integer> _val18;
                _key17 = iprot.readBinary();
                {
                  TList _list19 = iprot.readListBegin();
                  _val18 = new ArrayList<Integer>(Math.max(0, _list19.size));
                  for (int _i20 = 0; 
                       (_list19.size < 0) ? iprot.peekList() : (_i20 < _list19.size); 
                       ++_i20)
                  {
                    int _elem21;
                    _elem21 = iprot.readI32();
                    _val18.add(_elem21);
                  }
                  iprot.readListEnd();
                }
                this.all_parts.put(_key17, _val18);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROLE:
          if (field.type == TType.I32) {
            this.role = iprot.readI32();
            setRoleIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GIT_INFO_SHA:
          if (field.type == TType.STRING) {
            this.git_info_sha = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.hostAddr != null) {
      oprot.writeFieldBegin(HOST_ADDR_FIELD_DESC);
      this.hostAddr.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.leader_parts != null) {
      oprot.writeFieldBegin(LEADER_PARTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.leader_parts.size()));
        for (Map.Entry<byte[], List<Integer>> _iter22 : this.leader_parts.entrySet())        {
          oprot.writeBinary(_iter22.getKey());
          {
            oprot.writeListBegin(new TList(TType.I32, _iter22.getValue().size()));
            for (int _iter23 : _iter22.getValue())            {
              oprot.writeI32(_iter23);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.all_parts != null) {
      oprot.writeFieldBegin(ALL_PARTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.all_parts.size()));
        for (Map.Entry<byte[], List<Integer>> _iter24 : this.all_parts.entrySet())        {
          oprot.writeBinary(_iter24.getKey());
          {
            oprot.writeListBegin(new TList(TType.I32, _iter24.getValue().size()));
            for (int _iter25 : _iter24.getValue())            {
              oprot.writeI32(_iter25);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ROLE_FIELD_DESC);
    oprot.writeI32(this.role);
    oprot.writeFieldEnd();
    if (this.git_info_sha != null) {
      oprot.writeFieldBegin(GIT_INFO_SHA_FIELD_DESC);
      oprot.writeBinary(this.git_info_sha);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("HostItem");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("hostAddr");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getHostAddr() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getHostAddr(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    String status_name = HostStatus.VALUES_TO_NAMES.get(this. getStatus());
    if (status_name != null) {
      sb.append(status_name);
      sb.append(" (");
    }
    sb.append(this. getStatus());
    if (status_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("leader_parts");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getLeader_parts() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getLeader_parts(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("all_parts");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getAll_parts() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getAll_parts(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("role");
    sb.append(space);
    sb.append(":").append(space);
    String role_name = HostRole.VALUES_TO_NAMES.get(this. getRole());
    if (role_name != null) {
      sb.append(role_name);
      sb.append(" (");
    }
    sb.append(this. getRole());
    if (role_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("git_info_sha");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getGit_info_sha() == null) {
      sb.append("null");
    } else {
        int __git_info_sha_size = Math.min(this. getGit_info_sha().length, 128);
        for (int i = 0; i < __git_info_sha_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getGit_info_sha()[i]).length() > 1 ? Integer.toHexString(this. getGit_info_sha()[i]).substring(Integer.toHexString(this. getGit_info_sha()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getGit_info_sha()[i]).toUpperCase());
        }
        if (this. getGit_info_sha().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !HostStatus.VALID_VALUES.contains(status)){
      throw new TProtocolException("The field 'status' has been assigned the invalid value " + status);
    }
  }

}

