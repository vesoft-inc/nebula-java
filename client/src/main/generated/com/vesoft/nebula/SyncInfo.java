/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SyncInfo implements TBase, java.io.Serializable, Cloneable, Comparable<SyncInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("SyncInfo");
  private static final TField TIME_LATENCY_FIELD_DESC = new TField("time_latency", TType.I64, (short)1);
  private static final TField ID_LAG_FIELD_DESC = new TField("id_lag", TType.I64, (short)2);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)3);

  public long time_latency;
  public long id_lag;
  /**
   * 
   * @see SyncStatus
   */
  public SyncStatus status;
  public static final int TIME_LATENCY = 1;
  public static final int ID_LAG = 2;
  public static final int STATUS = 3;

  // isset id assignments
  private static final int __TIME_LATENCY_ISSET_ID = 0;
  private static final int __ID_LAG_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TIME_LATENCY, new FieldMetaData("time_latency", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(ID_LAG, new FieldMetaData("id_lag", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SyncInfo.class, metaDataMap);
  }

  public SyncInfo() {
  }

  public SyncInfo(
      long time_latency,
      long id_lag,
      SyncStatus status) {
    this();
    this.time_latency = time_latency;
    setTime_latencyIsSet(true);
    this.id_lag = id_lag;
    setId_lagIsSet(true);
    this.status = status;
  }

  public static class Builder {
    private long time_latency;
    private long id_lag;
    private SyncStatus status;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setTime_latency(final long time_latency) {
      this.time_latency = time_latency;
      __optional_isset.set(__TIME_LATENCY_ISSET_ID, true);
      return this;
    }

    public Builder setId_lag(final long id_lag) {
      this.id_lag = id_lag;
      __optional_isset.set(__ID_LAG_ISSET_ID, true);
      return this;
    }

    public Builder setStatus(final SyncStatus status) {
      this.status = status;
      return this;
    }

    public SyncInfo build() {
      SyncInfo result = new SyncInfo();
      if (__optional_isset.get(__TIME_LATENCY_ISSET_ID)) {
        result.setTime_latency(this.time_latency);
      }
      if (__optional_isset.get(__ID_LAG_ISSET_ID)) {
        result.setId_lag(this.id_lag);
      }
      result.setStatus(this.status);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncInfo(SyncInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.time_latency = TBaseHelper.deepCopy(other.time_latency);
    this.id_lag = TBaseHelper.deepCopy(other.id_lag);
    if (other.isSetStatus()) {
      this.status = TBaseHelper.deepCopy(other.status);
    }
  }

  public SyncInfo deepCopy() {
    return new SyncInfo(this);
  }

  public long getTime_latency() {
    return this.time_latency;
  }

  public SyncInfo setTime_latency(long time_latency) {
    this.time_latency = time_latency;
    setTime_latencyIsSet(true);
    return this;
  }

  public void unsetTime_latency() {
    __isset_bit_vector.clear(__TIME_LATENCY_ISSET_ID);
  }

  // Returns true if field time_latency is set (has been assigned a value) and false otherwise
  public boolean isSetTime_latency() {
    return __isset_bit_vector.get(__TIME_LATENCY_ISSET_ID);
  }

  public void setTime_latencyIsSet(boolean __value) {
    __isset_bit_vector.set(__TIME_LATENCY_ISSET_ID, __value);
  }

  public long getId_lag() {
    return this.id_lag;
  }

  public SyncInfo setId_lag(long id_lag) {
    this.id_lag = id_lag;
    setId_lagIsSet(true);
    return this;
  }

  public void unsetId_lag() {
    __isset_bit_vector.clear(__ID_LAG_ISSET_ID);
  }

  // Returns true if field id_lag is set (has been assigned a value) and false otherwise
  public boolean isSetId_lag() {
    return __isset_bit_vector.get(__ID_LAG_ISSET_ID);
  }

  public void setId_lagIsSet(boolean __value) {
    __isset_bit_vector.set(__ID_LAG_ISSET_ID, __value);
  }

  /**
   * 
   * @see SyncStatus
   */
  public SyncStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see SyncStatus
   */
  public SyncInfo setStatus(SyncStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean __value) {
    if (!__value) {
      this.status = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case TIME_LATENCY:
      if (__value == null) {
        unsetTime_latency();
      } else {
        setTime_latency((Long)__value);
      }
      break;

    case ID_LAG:
      if (__value == null) {
        unsetId_lag();
      } else {
        setId_lag((Long)__value);
      }
      break;

    case STATUS:
      if (__value == null) {
        unsetStatus();
      } else {
        setStatus((SyncStatus)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TIME_LATENCY:
      return new Long(getTime_latency());

    case ID_LAG:
      return new Long(getId_lag());

    case STATUS:
      return getStatus();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof SyncInfo))
      return false;
    SyncInfo that = (SyncInfo)_that;

    if (!TBaseHelper.equalsNobinary(this.time_latency, that.time_latency)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.id_lag, that.id_lag)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStatus(), that.isSetStatus(), this.status, that.status)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {time_latency, id_lag, status});
  }

  @Override
  public int compareTo(SyncInfo other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime_latency()).compareTo(other.isSetTime_latency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(time_latency, other.time_latency);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetId_lag()).compareTo(other.isSetId_lag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id_lag, other.id_lag);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case TIME_LATENCY:
          if (__field.type == TType.I64) {
            this.time_latency = iprot.readI64();
            setTime_latencyIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ID_LAG:
          if (__field.type == TType.I64) {
            this.id_lag = iprot.readI64();
            setId_lagIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STATUS:
          if (__field.type == TType.I32) {
            this.status = SyncStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TIME_LATENCY_FIELD_DESC);
    oprot.writeI64(this.time_latency);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ID_LAG_FIELD_DESC);
    oprot.writeI64(this.id_lag);
    oprot.writeFieldEnd();
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status == null ? 0 : this.status.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SyncInfo");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("time_latency");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTime_latency(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("id_lag");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getId_lag(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStatus() == null) {
      sb.append("null");
    } else {
      String status_name = this.getStatus() == null ? "null" : this.getStatus().name();
      if (status_name != null) {
        sb.append(status_name);
        sb.append(" (");
      }
      sb.append(this.getStatus());
      if (status_name != null) {
        sb.append(")");
      }
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

