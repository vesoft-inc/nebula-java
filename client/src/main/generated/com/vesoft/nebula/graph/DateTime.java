/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.graph;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class DateTime implements TBase, java.io.Serializable, Cloneable, Comparable<DateTime> {
  private static final TStruct STRUCT_DESC = new TStruct("DateTime");
  private static final TField YEAR_FIELD_DESC = new TField("year", TType.I16, (short)1);
  private static final TField MONTH_FIELD_DESC = new TField("month", TType.BYTE, (short)2);
  private static final TField DAY_FIELD_DESC = new TField("day", TType.BYTE, (short)3);
  private static final TField HOUR_FIELD_DESC = new TField("hour", TType.BYTE, (short)4);
  private static final TField MINUTE_FIELD_DESC = new TField("minute", TType.BYTE, (short)5);
  private static final TField SECOND_FIELD_DESC = new TField("second", TType.BYTE, (short)6);
  private static final TField MILLISEC_FIELD_DESC = new TField("millisec", TType.I16, (short)7);
  private static final TField MICROSEC_FIELD_DESC = new TField("microsec", TType.I16, (short)8);

  public short year;
  public byte month;
  public byte day;
  public byte hour;
  public byte minute;
  public byte second;
  public short millisec;
  public short microsec;
  public static final int YEAR = 1;
  public static final int MONTH = 2;
  public static final int DAY = 3;
  public static final int HOUR = 4;
  public static final int MINUTE = 5;
  public static final int SECOND = 6;
  public static final int MILLISEC = 7;
  public static final int MICROSEC = 8;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __YEAR_ISSET_ID = 0;
  private static final int __MONTH_ISSET_ID = 1;
  private static final int __DAY_ISSET_ID = 2;
  private static final int __HOUR_ISSET_ID = 3;
  private static final int __MINUTE_ISSET_ID = 4;
  private static final int __SECOND_ISSET_ID = 5;
  private static final int __MILLISEC_ISSET_ID = 6;
  private static final int __MICROSEC_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(YEAR, new FieldMetaData("year", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(MONTH, new FieldMetaData("month", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(DAY, new FieldMetaData("day", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(HOUR, new FieldMetaData("hour", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(MINUTE, new FieldMetaData("minute", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(SECOND, new FieldMetaData("second", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(MILLISEC, new FieldMetaData("millisec", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(MICROSEC, new FieldMetaData("microsec", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DateTime.class, metaDataMap);
  }

  public DateTime() {
  }

  public DateTime(
    short year,
    byte month,
    byte day,
    byte hour,
    byte minute,
    byte second,
    short millisec,
    short microsec)
  {
    this();
    this.year = year;
    setYearIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.day = day;
    setDayIsSet(true);
    this.hour = hour;
    setHourIsSet(true);
    this.minute = minute;
    setMinuteIsSet(true);
    this.second = second;
    setSecondIsSet(true);
    this.millisec = millisec;
    setMillisecIsSet(true);
    this.microsec = microsec;
    setMicrosecIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateTime(DateTime other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.year = TBaseHelper.deepCopy(other.year);
    this.month = TBaseHelper.deepCopy(other.month);
    this.day = TBaseHelper.deepCopy(other.day);
    this.hour = TBaseHelper.deepCopy(other.hour);
    this.minute = TBaseHelper.deepCopy(other.minute);
    this.second = TBaseHelper.deepCopy(other.second);
    this.millisec = TBaseHelper.deepCopy(other.millisec);
    this.microsec = TBaseHelper.deepCopy(other.microsec);
  }

  public DateTime deepCopy() {
    return new DateTime(this);
  }

  @Deprecated
  public DateTime clone() {
    return new DateTime(this);
  }

  public short  getYear() {
    return this.year;
  }

  public DateTime setYear(short year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bit_vector.clear(__YEAR_ISSET_ID);
  }

  // Returns true if field year is set (has been assigned a value) and false otherwise
  public boolean isSetYear() {
    return __isset_bit_vector.get(__YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bit_vector.set(__YEAR_ISSET_ID, value);
  }

  public byte  getMonth() {
    return this.month;
  }

  public DateTime setMonth(byte month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bit_vector.clear(__MONTH_ISSET_ID);
  }

  // Returns true if field month is set (has been assigned a value) and false otherwise
  public boolean isSetMonth() {
    return __isset_bit_vector.get(__MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bit_vector.set(__MONTH_ISSET_ID, value);
  }

  public byte  getDay() {
    return this.day;
  }

  public DateTime setDay(byte day) {
    this.day = day;
    setDayIsSet(true);
    return this;
  }

  public void unsetDay() {
    __isset_bit_vector.clear(__DAY_ISSET_ID);
  }

  // Returns true if field day is set (has been assigned a value) and false otherwise
  public boolean isSetDay() {
    return __isset_bit_vector.get(__DAY_ISSET_ID);
  }

  public void setDayIsSet(boolean value) {
    __isset_bit_vector.set(__DAY_ISSET_ID, value);
  }

  public byte  getHour() {
    return this.hour;
  }

  public DateTime setHour(byte hour) {
    this.hour = hour;
    setHourIsSet(true);
    return this;
  }

  public void unsetHour() {
    __isset_bit_vector.clear(__HOUR_ISSET_ID);
  }

  // Returns true if field hour is set (has been assigned a value) and false otherwise
  public boolean isSetHour() {
    return __isset_bit_vector.get(__HOUR_ISSET_ID);
  }

  public void setHourIsSet(boolean value) {
    __isset_bit_vector.set(__HOUR_ISSET_ID, value);
  }

  public byte  getMinute() {
    return this.minute;
  }

  public DateTime setMinute(byte minute) {
    this.minute = minute;
    setMinuteIsSet(true);
    return this;
  }

  public void unsetMinute() {
    __isset_bit_vector.clear(__MINUTE_ISSET_ID);
  }

  // Returns true if field minute is set (has been assigned a value) and false otherwise
  public boolean isSetMinute() {
    return __isset_bit_vector.get(__MINUTE_ISSET_ID);
  }

  public void setMinuteIsSet(boolean value) {
    __isset_bit_vector.set(__MINUTE_ISSET_ID, value);
  }

  public byte  getSecond() {
    return this.second;
  }

  public DateTime setSecond(byte second) {
    this.second = second;
    setSecondIsSet(true);
    return this;
  }

  public void unsetSecond() {
    __isset_bit_vector.clear(__SECOND_ISSET_ID);
  }

  // Returns true if field second is set (has been assigned a value) and false otherwise
  public boolean isSetSecond() {
    return __isset_bit_vector.get(__SECOND_ISSET_ID);
  }

  public void setSecondIsSet(boolean value) {
    __isset_bit_vector.set(__SECOND_ISSET_ID, value);
  }

  public short  getMillisec() {
    return this.millisec;
  }

  public DateTime setMillisec(short millisec) {
    this.millisec = millisec;
    setMillisecIsSet(true);
    return this;
  }

  public void unsetMillisec() {
    __isset_bit_vector.clear(__MILLISEC_ISSET_ID);
  }

  // Returns true if field millisec is set (has been assigned a value) and false otherwise
  public boolean isSetMillisec() {
    return __isset_bit_vector.get(__MILLISEC_ISSET_ID);
  }

  public void setMillisecIsSet(boolean value) {
    __isset_bit_vector.set(__MILLISEC_ISSET_ID, value);
  }

  public short  getMicrosec() {
    return this.microsec;
  }

  public DateTime setMicrosec(short microsec) {
    this.microsec = microsec;
    setMicrosecIsSet(true);
    return this;
  }

  public void unsetMicrosec() {
    __isset_bit_vector.clear(__MICROSEC_ISSET_ID);
  }

  // Returns true if field microsec is set (has been assigned a value) and false otherwise
  public boolean isSetMicrosec() {
    return __isset_bit_vector.get(__MICROSEC_ISSET_ID);
  }

  public void setMicrosecIsSet(boolean value) {
    __isset_bit_vector.set(__MICROSEC_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Short)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((Byte)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Byte)value);
      }
      break;

    case HOUR:
      if (value == null) {
        unsetHour();
      } else {
        setHour((Byte)value);
      }
      break;

    case MINUTE:
      if (value == null) {
        unsetMinute();
      } else {
        setMinute((Byte)value);
      }
      break;

    case SECOND:
      if (value == null) {
        unsetSecond();
      } else {
        setSecond((Byte)value);
      }
      break;

    case MILLISEC:
      if (value == null) {
        unsetMillisec();
      } else {
        setMillisec((Short)value);
      }
      break;

    case MICROSEC:
      if (value == null) {
        unsetMicrosec();
      } else {
        setMicrosec((Short)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case YEAR:
      return new Short(getYear());

    case MONTH:
      return new Byte(getMonth());

    case DAY:
      return new Byte(getDay());

    case HOUR:
      return new Byte(getHour());

    case MINUTE:
      return new Byte(getMinute());

    case SECOND:
      return new Byte(getSecond());

    case MILLISEC:
      return new Short(getMillisec());

    case MICROSEC:
      return new Short(getMicrosec());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DAY:
      return isSetDay();
    case HOUR:
      return isSetHour();
    case MINUTE:
      return isSetMinute();
    case SECOND:
      return isSetSecond();
    case MILLISEC:
      return isSetMillisec();
    case MICROSEC:
      return isSetMicrosec();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateTime)
      return this.equals((DateTime)that);
    return false;
  }

  public boolean equals(DateTime that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!TBaseHelper.equalsNobinary(this.year, that.year))
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!TBaseHelper.equalsNobinary(this.month, that.month))
        return false;
    }

    boolean this_present_day = true;
    boolean that_present_day = true;
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!TBaseHelper.equalsNobinary(this.day, that.day))
        return false;
    }

    boolean this_present_hour = true;
    boolean that_present_hour = true;
    if (this_present_hour || that_present_hour) {
      if (!(this_present_hour && that_present_hour))
        return false;
      if (!TBaseHelper.equalsNobinary(this.hour, that.hour))
        return false;
    }

    boolean this_present_minute = true;
    boolean that_present_minute = true;
    if (this_present_minute || that_present_minute) {
      if (!(this_present_minute && that_present_minute))
        return false;
      if (!TBaseHelper.equalsNobinary(this.minute, that.minute))
        return false;
    }

    boolean this_present_second = true;
    boolean that_present_second = true;
    if (this_present_second || that_present_second) {
      if (!(this_present_second && that_present_second))
        return false;
      if (!TBaseHelper.equalsNobinary(this.second, that.second))
        return false;
    }

    boolean this_present_millisec = true;
    boolean that_present_millisec = true;
    if (this_present_millisec || that_present_millisec) {
      if (!(this_present_millisec && that_present_millisec))
        return false;
      if (!TBaseHelper.equalsNobinary(this.millisec, that.millisec))
        return false;
    }

    boolean this_present_microsec = true;
    boolean that_present_microsec = true;
    if (this_present_microsec || that_present_microsec) {
      if (!(this_present_microsec && that_present_microsec))
        return false;
      if (!TBaseHelper.equalsNobinary(this.microsec, that.microsec))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_year = true;
    builder.append(present_year);
    if (present_year)
      builder.append(year);

    boolean present_month = true;
    builder.append(present_month);
    if (present_month)
      builder.append(month);

    boolean present_day = true;
    builder.append(present_day);
    if (present_day)
      builder.append(day);

    boolean present_hour = true;
    builder.append(present_hour);
    if (present_hour)
      builder.append(hour);

    boolean present_minute = true;
    builder.append(present_minute);
    if (present_minute)
      builder.append(minute);

    boolean present_second = true;
    builder.append(present_second);
    if (present_second)
      builder.append(second);

    boolean present_millisec = true;
    builder.append(present_millisec);
    if (present_millisec)
      builder.append(millisec);

    boolean present_microsec = true;
    builder.append(present_microsec);
    if (present_microsec)
      builder.append(microsec);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(DateTime other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(year, other.year);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(month, other.month);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(day, other.day);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHour()).compareTo(other.isSetHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(hour, other.hour);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMinute()).compareTo(other.isSetMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(minute, other.minute);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSecond()).compareTo(other.isSetSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(second, other.second);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMillisec()).compareTo(other.isSetMillisec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(millisec, other.millisec);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMicrosec()).compareTo(other.isSetMicrosec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(microsec, other.microsec);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case YEAR:
          if (field.type == TType.I16) {
            this.year = iprot.readI16();
            setYearIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MONTH:
          if (field.type == TType.BYTE) {
            this.month = iprot.readByte();
            setMonthIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DAY:
          if (field.type == TType.BYTE) {
            this.day = iprot.readByte();
            setDayIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOUR:
          if (field.type == TType.BYTE) {
            this.hour = iprot.readByte();
            setHourIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MINUTE:
          if (field.type == TType.BYTE) {
            this.minute = iprot.readByte();
            setMinuteIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SECOND:
          if (field.type == TType.BYTE) {
            this.second = iprot.readByte();
            setSecondIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MILLISEC:
          if (field.type == TType.I16) {
            this.millisec = iprot.readI16();
            setMillisecIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MICROSEC:
          if (field.type == TType.I16) {
            this.microsec = iprot.readI16();
            setMicrosecIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(YEAR_FIELD_DESC);
    oprot.writeI16(this.year);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MONTH_FIELD_DESC);
    oprot.writeByte(this.month);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DAY_FIELD_DESC);
    oprot.writeByte(this.day);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HOUR_FIELD_DESC);
    oprot.writeByte(this.hour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MINUTE_FIELD_DESC);
    oprot.writeByte(this.minute);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SECOND_FIELD_DESC);
    oprot.writeByte(this.second);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MILLISEC_FIELD_DESC);
    oprot.writeI16(this.millisec);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MICROSEC_FIELD_DESC);
    oprot.writeI16(this.microsec);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DateTime");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("year");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getYear(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("month");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMonth(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("day");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getDay(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("hour");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getHour(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("minute");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMinute(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("second");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSecond(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("millisec");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMillisec(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("microsec");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMicrosec(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

