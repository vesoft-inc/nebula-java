/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.graph;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Date implements TBase, java.io.Serializable, Cloneable, Comparable<Date> {
  private static final TStruct STRUCT_DESC = new TStruct("Date");
  private static final TField YEAR_FIELD_DESC = new TField("year", TType.I16, (short)1);
  private static final TField MONTH_FIELD_DESC = new TField("month", TType.BYTE, (short)2);
  private static final TField DAY_FIELD_DESC = new TField("day", TType.BYTE, (short)3);

  public short year;
  public byte month;
  public byte day;
  public static final int YEAR = 1;
  public static final int MONTH = 2;
  public static final int DAY = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __YEAR_ISSET_ID = 0;
  private static final int __MONTH_ISSET_ID = 1;
  private static final int __DAY_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(YEAR, new FieldMetaData("year", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(MONTH, new FieldMetaData("month", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(DAY, new FieldMetaData("day", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Date.class, metaDataMap);
  }

  public Date() {
  }

  public Date(
    short year,
    byte month,
    byte day)
  {
    this();
    this.year = year;
    setYearIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.day = day;
    setDayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Date(Date other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.year = TBaseHelper.deepCopy(other.year);
    this.month = TBaseHelper.deepCopy(other.month);
    this.day = TBaseHelper.deepCopy(other.day);
  }

  public Date deepCopy() {
    return new Date(this);
  }

  @Deprecated
  public Date clone() {
    return new Date(this);
  }

  public short  getYear() {
    return this.year;
  }

  public Date setYear(short year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bit_vector.clear(__YEAR_ISSET_ID);
  }

  // Returns true if field year is set (has been assigned a value) and false otherwise
  public boolean isSetYear() {
    return __isset_bit_vector.get(__YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bit_vector.set(__YEAR_ISSET_ID, value);
  }

  public byte  getMonth() {
    return this.month;
  }

  public Date setMonth(byte month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bit_vector.clear(__MONTH_ISSET_ID);
  }

  // Returns true if field month is set (has been assigned a value) and false otherwise
  public boolean isSetMonth() {
    return __isset_bit_vector.get(__MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bit_vector.set(__MONTH_ISSET_ID, value);
  }

  public byte  getDay() {
    return this.day;
  }

  public Date setDay(byte day) {
    this.day = day;
    setDayIsSet(true);
    return this;
  }

  public void unsetDay() {
    __isset_bit_vector.clear(__DAY_ISSET_ID);
  }

  // Returns true if field day is set (has been assigned a value) and false otherwise
  public boolean isSetDay() {
    return __isset_bit_vector.get(__DAY_ISSET_ID);
  }

  public void setDayIsSet(boolean value) {
    __isset_bit_vector.set(__DAY_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Short)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((Byte)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Byte)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case YEAR:
      return new Short(getYear());

    case MONTH:
      return new Byte(getMonth());

    case DAY:
      return new Byte(getDay());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DAY:
      return isSetDay();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Date)
      return this.equals((Date)that);
    return false;
  }

  public boolean equals(Date that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!TBaseHelper.equalsNobinary(this.year, that.year))
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!TBaseHelper.equalsNobinary(this.month, that.month))
        return false;
    }

    boolean this_present_day = true;
    boolean that_present_day = true;
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!TBaseHelper.equalsNobinary(this.day, that.day))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_year = true;
    builder.append(present_year);
    if (present_year)
      builder.append(year);

    boolean present_month = true;
    builder.append(present_month);
    if (present_month)
      builder.append(month);

    boolean present_day = true;
    builder.append(present_day);
    if (present_day)
      builder.append(day);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Date other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(year, other.year);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(month, other.month);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(day, other.day);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case YEAR:
          if (field.type == TType.I16) {
            this.year = iprot.readI16();
            setYearIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MONTH:
          if (field.type == TType.BYTE) {
            this.month = iprot.readByte();
            setMonthIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DAY:
          if (field.type == TType.BYTE) {
            this.day = iprot.readByte();
            setDayIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(YEAR_FIELD_DESC);
    oprot.writeI16(this.year);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MONTH_FIELD_DESC);
    oprot.writeByte(this.month);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DAY_FIELD_DESC);
    oprot.writeByte(this.day);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Date");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("year");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getYear(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("month");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMonth(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("day");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getDay(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

