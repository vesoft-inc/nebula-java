/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.graph;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class GraphService {

  public interface Iface {

    public AuthResponse authenticate(String username, String password) throws TException;

    public void signout(long sessionId) throws TException;

    public ExecutionResponse execute(long sessionId, String stmt) throws TException;

  }

  public interface AsyncIface {

    public void authenticate(String username, String password, AsyncMethodCallback resultHandler) throws TException;

    public void signout(long sessionId, AsyncMethodCallback resultHandler) throws TException;

    public void execute(long sessionId, String stmt, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends EventHandlerBase implements Iface, TClientIf {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    @Override
    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    @Override
    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public AuthResponse authenticate(String username, String password) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.authenticate", null);
      this.setContextStack(ctx);
      send_authenticate(username, password);
      return recv_authenticate();
    }

    public void send_authenticate(String username, String password) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.authenticate", null);
      oprot_.writeMessageBegin(new TMessage("authenticate", TMessageType.CALL, seqid_));
      authenticate_args args = new authenticate_args();
      args.username = username;
      args.password = password;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.authenticate", args);
      return;
    }

    public AuthResponse recv_authenticate() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.authenticate");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      authenticate_result result = new authenticate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.authenticate", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticate failed: unknown result");
    }

    public void signout(long sessionId) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.signout", null);
      this.setContextStack(ctx);
      send_signout(sessionId);
    }

    public void send_signout(long sessionId) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.signout", null);
      oprot_.writeMessageBegin(new TMessage("signout", TMessageType.CALL, seqid_));
      signout_args args = new signout_args();
      args.sessionId = sessionId;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().onewayFlush();
      super.postWrite(ctx, "GraphService.signout", args);
      return;
    }

    public ExecutionResponse execute(long sessionId, String stmt) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.execute", null);
      this.setContextStack(ctx);
      send_execute(sessionId, stmt);
      return recv_execute();
    }

    public void send_execute(long sessionId, String stmt) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.execute", null);
      oprot_.writeMessageBegin(new TMessage("execute", TMessageType.CALL, seqid_));
      execute_args args = new execute_args();
      args.sessionId = sessionId;
      args.stmt = stmt;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.execute", args);
      return;
    }

    public ExecutionResponse recv_execute() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.execute");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      execute_result result = new execute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.execute", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "execute failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void authenticate(String username, String password, AsyncMethodCallback resultHandler18) throws TException {
      checkReady();
      authenticate_call method_call = new authenticate_call(username, password, resultHandler18, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticate_call extends TAsyncMethodCall {
      private String username;
      private String password;
      public authenticate_call(String username, String password, AsyncMethodCallback resultHandler19, TAsyncClient client15, TProtocolFactory protocolFactory16, TNonblockingTransport transport17) throws TException {
        super(client15, protocolFactory16, transport17, resultHandler19, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("authenticate", TMessageType.CALL, 0));
        authenticate_args args = new authenticate_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AuthResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticate();
      }
    }

    public void signout(long sessionId, AsyncMethodCallback resultHandler23) throws TException {
      checkReady();
      signout_call method_call = new signout_call(sessionId, resultHandler23, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signout_call extends TAsyncMethodCall {
      private long sessionId;
      public signout_call(long sessionId, AsyncMethodCallback resultHandler24, TAsyncClient client20, TProtocolFactory protocolFactory21, TNonblockingTransport transport22) throws TException {
        super(client20, protocolFactory21, transport22, resultHandler24, true);
        this.sessionId = sessionId;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("signout", TMessageType.CALL, 0));
        signout_args args = new signout_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void execute(long sessionId, String stmt, AsyncMethodCallback resultHandler28) throws TException {
      checkReady();
      execute_call method_call = new execute_call(sessionId, stmt, resultHandler28, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execute_call extends TAsyncMethodCall {
      private long sessionId;
      private String stmt;
      public execute_call(long sessionId, String stmt, AsyncMethodCallback resultHandler29, TAsyncClient client25, TProtocolFactory protocolFactory26, TNonblockingTransport transport27) throws TException {
        super(client25, protocolFactory26, transport27, resultHandler29, false);
        this.sessionId = sessionId;
        this.stmt = stmt;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("execute", TMessageType.CALL, 0));
        execute_args args = new execute_args();
        args.setSessionId(sessionId);
        args.setStmt(stmt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecutionResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execute();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      event_handler_ = new TProcessorEventHandler(); // Empty handler
      processMap_.put("authenticate", new authenticate());
      processMap_.put("signout", new signout());
      processMap_.put("execute", new execute());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException;
    }

    public void setEventHandler(TProcessorEventHandler handler) {
      this.event_handler_ = handler;
    }

    private Iface iface_;
    protected TProcessorEventHandler event_handler_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot, server_ctx);
      return true;
    }

    private class authenticate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.authenticate", server_ctx);
        authenticate_args args = new authenticate_args();
        event_handler_.preRead(handler_ctx, "GraphService.authenticate");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.authenticate", args);
        authenticate_result result = new authenticate_result();
        result.success = iface_.authenticate(args.username, args.password);
        event_handler_.preWrite(handler_ctx, "GraphService.authenticate", result);
        oprot.writeMessageBegin(new TMessage("authenticate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.authenticate", result);
      }

    }

    private class signout implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.signout", server_ctx);
        signout_args args = new signout_args();
        event_handler_.preRead(handler_ctx, "GraphService.signout");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.signout", args);
        iface_.signout(args.sessionId);
        return;
      }
    }

    private class execute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.execute", server_ctx);
        execute_args args = new execute_args();
        event_handler_.preRead(handler_ctx, "GraphService.execute");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.execute", args);
        execute_result result = new execute_result();
        result.success = iface_.execute(args.sessionId, args.stmt);
        event_handler_.preWrite(handler_ctx, "GraphService.execute", result);
        oprot.writeMessageBegin(new TMessage("execute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.execute", result);
      }

    }

  }

  public static class authenticate_args implements TBase, java.io.Serializable, Cloneable, Comparable<authenticate_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticate_args");
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)2);

    public String username;
    public String password;
    public static final int USERNAME = 1;
    public static final int PASSWORD = 2;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMetaDataMap.put(PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(authenticate_args.class, metaDataMap);
    }

    public authenticate_args() {
    }

    public authenticate_args(
      String username,
      String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_args(authenticate_args other) {
      if (other.isSetUsername()) {
        this.username = TBaseHelper.deepCopy(other.username);
      }
      if (other.isSetPassword()) {
        this.password = TBaseHelper.deepCopy(other.password);
      }
    }

    public authenticate_args deepCopy() {
      return new authenticate_args(this);
    }

    @Deprecated
    public authenticate_args clone() {
      return new authenticate_args(this);
    }

    public String  getUsername() {
      return this.username;
    }

    public authenticate_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    // Returns true if field username is set (has been assigned a value) and false otherwise
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String  getPassword() {
      return this.password;
    }

    public authenticate_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    // Returns true if field password is set (has been assigned a value) and false otherwise
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_args)
        return this.equals((authenticate_args)that);
      return false;
    }

    public boolean equals(authenticate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!TBaseHelper.equalsNobinary(this.username, that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!TBaseHelper.equalsNobinary(this.password, that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_username = true && (isSetUsername());
      builder.append(present_username);
      if (present_username)
        builder.append(username);

      boolean present_password = true && (isSetPassword());
      builder.append(present_password);
      if (present_password)
        builder.append(password);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(authenticate_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case USERNAME:
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PASSWORD:
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("authenticate_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("username");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getUsername() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getUsername(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("password");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getPassword() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getPassword(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class authenticate_result implements TBase, java.io.Serializable, Cloneable, Comparable<authenticate_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticate_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public AuthResponse success;
    public static final int SUCCESS = 0;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, AuthResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(authenticate_result.class, metaDataMap);
    }

    public authenticate_result() {
    }

    public authenticate_result(
      AuthResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_result(authenticate_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public authenticate_result deepCopy() {
      return new authenticate_result(this);
    }

    @Deprecated
    public authenticate_result clone() {
      return new authenticate_result(this);
    }

    public AuthResponse  getSuccess() {
      return this.success;
    }

    public authenticate_result setSuccess(AuthResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AuthResponse)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_result)
        return this.equals((authenticate_result)that);
      return false;
    }

    public boolean equals(authenticate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(authenticate_result other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new AuthResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("authenticate_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class signout_args implements TBase, java.io.Serializable, Cloneable, Comparable<signout_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("signout_args");
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.I64, (short)1);

    public long sessionId;
    public static final int SESSIONID = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SESSIONID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(signout_args.class, metaDataMap);
    }

    public signout_args() {
    }

    public signout_args(
      long sessionId)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signout_args(signout_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.sessionId = TBaseHelper.deepCopy(other.sessionId);
    }

    public signout_args deepCopy() {
      return new signout_args(this);
    }

    @Deprecated
    public signout_args clone() {
      return new signout_args(this);
    }

    public long  getSessionId() {
      return this.sessionId;
    }

    public signout_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bit_vector.clear(__SESSIONID_ISSET_ID);
    }

    // Returns true if field sessionId is set (has been assigned a value) and false otherwise
    public boolean isSetSessionId() {
      return __isset_bit_vector.get(__SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bit_vector.set(__SESSIONID_ISSET_ID, value);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SESSIONID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return new Long(getSessionId());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return isSetSessionId();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signout_args)
        return this.equals((signout_args)that);
      return false;
    }

    public boolean equals(signout_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!TBaseHelper.equalsNobinary(this.sessionId, that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionId = true;
      builder.append(present_sessionId);
      if (present_sessionId)
        builder.append(sessionId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(signout_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SESSIONID:
            if (field.type == TType.I64) {
              this.sessionId = iprot.readI64();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.sessionId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("signout_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("sessionId");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getSessionId(), indent + 1, prettyPrint));
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class execute_args implements TBase, java.io.Serializable, Cloneable, Comparable<execute_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("execute_args");
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.I64, (short)1);
    private static final TField STMT_FIELD_DESC = new TField("stmt", TType.STRING, (short)2);

    public long sessionId;
    public String stmt;
    public static final int SESSIONID = 1;
    public static final int STMT = 2;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SESSIONID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMetaDataMap.put(STMT, new FieldMetaData("stmt", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(execute_args.class, metaDataMap);
    }

    public execute_args() {
    }

    public execute_args(
      long sessionId,
      String stmt)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.stmt = stmt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execute_args(execute_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.sessionId = TBaseHelper.deepCopy(other.sessionId);
      if (other.isSetStmt()) {
        this.stmt = TBaseHelper.deepCopy(other.stmt);
      }
    }

    public execute_args deepCopy() {
      return new execute_args(this);
    }

    @Deprecated
    public execute_args clone() {
      return new execute_args(this);
    }

    public long  getSessionId() {
      return this.sessionId;
    }

    public execute_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bit_vector.clear(__SESSIONID_ISSET_ID);
    }

    // Returns true if field sessionId is set (has been assigned a value) and false otherwise
    public boolean isSetSessionId() {
      return __isset_bit_vector.get(__SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bit_vector.set(__SESSIONID_ISSET_ID, value);
    }

    public String  getStmt() {
      return this.stmt;
    }

    public execute_args setStmt(String stmt) {
      this.stmt = stmt;
      return this;
    }

    public void unsetStmt() {
      this.stmt = null;
    }

    // Returns true if field stmt is set (has been assigned a value) and false otherwise
    public boolean isSetStmt() {
      return this.stmt != null;
    }

    public void setStmtIsSet(boolean value) {
      if (!value) {
        this.stmt = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SESSIONID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      case STMT:
        if (value == null) {
          unsetStmt();
        } else {
          setStmt((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return new Long(getSessionId());

      case STMT:
        return getStmt();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return isSetSessionId();
      case STMT:
        return isSetStmt();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_args)
        return this.equals((execute_args)that);
      return false;
    }

    public boolean equals(execute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!TBaseHelper.equalsNobinary(this.sessionId, that.sessionId))
          return false;
      }

      boolean this_present_stmt = true && this.isSetStmt();
      boolean that_present_stmt = true && that.isSetStmt();
      if (this_present_stmt || that_present_stmt) {
        if (!(this_present_stmt && that_present_stmt))
          return false;
        if (!TBaseHelper.equalsNobinary(this.stmt, that.stmt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_sessionId = true;
      builder.append(present_sessionId);
      if (present_sessionId)
        builder.append(sessionId);

      boolean present_stmt = true && (isSetStmt());
      builder.append(present_stmt);
      if (present_stmt)
        builder.append(stmt);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(execute_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetStmt()).compareTo(other.isSetStmt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(stmt, other.stmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SESSIONID:
            if (field.type == TType.I64) {
              this.sessionId = iprot.readI64();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STMT:
            if (field.type == TType.STRING) {
              this.stmt = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.sessionId);
      oprot.writeFieldEnd();
      if (this.stmt != null) {
        oprot.writeFieldBegin(STMT_FIELD_DESC);
        oprot.writeString(this.stmt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("execute_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("sessionId");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getSessionId(), indent + 1, prettyPrint));
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stmt");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStmt() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getStmt(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class execute_result implements TBase, java.io.Serializable, Cloneable, Comparable<execute_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("execute_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public ExecutionResponse success;
    public static final int SUCCESS = 0;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ExecutionResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(execute_result.class, metaDataMap);
    }

    public execute_result() {
    }

    public execute_result(
      ExecutionResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execute_result(execute_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public execute_result deepCopy() {
      return new execute_result(this);
    }

    @Deprecated
    public execute_result clone() {
      return new execute_result(this);
    }

    public ExecutionResponse  getSuccess() {
      return this.success;
    }

    public execute_result setSuccess(ExecutionResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecutionResponse)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_result)
        return this.equals((execute_result)that);
      return false;
    }

    public boolean equals(execute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(execute_result other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new ExecutionResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("execute_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
