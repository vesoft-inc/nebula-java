/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.graph;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class GraphService {

  public interface Iface {

    public AuthResponse authenticate(byte[] username, byte[] password) throws TException;

    public void signout(long sessionId) throws TException;

    public ExecutionResponse execute(long sessionId, byte[] stmt) throws TException;

    public ExecutionResponse executeWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap) throws TException;

    public byte[] executeJson(long sessionId, byte[] stmt) throws TException;

    public byte[] executeJsonWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap) throws TException;

    public VerifyClientVersionResp verifyClientVersion(VerifyClientVersionReq req) throws TException;

  }

  public interface AsyncIface {

    public void authenticate(byte[] username, byte[] password, AsyncMethodCallback resultHandler) throws TException;

    public void signout(long sessionId, AsyncMethodCallback resultHandler) throws TException;

    public void execute(long sessionId, byte[] stmt, AsyncMethodCallback resultHandler) throws TException;

    public void executeWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap, AsyncMethodCallback resultHandler) throws TException;

    public void executeJson(long sessionId, byte[] stmt, AsyncMethodCallback resultHandler) throws TException;

    public void executeJsonWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap, AsyncMethodCallback resultHandler) throws TException;

    public void verifyClientVersion(VerifyClientVersionReq req, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends EventHandlerBase implements Iface, TClientIf {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    @Override
    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    @Override
    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public AuthResponse authenticate(byte[] username, byte[] password) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.authenticate", null);
      this.setContextStack(ctx);
      send_authenticate(username, password);
      return recv_authenticate();
    }

    public void send_authenticate(byte[] username, byte[] password) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.authenticate", null);
      oprot_.writeMessageBegin(new TMessage("authenticate", TMessageType.CALL, seqid_));
      authenticate_args args = new authenticate_args();
      args.username = username;
      args.password = password;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.authenticate", args);
      return;
    }

    public AuthResponse recv_authenticate() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.authenticate");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      authenticate_result result = new authenticate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.authenticate", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticate failed: unknown result");
    }

    public void signout(long sessionId) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.signout", null);
      this.setContextStack(ctx);
      send_signout(sessionId);
    }

    public void send_signout(long sessionId) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.signout", null);
      oprot_.writeMessageBegin(new TMessage("signout", TMessageType.CALL, seqid_));
      signout_args args = new signout_args();
      args.sessionId = sessionId;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().onewayFlush();
      super.postWrite(ctx, "GraphService.signout", args);
      return;
    }

    public ExecutionResponse execute(long sessionId, byte[] stmt) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.execute", null);
      this.setContextStack(ctx);
      send_execute(sessionId, stmt);
      return recv_execute();
    }

    public void send_execute(long sessionId, byte[] stmt) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.execute", null);
      oprot_.writeMessageBegin(new TMessage("execute", TMessageType.CALL, seqid_));
      execute_args args = new execute_args();
      args.sessionId = sessionId;
      args.stmt = stmt;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.execute", args);
      return;
    }

    public ExecutionResponse recv_execute() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.execute");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      execute_result result = new execute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.execute", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "execute failed: unknown result");
    }

    public ExecutionResponse executeWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.executeWithParameter", null);
      this.setContextStack(ctx);
      send_executeWithParameter(sessionId, stmt, parameterMap);
      return recv_executeWithParameter();
    }

    public void send_executeWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.executeWithParameter", null);
      oprot_.writeMessageBegin(new TMessage("executeWithParameter", TMessageType.CALL, seqid_));
      executeWithParameter_args args = new executeWithParameter_args();
      args.sessionId = sessionId;
      args.stmt = stmt;
      args.parameterMap = parameterMap;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.executeWithParameter", args);
      return;
    }

    public ExecutionResponse recv_executeWithParameter() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.executeWithParameter");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      executeWithParameter_result result = new executeWithParameter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.executeWithParameter", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "executeWithParameter failed: unknown result");
    }

    public byte[] executeJson(long sessionId, byte[] stmt) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.executeJson", null);
      this.setContextStack(ctx);
      send_executeJson(sessionId, stmt);
      return recv_executeJson();
    }

    public void send_executeJson(long sessionId, byte[] stmt) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.executeJson", null);
      oprot_.writeMessageBegin(new TMessage("executeJson", TMessageType.CALL, seqid_));
      executeJson_args args = new executeJson_args();
      args.sessionId = sessionId;
      args.stmt = stmt;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.executeJson", args);
      return;
    }

    public byte[] recv_executeJson() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.executeJson");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      executeJson_result result = new executeJson_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.executeJson", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "executeJson failed: unknown result");
    }

    public byte[] executeJsonWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.executeJsonWithParameter", null);
      this.setContextStack(ctx);
      send_executeJsonWithParameter(sessionId, stmt, parameterMap);
      return recv_executeJsonWithParameter();
    }

    public void send_executeJsonWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.executeJsonWithParameter", null);
      oprot_.writeMessageBegin(new TMessage("executeJsonWithParameter", TMessageType.CALL, seqid_));
      executeJsonWithParameter_args args = new executeJsonWithParameter_args();
      args.sessionId = sessionId;
      args.stmt = stmt;
      args.parameterMap = parameterMap;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.executeJsonWithParameter", args);
      return;
    }

    public byte[] recv_executeJsonWithParameter() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.executeJsonWithParameter");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      executeJsonWithParameter_result result = new executeJsonWithParameter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.executeJsonWithParameter", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "executeJsonWithParameter failed: unknown result");
    }

    public VerifyClientVersionResp verifyClientVersion(VerifyClientVersionReq req) throws TException
    {
      ContextStack ctx = getContextStack("GraphService.verifyClientVersion", null);
      this.setContextStack(ctx);
      send_verifyClientVersion(req);
      return recv_verifyClientVersion();
    }

    public void send_verifyClientVersion(VerifyClientVersionReq req) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "GraphService.verifyClientVersion", null);
      oprot_.writeMessageBegin(new TMessage("verifyClientVersion", TMessageType.CALL, seqid_));
      verifyClientVersion_args args = new verifyClientVersion_args();
      args.req = req;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "GraphService.verifyClientVersion", args);
      return;
    }

    public VerifyClientVersionResp recv_verifyClientVersion() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "GraphService.verifyClientVersion");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      verifyClientVersion_result result = new verifyClientVersion_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "GraphService.verifyClientVersion", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "verifyClientVersion failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void authenticate(byte[] username, byte[] password, AsyncMethodCallback resultHandler36) throws TException {
      checkReady();
      authenticate_call method_call = new authenticate_call(username, password, resultHandler36, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticate_call extends TAsyncMethodCall {
      private byte[] username;
      private byte[] password;
      public authenticate_call(byte[] username, byte[] password, AsyncMethodCallback resultHandler37, TAsyncClient client33, TProtocolFactory protocolFactory34, TNonblockingTransport transport35) throws TException {
        super(client33, protocolFactory34, transport35, resultHandler37, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("authenticate", TMessageType.CALL, 0));
        authenticate_args args = new authenticate_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AuthResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticate();
      }
    }

    public void signout(long sessionId, AsyncMethodCallback resultHandler41) throws TException {
      checkReady();
      signout_call method_call = new signout_call(sessionId, resultHandler41, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signout_call extends TAsyncMethodCall {
      private long sessionId;
      public signout_call(long sessionId, AsyncMethodCallback resultHandler42, TAsyncClient client38, TProtocolFactory protocolFactory39, TNonblockingTransport transport40) throws TException {
        super(client38, protocolFactory39, transport40, resultHandler42, true);
        this.sessionId = sessionId;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("signout", TMessageType.CALL, 0));
        signout_args args = new signout_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void execute(long sessionId, byte[] stmt, AsyncMethodCallback resultHandler46) throws TException {
      checkReady();
      execute_call method_call = new execute_call(sessionId, stmt, resultHandler46, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execute_call extends TAsyncMethodCall {
      private long sessionId;
      private byte[] stmt;
      public execute_call(long sessionId, byte[] stmt, AsyncMethodCallback resultHandler47, TAsyncClient client43, TProtocolFactory protocolFactory44, TNonblockingTransport transport45) throws TException {
        super(client43, protocolFactory44, transport45, resultHandler47, false);
        this.sessionId = sessionId;
        this.stmt = stmt;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("execute", TMessageType.CALL, 0));
        execute_args args = new execute_args();
        args.setSessionId(sessionId);
        args.setStmt(stmt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecutionResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execute();
      }
    }

    public void executeWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap, AsyncMethodCallback resultHandler51) throws TException {
      checkReady();
      executeWithParameter_call method_call = new executeWithParameter_call(sessionId, stmt, parameterMap, resultHandler51, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeWithParameter_call extends TAsyncMethodCall {
      private long sessionId;
      private byte[] stmt;
      private Map<byte[],com.vesoft.nebula.Value> parameterMap;
      public executeWithParameter_call(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap, AsyncMethodCallback resultHandler52, TAsyncClient client48, TProtocolFactory protocolFactory49, TNonblockingTransport transport50) throws TException {
        super(client48, protocolFactory49, transport50, resultHandler52, false);
        this.sessionId = sessionId;
        this.stmt = stmt;
        this.parameterMap = parameterMap;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("executeWithParameter", TMessageType.CALL, 0));
        executeWithParameter_args args = new executeWithParameter_args();
        args.setSessionId(sessionId);
        args.setStmt(stmt);
        args.setParameterMap(parameterMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecutionResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeWithParameter();
      }
    }

    public void executeJson(long sessionId, byte[] stmt, AsyncMethodCallback resultHandler56) throws TException {
      checkReady();
      executeJson_call method_call = new executeJson_call(sessionId, stmt, resultHandler56, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeJson_call extends TAsyncMethodCall {
      private long sessionId;
      private byte[] stmt;
      public executeJson_call(long sessionId, byte[] stmt, AsyncMethodCallback resultHandler57, TAsyncClient client53, TProtocolFactory protocolFactory54, TNonblockingTransport transport55) throws TException {
        super(client53, protocolFactory54, transport55, resultHandler57, false);
        this.sessionId = sessionId;
        this.stmt = stmt;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("executeJson", TMessageType.CALL, 0));
        executeJson_args args = new executeJson_args();
        args.setSessionId(sessionId);
        args.setStmt(stmt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte[] getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeJson();
      }
    }

    public void executeJsonWithParameter(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap, AsyncMethodCallback resultHandler61) throws TException {
      checkReady();
      executeJsonWithParameter_call method_call = new executeJsonWithParameter_call(sessionId, stmt, parameterMap, resultHandler61, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeJsonWithParameter_call extends TAsyncMethodCall {
      private long sessionId;
      private byte[] stmt;
      private Map<byte[],com.vesoft.nebula.Value> parameterMap;
      public executeJsonWithParameter_call(long sessionId, byte[] stmt, Map<byte[],com.vesoft.nebula.Value> parameterMap, AsyncMethodCallback resultHandler62, TAsyncClient client58, TProtocolFactory protocolFactory59, TNonblockingTransport transport60) throws TException {
        super(client58, protocolFactory59, transport60, resultHandler62, false);
        this.sessionId = sessionId;
        this.stmt = stmt;
        this.parameterMap = parameterMap;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("executeJsonWithParameter", TMessageType.CALL, 0));
        executeJsonWithParameter_args args = new executeJsonWithParameter_args();
        args.setSessionId(sessionId);
        args.setStmt(stmt);
        args.setParameterMap(parameterMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte[] getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeJsonWithParameter();
      }
    }

    public void verifyClientVersion(VerifyClientVersionReq req, AsyncMethodCallback resultHandler66) throws TException {
      checkReady();
      verifyClientVersion_call method_call = new verifyClientVersion_call(req, resultHandler66, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyClientVersion_call extends TAsyncMethodCall {
      private VerifyClientVersionReq req;
      public verifyClientVersion_call(VerifyClientVersionReq req, AsyncMethodCallback resultHandler67, TAsyncClient client63, TProtocolFactory protocolFactory64, TNonblockingTransport transport65) throws TException {
        super(client63, protocolFactory64, transport65, resultHandler67, false);
        this.req = req;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("verifyClientVersion", TMessageType.CALL, 0));
        verifyClientVersion_args args = new verifyClientVersion_args();
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public VerifyClientVersionResp getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyClientVersion();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      event_handler_ = new TProcessorEventHandler(); // Empty handler
      processMap_.put("authenticate", new authenticate());
      processMap_.put("signout", new signout());
      processMap_.put("execute", new execute());
      processMap_.put("executeWithParameter", new executeWithParameter());
      processMap_.put("executeJson", new executeJson());
      processMap_.put("executeJsonWithParameter", new executeJsonWithParameter());
      processMap_.put("verifyClientVersion", new verifyClientVersion());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException;
    }

    public void setEventHandler(TProcessorEventHandler handler) {
      this.event_handler_ = handler;
    }

    private Iface iface_;
    protected TProcessorEventHandler event_handler_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot, server_ctx);
      return true;
    }

    private class authenticate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.authenticate", server_ctx);
        authenticate_args args = new authenticate_args();
        event_handler_.preRead(handler_ctx, "GraphService.authenticate");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.authenticate", args);
        authenticate_result result = new authenticate_result();
        result.success = iface_.authenticate(args.username, args.password);
        event_handler_.preWrite(handler_ctx, "GraphService.authenticate", result);
        oprot.writeMessageBegin(new TMessage("authenticate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.authenticate", result);
      }

    }

    private class signout implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.signout", server_ctx);
        signout_args args = new signout_args();
        event_handler_.preRead(handler_ctx, "GraphService.signout");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.signout", args);
        iface_.signout(args.sessionId);
        return;
      }
    }

    private class execute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.execute", server_ctx);
        execute_args args = new execute_args();
        event_handler_.preRead(handler_ctx, "GraphService.execute");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.execute", args);
        execute_result result = new execute_result();
        result.success = iface_.execute(args.sessionId, args.stmt);
        event_handler_.preWrite(handler_ctx, "GraphService.execute", result);
        oprot.writeMessageBegin(new TMessage("execute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.execute", result);
      }

    }

    private class executeWithParameter implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.executeWithParameter", server_ctx);
        executeWithParameter_args args = new executeWithParameter_args();
        event_handler_.preRead(handler_ctx, "GraphService.executeWithParameter");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.executeWithParameter", args);
        executeWithParameter_result result = new executeWithParameter_result();
        result.success = iface_.executeWithParameter(args.sessionId, args.stmt, args.parameterMap);
        event_handler_.preWrite(handler_ctx, "GraphService.executeWithParameter", result);
        oprot.writeMessageBegin(new TMessage("executeWithParameter", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.executeWithParameter", result);
      }

    }

    private class executeJson implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.executeJson", server_ctx);
        executeJson_args args = new executeJson_args();
        event_handler_.preRead(handler_ctx, "GraphService.executeJson");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.executeJson", args);
        executeJson_result result = new executeJson_result();
        result.success = iface_.executeJson(args.sessionId, args.stmt);
        event_handler_.preWrite(handler_ctx, "GraphService.executeJson", result);
        oprot.writeMessageBegin(new TMessage("executeJson", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.executeJson", result);
      }

    }

    private class executeJsonWithParameter implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.executeJsonWithParameter", server_ctx);
        executeJsonWithParameter_args args = new executeJsonWithParameter_args();
        event_handler_.preRead(handler_ctx, "GraphService.executeJsonWithParameter");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.executeJsonWithParameter", args);
        executeJsonWithParameter_result result = new executeJsonWithParameter_result();
        result.success = iface_.executeJsonWithParameter(args.sessionId, args.stmt, args.parameterMap);
        event_handler_.preWrite(handler_ctx, "GraphService.executeJsonWithParameter", result);
        oprot.writeMessageBegin(new TMessage("executeJsonWithParameter", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.executeJsonWithParameter", result);
      }

    }

    private class verifyClientVersion implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("GraphService.verifyClientVersion", server_ctx);
        verifyClientVersion_args args = new verifyClientVersion_args();
        event_handler_.preRead(handler_ctx, "GraphService.verifyClientVersion");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "GraphService.verifyClientVersion", args);
        verifyClientVersion_result result = new verifyClientVersion_result();
        result.success = iface_.verifyClientVersion(args.req);
        event_handler_.preWrite(handler_ctx, "GraphService.verifyClientVersion", result);
        oprot.writeMessageBegin(new TMessage("verifyClientVersion", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "GraphService.verifyClientVersion", result);
      }

    }

  }

  public static class authenticate_args implements TBase, java.io.Serializable, Cloneable, Comparable<authenticate_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticate_args");
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)2);

    public byte[] username;
    public byte[] password;
    public static final int USERNAME = 1;
    public static final int PASSWORD = 2;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMetaDataMap.put(PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(authenticate_args.class, metaDataMap);
    }

    public authenticate_args() {
    }

    public authenticate_args(
        byte[] username,
        byte[] password) {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_args(authenticate_args other) {
      if (other.isSetUsername()) {
        this.username = TBaseHelper.deepCopy(other.username);
      }
      if (other.isSetPassword()) {
        this.password = TBaseHelper.deepCopy(other.password);
      }
    }

    public authenticate_args deepCopy() {
      return new authenticate_args(this);
    }

    public byte[] getUsername() {
      return this.username;
    }

    public authenticate_args setUsername(byte[] username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    // Returns true if field username is set (has been assigned a value) and false otherwise
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean __value) {
      if (!__value) {
        this.username = null;
      }
    }

    public byte[] getPassword() {
      return this.password;
    }

    public authenticate_args setPassword(byte[] password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    // Returns true if field password is set (has been assigned a value) and false otherwise
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean __value) {
      if (!__value) {
        this.password = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case USERNAME:
        if (__value == null) {
          unsetUsername();
        } else {
          setUsername((byte[])__value);
        }
        break;

      case PASSWORD:
        if (__value == null) {
          unsetPassword();
        } else {
          setPassword((byte[])__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof authenticate_args))
        return false;
      authenticate_args that = (authenticate_args)_that;

      if (!TBaseHelper.equalsSlow(this.isSetUsername(), that.isSetUsername(), this.username, that.username)) { return false; }

      if (!TBaseHelper.equalsSlow(this.isSetPassword(), that.isSetPassword(), this.password, that.password)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {username, password});
    }

    @Override
    public int compareTo(authenticate_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(username, other.username);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(password, other.password);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case USERNAME:
            if (__field.type == TType.STRING) {
              this.username = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          case PASSWORD:
            if (__field.type == TType.STRING) {
              this.password = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeBinary(this.username);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeBinary(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("authenticate_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("username");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getUsername() == null) {
        sb.append("null");
      } else {
          int __username_size = Math.min(this.getUsername().length, 128);
          for (int i = 0; i < __username_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getUsername()[i]).length() > 1 ? Integer.toHexString(this.getUsername()[i]).substring(Integer.toHexString(this.getUsername()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getUsername()[i]).toUpperCase());
          }
          if (this.getUsername().length > 128) sb.append(" ...");
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("password");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getPassword() == null) {
        sb.append("null");
      } else {
          int __password_size = Math.min(this.getPassword().length, 128);
          for (int i = 0; i < __password_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getPassword()[i]).length() > 1 ? Integer.toHexString(this.getPassword()[i]).substring(Integer.toHexString(this.getPassword()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getPassword()[i]).toUpperCase());
          }
          if (this.getPassword().length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticate_result implements TBase, java.io.Serializable, Cloneable, Comparable<authenticate_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticate_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public AuthResponse success;
    public static final int SUCCESS = 0;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, AuthResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(authenticate_result.class, metaDataMap);
    }

    public authenticate_result() {
    }

    public authenticate_result(
        AuthResponse success) {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_result(authenticate_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public authenticate_result deepCopy() {
      return new authenticate_result(this);
    }

    public AuthResponse getSuccess() {
      return this.success;
    }

    public authenticate_result setSuccess(AuthResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean __value) {
      if (!__value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SUCCESS:
        if (__value == null) {
          unsetSuccess();
        } else {
          setSuccess((AuthResponse)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof authenticate_result))
        return false;
      authenticate_result that = (authenticate_result)_that;

      if (!TBaseHelper.equalsNobinary(this.isSetSuccess(), that.isSetSuccess(), this.success, that.success)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {success});
    }

    @Override
    public int compareTo(authenticate_result other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(success, other.success);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SUCCESS:
            if (__field.type == TType.STRUCT) {
              this.success = new AuthResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("authenticate_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class signout_args implements TBase, java.io.Serializable, Cloneable, Comparable<signout_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("signout_args");
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.I64, (short)1);

    public long sessionId;
    public static final int SESSIONID = 1;

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SESSIONID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(signout_args.class, metaDataMap);
    }

    public signout_args() {
    }

    public signout_args(
        long sessionId) {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signout_args(signout_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.sessionId = TBaseHelper.deepCopy(other.sessionId);
    }

    public signout_args deepCopy() {
      return new signout_args(this);
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public signout_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bit_vector.clear(__SESSIONID_ISSET_ID);
    }

    // Returns true if field sessionId is set (has been assigned a value) and false otherwise
    public boolean isSetSessionId() {
      return __isset_bit_vector.get(__SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean __value) {
      __isset_bit_vector.set(__SESSIONID_ISSET_ID, __value);
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SESSIONID:
        if (__value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return new Long(getSessionId());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof signout_args))
        return false;
      signout_args that = (signout_args)_that;

      if (!TBaseHelper.equalsNobinary(this.sessionId, that.sessionId)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {sessionId});
    }

    @Override
    public int compareTo(signout_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(sessionId, other.sessionId);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SESSIONID:
            if (__field.type == TType.I64) {
              this.sessionId = iprot.readI64();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.sessionId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("signout_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("sessionId");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getSessionId(), indent + 1, prettyPrint));
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class execute_args implements TBase, java.io.Serializable, Cloneable, Comparable<execute_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("execute_args");
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.I64, (short)1);
    private static final TField STMT_FIELD_DESC = new TField("stmt", TType.STRING, (short)2);

    public long sessionId;
    public byte[] stmt;
    public static final int SESSIONID = 1;
    public static final int STMT = 2;

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SESSIONID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMetaDataMap.put(STMT, new FieldMetaData("stmt", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(execute_args.class, metaDataMap);
    }

    public execute_args() {
    }

    public execute_args(
        long sessionId,
        byte[] stmt) {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.stmt = stmt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execute_args(execute_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.sessionId = TBaseHelper.deepCopy(other.sessionId);
      if (other.isSetStmt()) {
        this.stmt = TBaseHelper.deepCopy(other.stmt);
      }
    }

    public execute_args deepCopy() {
      return new execute_args(this);
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public execute_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bit_vector.clear(__SESSIONID_ISSET_ID);
    }

    // Returns true if field sessionId is set (has been assigned a value) and false otherwise
    public boolean isSetSessionId() {
      return __isset_bit_vector.get(__SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean __value) {
      __isset_bit_vector.set(__SESSIONID_ISSET_ID, __value);
    }

    public byte[] getStmt() {
      return this.stmt;
    }

    public execute_args setStmt(byte[] stmt) {
      this.stmt = stmt;
      return this;
    }

    public void unsetStmt() {
      this.stmt = null;
    }

    // Returns true if field stmt is set (has been assigned a value) and false otherwise
    public boolean isSetStmt() {
      return this.stmt != null;
    }

    public void setStmtIsSet(boolean __value) {
      if (!__value) {
        this.stmt = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SESSIONID:
        if (__value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)__value);
        }
        break;

      case STMT:
        if (__value == null) {
          unsetStmt();
        } else {
          setStmt((byte[])__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return new Long(getSessionId());

      case STMT:
        return getStmt();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof execute_args))
        return false;
      execute_args that = (execute_args)_that;

      if (!TBaseHelper.equalsNobinary(this.sessionId, that.sessionId)) { return false; }

      if (!TBaseHelper.equalsSlow(this.isSetStmt(), that.isSetStmt(), this.stmt, that.stmt)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {sessionId, stmt});
    }

    @Override
    public int compareTo(execute_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(sessionId, other.sessionId);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetStmt()).compareTo(other.isSetStmt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(stmt, other.stmt);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SESSIONID:
            if (__field.type == TType.I64) {
              this.sessionId = iprot.readI64();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          case STMT:
            if (__field.type == TType.STRING) {
              this.stmt = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.sessionId);
      oprot.writeFieldEnd();
      if (this.stmt != null) {
        oprot.writeFieldBegin(STMT_FIELD_DESC);
        oprot.writeBinary(this.stmt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("execute_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("sessionId");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getSessionId(), indent + 1, prettyPrint));
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stmt");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getStmt() == null) {
        sb.append("null");
      } else {
          int __stmt_size = Math.min(this.getStmt().length, 128);
          for (int i = 0; i < __stmt_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getStmt()[i]).length() > 1 ? Integer.toHexString(this.getStmt()[i]).substring(Integer.toHexString(this.getStmt()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getStmt()[i]).toUpperCase());
          }
          if (this.getStmt().length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class execute_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("execute_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public ExecutionResponse success;
    public static final int SUCCESS = 0;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ExecutionResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(execute_result.class, metaDataMap);
    }

    public execute_result() {
    }

    public execute_result(
        ExecutionResponse success) {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execute_result(execute_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public execute_result deepCopy() {
      return new execute_result(this);
    }

    public ExecutionResponse getSuccess() {
      return this.success;
    }

    public execute_result setSuccess(ExecutionResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean __value) {
      if (!__value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SUCCESS:
        if (__value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecutionResponse)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof execute_result))
        return false;
      execute_result that = (execute_result)_that;

      if (!TBaseHelper.equalsNobinary(this.isSetSuccess(), that.isSetSuccess(), this.success, that.success)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {success});
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SUCCESS:
            if (__field.type == TType.STRUCT) {
              this.success = new ExecutionResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("execute_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class executeWithParameter_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("executeWithParameter_args");
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.I64, (short)1);
    private static final TField STMT_FIELD_DESC = new TField("stmt", TType.STRING, (short)2);
    private static final TField PARAMETER_MAP_FIELD_DESC = new TField("parameterMap", TType.MAP, (short)3);

    public long sessionId;
    public byte[] stmt;
    public Map<byte[],com.vesoft.nebula.Value> parameterMap;
    public static final int SESSIONID = 1;
    public static final int STMT = 2;
    public static final int PARAMETERMAP = 3;

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SESSIONID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMetaDataMap.put(STMT, new FieldMetaData("stmt", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMetaDataMap.put(PARAMETERMAP, new FieldMetaData("parameterMap", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(executeWithParameter_args.class, metaDataMap);
    }

    public executeWithParameter_args() {
    }

    public executeWithParameter_args(
        long sessionId,
        byte[] stmt,
        Map<byte[],com.vesoft.nebula.Value> parameterMap) {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.stmt = stmt;
      this.parameterMap = parameterMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeWithParameter_args(executeWithParameter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.sessionId = TBaseHelper.deepCopy(other.sessionId);
      if (other.isSetStmt()) {
        this.stmt = TBaseHelper.deepCopy(other.stmt);
      }
      if (other.isSetParameterMap()) {
        this.parameterMap = TBaseHelper.deepCopy(other.parameterMap);
      }
    }

    public executeWithParameter_args deepCopy() {
      return new executeWithParameter_args(this);
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public executeWithParameter_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bit_vector.clear(__SESSIONID_ISSET_ID);
    }

    // Returns true if field sessionId is set (has been assigned a value) and false otherwise
    public boolean isSetSessionId() {
      return __isset_bit_vector.get(__SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean __value) {
      __isset_bit_vector.set(__SESSIONID_ISSET_ID, __value);
    }

    public byte[] getStmt() {
      return this.stmt;
    }

    public executeWithParameter_args setStmt(byte[] stmt) {
      this.stmt = stmt;
      return this;
    }

    public void unsetStmt() {
      this.stmt = null;
    }

    // Returns true if field stmt is set (has been assigned a value) and false otherwise
    public boolean isSetStmt() {
      return this.stmt != null;
    }

    public void setStmtIsSet(boolean __value) {
      if (!__value) {
        this.stmt = null;
      }
    }

    public Map<byte[],com.vesoft.nebula.Value> getParameterMap() {
      return this.parameterMap;
    }

    public executeWithParameter_args setParameterMap(Map<byte[],com.vesoft.nebula.Value> parameterMap) {
      this.parameterMap = parameterMap;
      return this;
    }

    public void unsetParameterMap() {
      this.parameterMap = null;
    }

    // Returns true if field parameterMap is set (has been assigned a value) and false otherwise
    public boolean isSetParameterMap() {
      return this.parameterMap != null;
    }

    public void setParameterMapIsSet(boolean __value) {
      if (!__value) {
        this.parameterMap = null;
      }
    }

    @SuppressWarnings("unchecked")
    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SESSIONID:
        if (__value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)__value);
        }
        break;

      case STMT:
        if (__value == null) {
          unsetStmt();
        } else {
          setStmt((byte[])__value);
        }
        break;

      case PARAMETERMAP:
        if (__value == null) {
          unsetParameterMap();
        } else {
          setParameterMap((Map<byte[],com.vesoft.nebula.Value>)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return new Long(getSessionId());

      case STMT:
        return getStmt();

      case PARAMETERMAP:
        return getParameterMap();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof executeWithParameter_args))
        return false;
      executeWithParameter_args that = (executeWithParameter_args)_that;

      if (!TBaseHelper.equalsNobinary(this.sessionId, that.sessionId)) { return false; }

      if (!TBaseHelper.equalsSlow(this.isSetStmt(), that.isSetStmt(), this.stmt, that.stmt)) { return false; }

      if (!TBaseHelper.equalsSlow(this.isSetParameterMap(), that.isSetParameterMap(), this.parameterMap, that.parameterMap)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {sessionId, stmt, parameterMap});
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SESSIONID:
            if (__field.type == TType.I64) {
              this.sessionId = iprot.readI64();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          case STMT:
            if (__field.type == TType.STRING) {
              this.stmt = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          case PARAMETERMAP:
            if (__field.type == TType.MAP) {
              {
                TMap _map68 = iprot.readMapBegin();
                this.parameterMap = new HashMap<byte[],com.vesoft.nebula.Value>(Math.max(0, 2*_map68.size));
                for (int _i69 = 0; 
                     (_map68.size < 0) ? iprot.peekMap() : (_i69 < _map68.size); 
                     ++_i69)
                {
                  byte[] _key70;
                  com.vesoft.nebula.Value _val71;
                  _key70 = iprot.readBinary();
                  _val71 = new com.vesoft.nebula.Value();
                  _val71.read(iprot);
                  this.parameterMap.put(_key70, _val71);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.sessionId);
      oprot.writeFieldEnd();
      if (this.stmt != null) {
        oprot.writeFieldBegin(STMT_FIELD_DESC);
        oprot.writeBinary(this.stmt);
        oprot.writeFieldEnd();
      }
      if (this.parameterMap != null) {
        oprot.writeFieldBegin(PARAMETER_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.parameterMap.size()));
          for (Map.Entry<byte[], com.vesoft.nebula.Value> _iter72 : this.parameterMap.entrySet())          {
            oprot.writeBinary(_iter72.getKey());
            _iter72.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("executeWithParameter_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("sessionId");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getSessionId(), indent + 1, prettyPrint));
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stmt");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getStmt() == null) {
        sb.append("null");
      } else {
          int __stmt_size = Math.min(this.getStmt().length, 128);
          for (int i = 0; i < __stmt_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getStmt()[i]).length() > 1 ? Integer.toHexString(this.getStmt()[i]).substring(Integer.toHexString(this.getStmt()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getStmt()[i]).toUpperCase());
          }
          if (this.getStmt().length > 128) sb.append(" ...");
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("parameterMap");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getParameterMap() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getParameterMap(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class executeWithParameter_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("executeWithParameter_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public ExecutionResponse success;
    public static final int SUCCESS = 0;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ExecutionResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(executeWithParameter_result.class, metaDataMap);
    }

    public executeWithParameter_result() {
    }

    public executeWithParameter_result(
        ExecutionResponse success) {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeWithParameter_result(executeWithParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public executeWithParameter_result deepCopy() {
      return new executeWithParameter_result(this);
    }

    public ExecutionResponse getSuccess() {
      return this.success;
    }

    public executeWithParameter_result setSuccess(ExecutionResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean __value) {
      if (!__value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SUCCESS:
        if (__value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecutionResponse)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof executeWithParameter_result))
        return false;
      executeWithParameter_result that = (executeWithParameter_result)_that;

      if (!TBaseHelper.equalsNobinary(this.isSetSuccess(), that.isSetSuccess(), this.success, that.success)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {success});
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SUCCESS:
            if (__field.type == TType.STRUCT) {
              this.success = new ExecutionResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("executeWithParameter_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class executeJson_args implements TBase, java.io.Serializable, Cloneable, Comparable<executeJson_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("executeJson_args");
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.I64, (short)1);
    private static final TField STMT_FIELD_DESC = new TField("stmt", TType.STRING, (short)2);

    public long sessionId;
    public byte[] stmt;
    public static final int SESSIONID = 1;
    public static final int STMT = 2;

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SESSIONID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMetaDataMap.put(STMT, new FieldMetaData("stmt", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(executeJson_args.class, metaDataMap);
    }

    public executeJson_args() {
    }

    public executeJson_args(
        long sessionId,
        byte[] stmt) {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.stmt = stmt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeJson_args(executeJson_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.sessionId = TBaseHelper.deepCopy(other.sessionId);
      if (other.isSetStmt()) {
        this.stmt = TBaseHelper.deepCopy(other.stmt);
      }
    }

    public executeJson_args deepCopy() {
      return new executeJson_args(this);
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public executeJson_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bit_vector.clear(__SESSIONID_ISSET_ID);
    }

    // Returns true if field sessionId is set (has been assigned a value) and false otherwise
    public boolean isSetSessionId() {
      return __isset_bit_vector.get(__SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean __value) {
      __isset_bit_vector.set(__SESSIONID_ISSET_ID, __value);
    }

    public byte[] getStmt() {
      return this.stmt;
    }

    public executeJson_args setStmt(byte[] stmt) {
      this.stmt = stmt;
      return this;
    }

    public void unsetStmt() {
      this.stmt = null;
    }

    // Returns true if field stmt is set (has been assigned a value) and false otherwise
    public boolean isSetStmt() {
      return this.stmt != null;
    }

    public void setStmtIsSet(boolean __value) {
      if (!__value) {
        this.stmt = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SESSIONID:
        if (__value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)__value);
        }
        break;

      case STMT:
        if (__value == null) {
          unsetStmt();
        } else {
          setStmt((byte[])__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return new Long(getSessionId());

      case STMT:
        return getStmt();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof executeJson_args))
        return false;
      executeJson_args that = (executeJson_args)_that;

      if (!TBaseHelper.equalsNobinary(this.sessionId, that.sessionId)) { return false; }

      if (!TBaseHelper.equalsSlow(this.isSetStmt(), that.isSetStmt(), this.stmt, that.stmt)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {sessionId, stmt});
    }

    @Override
    public int compareTo(executeJson_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(sessionId, other.sessionId);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetStmt()).compareTo(other.isSetStmt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(stmt, other.stmt);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SESSIONID:
            if (__field.type == TType.I64) {
              this.sessionId = iprot.readI64();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          case STMT:
            if (__field.type == TType.STRING) {
              this.stmt = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.sessionId);
      oprot.writeFieldEnd();
      if (this.stmt != null) {
        oprot.writeFieldBegin(STMT_FIELD_DESC);
        oprot.writeBinary(this.stmt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("executeJson_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("sessionId");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getSessionId(), indent + 1, prettyPrint));
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stmt");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getStmt() == null) {
        sb.append("null");
      } else {
          int __stmt_size = Math.min(this.getStmt().length, 128);
          for (int i = 0; i < __stmt_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getStmt()[i]).length() > 1 ? Integer.toHexString(this.getStmt()[i]).substring(Integer.toHexString(this.getStmt()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getStmt()[i]).toUpperCase());
          }
          if (this.getStmt().length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class executeJson_result implements TBase, java.io.Serializable, Cloneable, Comparable<executeJson_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("executeJson_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public byte[] success;
    public static final int SUCCESS = 0;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(executeJson_result.class, metaDataMap);
    }

    public executeJson_result() {
    }

    public executeJson_result(
        byte[] success) {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeJson_result(executeJson_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public executeJson_result deepCopy() {
      return new executeJson_result(this);
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public executeJson_result setSuccess(byte[] success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean __value) {
      if (!__value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SUCCESS:
        if (__value == null) {
          unsetSuccess();
        } else {
          setSuccess((byte[])__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof executeJson_result))
        return false;
      executeJson_result that = (executeJson_result)_that;

      if (!TBaseHelper.equalsSlow(this.isSetSuccess(), that.isSetSuccess(), this.success, that.success)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {success});
    }

    @Override
    public int compareTo(executeJson_result other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(success, other.success);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SUCCESS:
            if (__field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("executeJson_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSuccess() == null) {
        sb.append("null");
      } else {
          int __success_size = Math.min(this.getSuccess().length, 128);
          for (int i = 0; i < __success_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getSuccess()[i]).length() > 1 ? Integer.toHexString(this.getSuccess()[i]).substring(Integer.toHexString(this.getSuccess()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getSuccess()[i]).toUpperCase());
          }
          if (this.getSuccess().length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class executeJsonWithParameter_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("executeJsonWithParameter_args");
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.I64, (short)1);
    private static final TField STMT_FIELD_DESC = new TField("stmt", TType.STRING, (short)2);
    private static final TField PARAMETER_MAP_FIELD_DESC = new TField("parameterMap", TType.MAP, (short)3);

    public long sessionId;
    public byte[] stmt;
    public Map<byte[],com.vesoft.nebula.Value> parameterMap;
    public static final int SESSIONID = 1;
    public static final int STMT = 2;
    public static final int PARAMETERMAP = 3;

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SESSIONID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMetaDataMap.put(STMT, new FieldMetaData("stmt", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMetaDataMap.put(PARAMETERMAP, new FieldMetaData("parameterMap", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(executeJsonWithParameter_args.class, metaDataMap);
    }

    public executeJsonWithParameter_args() {
    }

    public executeJsonWithParameter_args(
        long sessionId,
        byte[] stmt,
        Map<byte[],com.vesoft.nebula.Value> parameterMap) {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.stmt = stmt;
      this.parameterMap = parameterMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeJsonWithParameter_args(executeJsonWithParameter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.sessionId = TBaseHelper.deepCopy(other.sessionId);
      if (other.isSetStmt()) {
        this.stmt = TBaseHelper.deepCopy(other.stmt);
      }
      if (other.isSetParameterMap()) {
        this.parameterMap = TBaseHelper.deepCopy(other.parameterMap);
      }
    }

    public executeJsonWithParameter_args deepCopy() {
      return new executeJsonWithParameter_args(this);
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public executeJsonWithParameter_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bit_vector.clear(__SESSIONID_ISSET_ID);
    }

    // Returns true if field sessionId is set (has been assigned a value) and false otherwise
    public boolean isSetSessionId() {
      return __isset_bit_vector.get(__SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean __value) {
      __isset_bit_vector.set(__SESSIONID_ISSET_ID, __value);
    }

    public byte[] getStmt() {
      return this.stmt;
    }

    public executeJsonWithParameter_args setStmt(byte[] stmt) {
      this.stmt = stmt;
      return this;
    }

    public void unsetStmt() {
      this.stmt = null;
    }

    // Returns true if field stmt is set (has been assigned a value) and false otherwise
    public boolean isSetStmt() {
      return this.stmt != null;
    }

    public void setStmtIsSet(boolean __value) {
      if (!__value) {
        this.stmt = null;
      }
    }

    public Map<byte[],com.vesoft.nebula.Value> getParameterMap() {
      return this.parameterMap;
    }

    public executeJsonWithParameter_args setParameterMap(Map<byte[],com.vesoft.nebula.Value> parameterMap) {
      this.parameterMap = parameterMap;
      return this;
    }

    public void unsetParameterMap() {
      this.parameterMap = null;
    }

    // Returns true if field parameterMap is set (has been assigned a value) and false otherwise
    public boolean isSetParameterMap() {
      return this.parameterMap != null;
    }

    public void setParameterMapIsSet(boolean __value) {
      if (!__value) {
        this.parameterMap = null;
      }
    }

    @SuppressWarnings("unchecked")
    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SESSIONID:
        if (__value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)__value);
        }
        break;

      case STMT:
        if (__value == null) {
          unsetStmt();
        } else {
          setStmt((byte[])__value);
        }
        break;

      case PARAMETERMAP:
        if (__value == null) {
          unsetParameterMap();
        } else {
          setParameterMap((Map<byte[],com.vesoft.nebula.Value>)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SESSIONID:
        return new Long(getSessionId());

      case STMT:
        return getStmt();

      case PARAMETERMAP:
        return getParameterMap();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof executeJsonWithParameter_args))
        return false;
      executeJsonWithParameter_args that = (executeJsonWithParameter_args)_that;

      if (!TBaseHelper.equalsNobinary(this.sessionId, that.sessionId)) { return false; }

      if (!TBaseHelper.equalsSlow(this.isSetStmt(), that.isSetStmt(), this.stmt, that.stmt)) { return false; }

      if (!TBaseHelper.equalsSlow(this.isSetParameterMap(), that.isSetParameterMap(), this.parameterMap, that.parameterMap)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {sessionId, stmt, parameterMap});
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SESSIONID:
            if (__field.type == TType.I64) {
              this.sessionId = iprot.readI64();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          case STMT:
            if (__field.type == TType.STRING) {
              this.stmt = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          case PARAMETERMAP:
            if (__field.type == TType.MAP) {
              {
                TMap _map73 = iprot.readMapBegin();
                this.parameterMap = new HashMap<byte[],com.vesoft.nebula.Value>(Math.max(0, 2*_map73.size));
                for (int _i74 = 0; 
                     (_map73.size < 0) ? iprot.peekMap() : (_i74 < _map73.size); 
                     ++_i74)
                {
                  byte[] _key75;
                  com.vesoft.nebula.Value _val76;
                  _key75 = iprot.readBinary();
                  _val76 = new com.vesoft.nebula.Value();
                  _val76.read(iprot);
                  this.parameterMap.put(_key75, _val76);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.sessionId);
      oprot.writeFieldEnd();
      if (this.stmt != null) {
        oprot.writeFieldBegin(STMT_FIELD_DESC);
        oprot.writeBinary(this.stmt);
        oprot.writeFieldEnd();
      }
      if (this.parameterMap != null) {
        oprot.writeFieldBegin(PARAMETER_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.parameterMap.size()));
          for (Map.Entry<byte[], com.vesoft.nebula.Value> _iter77 : this.parameterMap.entrySet())          {
            oprot.writeBinary(_iter77.getKey());
            _iter77.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("executeJsonWithParameter_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("sessionId");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getSessionId(), indent + 1, prettyPrint));
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stmt");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getStmt() == null) {
        sb.append("null");
      } else {
          int __stmt_size = Math.min(this.getStmt().length, 128);
          for (int i = 0; i < __stmt_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getStmt()[i]).length() > 1 ? Integer.toHexString(this.getStmt()[i]).substring(Integer.toHexString(this.getStmt()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getStmt()[i]).toUpperCase());
          }
          if (this.getStmt().length > 128) sb.append(" ...");
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("parameterMap");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getParameterMap() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getParameterMap(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class executeJsonWithParameter_result implements TBase, java.io.Serializable, Cloneable, Comparable<executeJsonWithParameter_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("executeJsonWithParameter_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public byte[] success;
    public static final int SUCCESS = 0;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(executeJsonWithParameter_result.class, metaDataMap);
    }

    public executeJsonWithParameter_result() {
    }

    public executeJsonWithParameter_result(
        byte[] success) {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeJsonWithParameter_result(executeJsonWithParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public executeJsonWithParameter_result deepCopy() {
      return new executeJsonWithParameter_result(this);
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public executeJsonWithParameter_result setSuccess(byte[] success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean __value) {
      if (!__value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SUCCESS:
        if (__value == null) {
          unsetSuccess();
        } else {
          setSuccess((byte[])__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof executeJsonWithParameter_result))
        return false;
      executeJsonWithParameter_result that = (executeJsonWithParameter_result)_that;

      if (!TBaseHelper.equalsSlow(this.isSetSuccess(), that.isSetSuccess(), this.success, that.success)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {success});
    }

    @Override
    public int compareTo(executeJsonWithParameter_result other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(success, other.success);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SUCCESS:
            if (__field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("executeJsonWithParameter_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSuccess() == null) {
        sb.append("null");
      } else {
          int __success_size = Math.min(this.getSuccess().length, 128);
          for (int i = 0; i < __success_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.getSuccess()[i]).length() > 1 ? Integer.toHexString(this.getSuccess()[i]).substring(Integer.toHexString(this.getSuccess()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getSuccess()[i]).toUpperCase());
          }
          if (this.getSuccess().length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyClientVersion_args implements TBase, java.io.Serializable, Cloneable, Comparable<verifyClientVersion_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyClientVersion_args");
    private static final TField REQ_FIELD_DESC = new TField("req", TType.STRUCT, (short)1);

    public VerifyClientVersionReq req;
    public static final int REQ = 1;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(REQ, new FieldMetaData("req", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, VerifyClientVersionReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(verifyClientVersion_args.class, metaDataMap);
    }

    public verifyClientVersion_args() {
    }

    public verifyClientVersion_args(
        VerifyClientVersionReq req) {
      this();
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyClientVersion_args(verifyClientVersion_args other) {
      if (other.isSetReq()) {
        this.req = TBaseHelper.deepCopy(other.req);
      }
    }

    public verifyClientVersion_args deepCopy() {
      return new verifyClientVersion_args(this);
    }

    public VerifyClientVersionReq getReq() {
      return this.req;
    }

    public verifyClientVersion_args setReq(VerifyClientVersionReq req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    // Returns true if field req is set (has been assigned a value) and false otherwise
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean __value) {
      if (!__value) {
        this.req = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case REQ:
        if (__value == null) {
          unsetReq();
        } else {
          setReq((VerifyClientVersionReq)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case REQ:
        return getReq();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof verifyClientVersion_args))
        return false;
      verifyClientVersion_args that = (verifyClientVersion_args)_that;

      if (!TBaseHelper.equalsNobinary(this.isSetReq(), that.isSetReq(), this.req, that.req)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {req});
    }

    @Override
    public int compareTo(verifyClientVersion_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(req, other.req);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case REQ:
            if (__field.type == TType.STRUCT) {
              this.req = new VerifyClientVersionReq();
              this.req.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.req != null) {
        oprot.writeFieldBegin(REQ_FIELD_DESC);
        this.req.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("verifyClientVersion_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("req");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getReq() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getReq(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyClientVersion_result implements TBase, java.io.Serializable, Cloneable, Comparable<verifyClientVersion_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyClientVersion_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public VerifyClientVersionResp success;
    public static final int SUCCESS = 0;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;

    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, VerifyClientVersionResp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(verifyClientVersion_result.class, metaDataMap);
    }

    public verifyClientVersion_result() {
    }

    public verifyClientVersion_result(
        VerifyClientVersionResp success) {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyClientVersion_result(verifyClientVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public verifyClientVersion_result deepCopy() {
      return new verifyClientVersion_result(this);
    }

    public VerifyClientVersionResp getSuccess() {
      return this.success;
    }

    public verifyClientVersion_result setSuccess(VerifyClientVersionResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean __value) {
      if (!__value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object __value) {
      switch (fieldID) {
      case SUCCESS:
        if (__value == null) {
          unsetSuccess();
        } else {
          setSuccess((VerifyClientVersionResp)__value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof verifyClientVersion_result))
        return false;
      verifyClientVersion_result that = (verifyClientVersion_result)_that;

      if (!TBaseHelper.equalsNobinary(this.isSetSuccess(), that.isSetSuccess(), this.success, that.success)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {success});
    }

    @Override
    public int compareTo(verifyClientVersion_result other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(success, other.success);
      if (lastComparison != 0) { 
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField __field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) { 
          break;
        }
        switch (__field.id)
        {
          case SUCCESS:
            if (__field.type == TType.STRUCT) {
              this.success = new VerifyClientVersionResp();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
      String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("verifyClientVersion_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
