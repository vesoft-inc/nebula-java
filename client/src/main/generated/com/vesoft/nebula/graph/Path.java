/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.graph;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Path implements TBase, java.io.Serializable, Cloneable, Comparable<Path> {
  private static final TStruct STRUCT_DESC = new TStruct("Path");
  private static final TField ENTRY_LIST_FIELD_DESC = new TField("entry_list", TType.LIST, (short)1);

  public List<PathEntry> entry_list;
  public static final int ENTRY_LIST = 1;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ENTRY_LIST, new FieldMetaData("entry_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, PathEntry.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Path.class, metaDataMap);
  }

  public Path() {
  }

  public Path(
    List<PathEntry> entry_list)
  {
    this();
    this.entry_list = entry_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Path(Path other) {
    if (other.isSetEntry_list()) {
      this.entry_list = TBaseHelper.deepCopy(other.entry_list);
    }
  }

  public Path deepCopy() {
    return new Path(this);
  }

  @Deprecated
  public Path clone() {
    return new Path(this);
  }

  public List<PathEntry>  getEntry_list() {
    return this.entry_list;
  }

  public Path setEntry_list(List<PathEntry> entry_list) {
    this.entry_list = entry_list;
    return this;
  }

  public void unsetEntry_list() {
    this.entry_list = null;
  }

  // Returns true if field entry_list is set (has been assigned a value) and false otherwise
  public boolean isSetEntry_list() {
    return this.entry_list != null;
  }

  public void setEntry_listIsSet(boolean value) {
    if (!value) {
      this.entry_list = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ENTRY_LIST:
      if (value == null) {
        unsetEntry_list();
      } else {
        setEntry_list((List<PathEntry>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ENTRY_LIST:
      return getEntry_list();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ENTRY_LIST:
      return isSetEntry_list();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Path)
      return this.equals((Path)that);
    return false;
  }

  public boolean equals(Path that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_entry_list = true && this.isSetEntry_list();
    boolean that_present_entry_list = true && that.isSetEntry_list();
    if (this_present_entry_list || that_present_entry_list) {
      if (!(this_present_entry_list && that_present_entry_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.entry_list, that.entry_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_entry_list = true && (isSetEntry_list());
    builder.append(present_entry_list);
    if (present_entry_list)
      builder.append(entry_list);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Path other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEntry_list()).compareTo(other.isSetEntry_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(entry_list, other.entry_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ENTRY_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.entry_list = new ArrayList<PathEntry>(Math.max(0, _list0.size));
              for (int _i1 = 0; 
                   (_list0.size < 0) ? iprot.peekList() : (_i1 < _list0.size); 
                   ++_i1)
              {
                PathEntry _elem2;
                _elem2 = new PathEntry();
                _elem2.read(iprot);
                this.entry_list.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.entry_list != null) {
      oprot.writeFieldBegin(ENTRY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.entry_list.size()));
        for (PathEntry _iter3 : this.entry_list)        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Path");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("entry_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEntry_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEntry_list(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

