/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class DirInfo implements TBase, java.io.Serializable, Cloneable, Comparable<DirInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("DirInfo");
  private static final TField ROOT_FIELD_DESC = new TField("root", TType.STRING, (short)1);
  private static final TField DATA_FIELD_DESC = new TField("data", TType.LIST, (short)2);

  public byte[] root;
  public List<byte[]> data;
  public static final int ROOT = 1;
  public static final int DATA = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ROOT, new FieldMetaData("root", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DirInfo.class, metaDataMap);
  }

  public DirInfo() {
  }

  public DirInfo(
      byte[] root,
      List<byte[]> data) {
    this();
    this.root = root;
    this.data = data;
  }

  public static class Builder {
    private byte[] root;
    private List<byte[]> data;

    public Builder() {
    }

    public Builder setRoot(final byte[] root) {
      this.root = root;
      return this;
    }

    public Builder setData(final List<byte[]> data) {
      this.data = data;
      return this;
    }

    public DirInfo build() {
      DirInfo result = new DirInfo();
      result.setRoot(this.root);
      result.setData(this.data);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DirInfo(DirInfo other) {
    if (other.isSetRoot()) {
      this.root = TBaseHelper.deepCopy(other.root);
    }
    if (other.isSetData()) {
      this.data = TBaseHelper.deepCopy(other.data);
    }
  }

  public DirInfo deepCopy() {
    return new DirInfo(this);
  }

  public byte[] getRoot() {
    return this.root;
  }

  public DirInfo setRoot(byte[] root) {
    this.root = root;
    return this;
  }

  public void unsetRoot() {
    this.root = null;
  }

  // Returns true if field root is set (has been assigned a value) and false otherwise
  public boolean isSetRoot() {
    return this.root != null;
  }

  public void setRootIsSet(boolean __value) {
    if (!__value) {
      this.root = null;
    }
  }

  public List<byte[]> getData() {
    return this.data;
  }

  public DirInfo setData(List<byte[]> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  // Returns true if field data is set (has been assigned a value) and false otherwise
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean __value) {
    if (!__value) {
      this.data = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ROOT:
      if (__value == null) {
        unsetRoot();
      } else {
        setRoot((byte[])__value);
      }
      break;

    case DATA:
      if (__value == null) {
        unsetData();
      } else {
        setData((List<byte[]>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ROOT:
      return getRoot();

    case DATA:
      return getData();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof DirInfo))
      return false;
    DirInfo that = (DirInfo)_that;

    if (!TBaseHelper.equalsSlow(this.isSetRoot(), that.isSetRoot(), this.root, that.root)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetData(), that.isSetData(), this.data, that.data)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {root, data});
  }

  @Override
  public int compareTo(DirInfo other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoot()).compareTo(other.isSetRoot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(root, other.root);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(data, other.data);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ROOT:
          if (__field.type == TType.STRING) {
            this.root = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DATA:
          if (__field.type == TType.LIST) {
            {
              TList _list60 = iprot.readListBegin();
              this.data = new ArrayList<byte[]>(Math.max(0, _list60.size));
              for (int _i61 = 0; 
                   (_list60.size < 0) ? iprot.peekList() : (_i61 < _list60.size); 
                   ++_i61)
              {
                byte[] _elem62;
                _elem62 = iprot.readBinary();
                this.data.add(_elem62);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.root != null) {
      oprot.writeFieldBegin(ROOT_FIELD_DESC);
      oprot.writeBinary(this.root);
      oprot.writeFieldEnd();
    }
    if (this.data != null) {
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.data.size()));
        for (byte[] _iter63 : this.data)        {
          oprot.writeBinary(_iter63);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DirInfo");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("root");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getRoot() == null) {
      sb.append("null");
    } else {
        int __root_size = Math.min(this.getRoot().length, 128);
        for (int i = 0; i < __root_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getRoot()[i]).length() > 1 ? Integer.toHexString(this.getRoot()[i]).substring(Integer.toHexString(this.getRoot()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getRoot()[i]).toUpperCase());
        }
        if (this.getRoot().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("data");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getData() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getData(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

