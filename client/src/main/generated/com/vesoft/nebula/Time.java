/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Time implements TBase, java.io.Serializable, Cloneable, Comparable<Time> {
  private static final TStruct STRUCT_DESC = new TStruct("Time");
  private static final TField HOUR_FIELD_DESC = new TField("hour", TType.BYTE, (short)1);
  private static final TField MINUTE_FIELD_DESC = new TField("minute", TType.BYTE, (short)2);
  private static final TField SEC_FIELD_DESC = new TField("sec", TType.BYTE, (short)3);
  private static final TField MICROSEC_FIELD_DESC = new TField("microsec", TType.I32, (short)4);

  public byte hour;
  public byte minute;
  public byte sec;
  public int microsec;
  public static final int HOUR = 1;
  public static final int MINUTE = 2;
  public static final int SEC = 3;
  public static final int MICROSEC = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __HOUR_ISSET_ID = 0;
  private static final int __MINUTE_ISSET_ID = 1;
  private static final int __SEC_ISSET_ID = 2;
  private static final int __MICROSEC_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(HOUR, new FieldMetaData("hour", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(MINUTE, new FieldMetaData("minute", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(MICROSEC, new FieldMetaData("microsec", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Time.class, metaDataMap);
  }

  public Time() {
  }

  public Time(
    byte hour,
    byte minute,
    byte sec,
    int microsec)
  {
    this();
    this.hour = hour;
    setHourIsSet(true);
    this.minute = minute;
    setMinuteIsSet(true);
    this.sec = sec;
    setSecIsSet(true);
    this.microsec = microsec;
    setMicrosecIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Time(Time other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.hour = TBaseHelper.deepCopy(other.hour);
    this.minute = TBaseHelper.deepCopy(other.minute);
    this.sec = TBaseHelper.deepCopy(other.sec);
    this.microsec = TBaseHelper.deepCopy(other.microsec);
  }

  public Time deepCopy() {
    return new Time(this);
  }

  @Deprecated
  public Time clone() {
    return new Time(this);
  }

  public byte  getHour() {
    return this.hour;
  }

  public Time setHour(byte hour) {
    this.hour = hour;
    setHourIsSet(true);
    return this;
  }

  public void unsetHour() {
    __isset_bit_vector.clear(__HOUR_ISSET_ID);
  }

  // Returns true if field hour is set (has been assigned a value) and false otherwise
  public boolean isSetHour() {
    return __isset_bit_vector.get(__HOUR_ISSET_ID);
  }

  public void setHourIsSet(boolean value) {
    __isset_bit_vector.set(__HOUR_ISSET_ID, value);
  }

  public byte  getMinute() {
    return this.minute;
  }

  public Time setMinute(byte minute) {
    this.minute = minute;
    setMinuteIsSet(true);
    return this;
  }

  public void unsetMinute() {
    __isset_bit_vector.clear(__MINUTE_ISSET_ID);
  }

  // Returns true if field minute is set (has been assigned a value) and false otherwise
  public boolean isSetMinute() {
    return __isset_bit_vector.get(__MINUTE_ISSET_ID);
  }

  public void setMinuteIsSet(boolean value) {
    __isset_bit_vector.set(__MINUTE_ISSET_ID, value);
  }

  public byte  getSec() {
    return this.sec;
  }

  public Time setSec(byte sec) {
    this.sec = sec;
    setSecIsSet(true);
    return this;
  }

  public void unsetSec() {
    __isset_bit_vector.clear(__SEC_ISSET_ID);
  }

  // Returns true if field sec is set (has been assigned a value) and false otherwise
  public boolean isSetSec() {
    return __isset_bit_vector.get(__SEC_ISSET_ID);
  }

  public void setSecIsSet(boolean value) {
    __isset_bit_vector.set(__SEC_ISSET_ID, value);
  }

  public int  getMicrosec() {
    return this.microsec;
  }

  public Time setMicrosec(int microsec) {
    this.microsec = microsec;
    setMicrosecIsSet(true);
    return this;
  }

  public void unsetMicrosec() {
    __isset_bit_vector.clear(__MICROSEC_ISSET_ID);
  }

  // Returns true if field microsec is set (has been assigned a value) and false otherwise
  public boolean isSetMicrosec() {
    return __isset_bit_vector.get(__MICROSEC_ISSET_ID);
  }

  public void setMicrosecIsSet(boolean value) {
    __isset_bit_vector.set(__MICROSEC_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case HOUR:
      if (value == null) {
        unsetHour();
      } else {
        setHour((Byte)value);
      }
      break;

    case MINUTE:
      if (value == null) {
        unsetMinute();
      } else {
        setMinute((Byte)value);
      }
      break;

    case SEC:
      if (value == null) {
        unsetSec();
      } else {
        setSec((Byte)value);
      }
      break;

    case MICROSEC:
      if (value == null) {
        unsetMicrosec();
      } else {
        setMicrosec((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case HOUR:
      return new Byte(getHour());

    case MINUTE:
      return new Byte(getMinute());

    case SEC:
      return new Byte(getSec());

    case MICROSEC:
      return new Integer(getMicrosec());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case HOUR:
      return isSetHour();
    case MINUTE:
      return isSetMinute();
    case SEC:
      return isSetSec();
    case MICROSEC:
      return isSetMicrosec();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Time)
      return this.equals((Time)that);
    return false;
  }

  public boolean equals(Time that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hour = true;
    boolean that_present_hour = true;
    if (this_present_hour || that_present_hour) {
      if (!(this_present_hour && that_present_hour))
        return false;
      if (!TBaseHelper.equalsNobinary(this.hour, that.hour))
        return false;
    }

    boolean this_present_minute = true;
    boolean that_present_minute = true;
    if (this_present_minute || that_present_minute) {
      if (!(this_present_minute && that_present_minute))
        return false;
      if (!TBaseHelper.equalsNobinary(this.minute, that.minute))
        return false;
    }

    boolean this_present_sec = true;
    boolean that_present_sec = true;
    if (this_present_sec || that_present_sec) {
      if (!(this_present_sec && that_present_sec))
        return false;
      if (!TBaseHelper.equalsNobinary(this.sec, that.sec))
        return false;
    }

    boolean this_present_microsec = true;
    boolean that_present_microsec = true;
    if (this_present_microsec || that_present_microsec) {
      if (!(this_present_microsec && that_present_microsec))
        return false;
      if (!TBaseHelper.equalsNobinary(this.microsec, that.microsec))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_hour = true;
    builder.append(present_hour);
    if (present_hour)
      builder.append(hour);

    boolean present_minute = true;
    builder.append(present_minute);
    if (present_minute)
      builder.append(minute);

    boolean present_sec = true;
    builder.append(present_sec);
    if (present_sec)
      builder.append(sec);

    boolean present_microsec = true;
    builder.append(present_microsec);
    if (present_microsec)
      builder.append(microsec);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Time other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHour()).compareTo(other.isSetHour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(hour, other.hour);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMinute()).compareTo(other.isSetMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(minute, other.minute);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSec()).compareTo(other.isSetSec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(sec, other.sec);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMicrosec()).compareTo(other.isSetMicrosec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(microsec, other.microsec);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case HOUR:
          if (field.type == TType.BYTE) {
            this.hour = iprot.readByte();
            setHourIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MINUTE:
          if (field.type == TType.BYTE) {
            this.minute = iprot.readByte();
            setMinuteIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEC:
          if (field.type == TType.BYTE) {
            this.sec = iprot.readByte();
            setSecIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MICROSEC:
          if (field.type == TType.I32) {
            this.microsec = iprot.readI32();
            setMicrosecIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(HOUR_FIELD_DESC);
    oprot.writeByte(this.hour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MINUTE_FIELD_DESC);
    oprot.writeByte(this.minute);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SEC_FIELD_DESC);
    oprot.writeByte(this.sec);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MICROSEC_FIELD_DESC);
    oprot.writeI32(this.microsec);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Time");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("hour");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getHour(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("minute");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMinute(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("sec");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSec(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("microsec");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMicrosec(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

