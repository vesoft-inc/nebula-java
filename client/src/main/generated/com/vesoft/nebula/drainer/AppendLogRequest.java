/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.drainer;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AppendLogRequest implements TBase, java.io.Serializable, Cloneable, Comparable<AppendLogRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("AppendLogRequest");
  private static final TField CLUSTER_ID_FIELD_DESC = new TField("clusterId", TType.I64, (short)1);
  private static final TField SPACE_FIELD_DESC = new TField("space", TType.I32, (short)2);
  private static final TField PART_FIELD_DESC = new TField("part", TType.I32, (short)3);
  private static final TField PART_NUM_FIELD_DESC = new TField("part_num", TType.I32, (short)4);
  private static final TField LAST_LOG_ID_TO_SEND_FIELD_DESC = new TField("last_log_id_to_send", TType.I64, (short)5);
  private static final TField LAST_LOG_ID_SENT_FIELD_DESC = new TField("last_log_id_sent", TType.I64, (short)6);
  private static final TField LOG_TERM_FIELD_DESC = new TField("log_term", TType.I64, (short)7);
  private static final TField LOG_STR_LIST_FIELD_DESC = new TField("log_str_list", TType.LIST, (short)8);
  private static final TField NEED_CLEANUP_FIELD_DESC = new TField("need_cleanup", TType.BOOL, (short)9);
  private static final TField IS_SNAPSHOT_FIELD_DESC = new TField("is_snapshot", TType.BOOL, (short)10);
  private static final TField SNAPSHOT_FINISHED_FIELD_DESC = new TField("snapshot_finished", TType.BOOL, (short)11);
  private static final TField SNAPSHOT_COMMIT_LOG_ID_FIELD_DESC = new TField("snapshot_commitLogId", TType.I64, (short)12);
  private static final TField TO_SPACE_NAME_FIELD_DESC = new TField("to_space_name", TType.STRING, (short)13);
  private static final TField SYNC_META_FIELD_DESC = new TField("sync_meta", TType.BOOL, (short)14);
  private static final TField SPACE_VID_TYPE_FIELD_DESC = new TField("space_vid_type", TType.I32, (short)15);
  private static final TField SPACE_VID_LEN_FIELD_DESC = new TField("space_vid_len", TType.I16, (short)16);

  public long clusterId;
  public int space;
  public int part;
  public int part_num;
  public long last_log_id_to_send;
  public long last_log_id_sent;
  public long log_term;
  public List<com.vesoft.nebula.LogEntry> log_str_list;
  public boolean need_cleanup;
  public boolean is_snapshot;
  public boolean snapshot_finished;
  public long snapshot_commitLogId;
  public byte[] to_space_name;
  public boolean sync_meta;
  /**
   * 
   * @see com.vesoft.nebula.PropertyType
   */
  public com.vesoft.nebula.PropertyType space_vid_type;
  public short space_vid_len;
  public static final int CLUSTERID = 1;
  public static final int SPACE = 2;
  public static final int PART = 3;
  public static final int PART_NUM = 4;
  public static final int LAST_LOG_ID_TO_SEND = 5;
  public static final int LAST_LOG_ID_SENT = 6;
  public static final int LOG_TERM = 7;
  public static final int LOG_STR_LIST = 8;
  public static final int NEED_CLEANUP = 9;
  public static final int IS_SNAPSHOT = 10;
  public static final int SNAPSHOT_FINISHED = 11;
  public static final int SNAPSHOT_COMMITLOGID = 12;
  public static final int TO_SPACE_NAME = 13;
  public static final int SYNC_META = 14;
  public static final int SPACE_VID_TYPE = 15;
  public static final int SPACE_VID_LEN = 16;

  // isset id assignments
  private static final int __CLUSTERID_ISSET_ID = 0;
  private static final int __SPACE_ISSET_ID = 1;
  private static final int __PART_ISSET_ID = 2;
  private static final int __PART_NUM_ISSET_ID = 3;
  private static final int __LAST_LOG_ID_TO_SEND_ISSET_ID = 4;
  private static final int __LAST_LOG_ID_SENT_ISSET_ID = 5;
  private static final int __LOG_TERM_ISSET_ID = 6;
  private static final int __NEED_CLEANUP_ISSET_ID = 7;
  private static final int __IS_SNAPSHOT_ISSET_ID = 8;
  private static final int __SNAPSHOT_FINISHED_ISSET_ID = 9;
  private static final int __SNAPSHOT_COMMITLOGID_ISSET_ID = 10;
  private static final int __SYNC_META_ISSET_ID = 11;
  private static final int __SPACE_VID_LEN_ISSET_ID = 12;
  private BitSet __isset_bit_vector = new BitSet(13);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CLUSTERID, new FieldMetaData("clusterId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(SPACE, new FieldMetaData("space", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PART, new FieldMetaData("part", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PART_NUM, new FieldMetaData("part_num", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(LAST_LOG_ID_TO_SEND, new FieldMetaData("last_log_id_to_send", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LAST_LOG_ID_SENT, new FieldMetaData("last_log_id_sent", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LOG_TERM, new FieldMetaData("log_term", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LOG_STR_LIST, new FieldMetaData("log_str_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.LogEntry.class))));
    tmpMetaDataMap.put(NEED_CLEANUP, new FieldMetaData("need_cleanup", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(IS_SNAPSHOT, new FieldMetaData("is_snapshot", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(SNAPSHOT_FINISHED, new FieldMetaData("snapshot_finished", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(SNAPSHOT_COMMITLOGID, new FieldMetaData("snapshot_commitLogId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(TO_SPACE_NAME, new FieldMetaData("to_space_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(SYNC_META, new FieldMetaData("sync_meta", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(SPACE_VID_TYPE, new FieldMetaData("space_vid_type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SPACE_VID_LEN, new FieldMetaData("space_vid_len", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AppendLogRequest.class, metaDataMap);
  }

  public AppendLogRequest() {
  }

  public AppendLogRequest(
      long clusterId,
      int space,
      int part,
      int part_num,
      long last_log_id_to_send,
      long last_log_id_sent,
      long log_term,
      List<com.vesoft.nebula.LogEntry> log_str_list,
      boolean need_cleanup,
      boolean is_snapshot,
      boolean snapshot_finished,
      long snapshot_commitLogId,
      byte[] to_space_name,
      boolean sync_meta,
      com.vesoft.nebula.PropertyType space_vid_type,
      short space_vid_len) {
    this();
    this.clusterId = clusterId;
    setClusterIdIsSet(true);
    this.space = space;
    setSpaceIsSet(true);
    this.part = part;
    setPartIsSet(true);
    this.part_num = part_num;
    setPart_numIsSet(true);
    this.last_log_id_to_send = last_log_id_to_send;
    setLast_log_id_to_sendIsSet(true);
    this.last_log_id_sent = last_log_id_sent;
    setLast_log_id_sentIsSet(true);
    this.log_term = log_term;
    setLog_termIsSet(true);
    this.log_str_list = log_str_list;
    this.need_cleanup = need_cleanup;
    setNeed_cleanupIsSet(true);
    this.is_snapshot = is_snapshot;
    setIs_snapshotIsSet(true);
    this.snapshot_finished = snapshot_finished;
    setSnapshot_finishedIsSet(true);
    this.snapshot_commitLogId = snapshot_commitLogId;
    setSnapshot_commitLogIdIsSet(true);
    this.to_space_name = to_space_name;
    this.sync_meta = sync_meta;
    setSync_metaIsSet(true);
    this.space_vid_type = space_vid_type;
    this.space_vid_len = space_vid_len;
    setSpace_vid_lenIsSet(true);
  }

  public static class Builder {
    private long clusterId;
    private int space;
    private int part;
    private int part_num;
    private long last_log_id_to_send;
    private long last_log_id_sent;
    private long log_term;
    private List<com.vesoft.nebula.LogEntry> log_str_list;
    private boolean need_cleanup;
    private boolean is_snapshot;
    private boolean snapshot_finished;
    private long snapshot_commitLogId;
    private byte[] to_space_name;
    private boolean sync_meta;
    private com.vesoft.nebula.PropertyType space_vid_type;
    private short space_vid_len;

    BitSet __optional_isset = new BitSet(13);

    public Builder() {
    }

    public Builder setClusterId(final long clusterId) {
      this.clusterId = clusterId;
      __optional_isset.set(__CLUSTERID_ISSET_ID, true);
      return this;
    }

    public Builder setSpace(final int space) {
      this.space = space;
      __optional_isset.set(__SPACE_ISSET_ID, true);
      return this;
    }

    public Builder setPart(final int part) {
      this.part = part;
      __optional_isset.set(__PART_ISSET_ID, true);
      return this;
    }

    public Builder setPart_num(final int part_num) {
      this.part_num = part_num;
      __optional_isset.set(__PART_NUM_ISSET_ID, true);
      return this;
    }

    public Builder setLast_log_id_to_send(final long last_log_id_to_send) {
      this.last_log_id_to_send = last_log_id_to_send;
      __optional_isset.set(__LAST_LOG_ID_TO_SEND_ISSET_ID, true);
      return this;
    }

    public Builder setLast_log_id_sent(final long last_log_id_sent) {
      this.last_log_id_sent = last_log_id_sent;
      __optional_isset.set(__LAST_LOG_ID_SENT_ISSET_ID, true);
      return this;
    }

    public Builder setLog_term(final long log_term) {
      this.log_term = log_term;
      __optional_isset.set(__LOG_TERM_ISSET_ID, true);
      return this;
    }

    public Builder setLog_str_list(final List<com.vesoft.nebula.LogEntry> log_str_list) {
      this.log_str_list = log_str_list;
      return this;
    }

    public Builder setNeed_cleanup(final boolean need_cleanup) {
      this.need_cleanup = need_cleanup;
      __optional_isset.set(__NEED_CLEANUP_ISSET_ID, true);
      return this;
    }

    public Builder setIs_snapshot(final boolean is_snapshot) {
      this.is_snapshot = is_snapshot;
      __optional_isset.set(__IS_SNAPSHOT_ISSET_ID, true);
      return this;
    }

    public Builder setSnapshot_finished(final boolean snapshot_finished) {
      this.snapshot_finished = snapshot_finished;
      __optional_isset.set(__SNAPSHOT_FINISHED_ISSET_ID, true);
      return this;
    }

    public Builder setSnapshot_commitLogId(final long snapshot_commitLogId) {
      this.snapshot_commitLogId = snapshot_commitLogId;
      __optional_isset.set(__SNAPSHOT_COMMITLOGID_ISSET_ID, true);
      return this;
    }

    public Builder setTo_space_name(final byte[] to_space_name) {
      this.to_space_name = to_space_name;
      return this;
    }

    public Builder setSync_meta(final boolean sync_meta) {
      this.sync_meta = sync_meta;
      __optional_isset.set(__SYNC_META_ISSET_ID, true);
      return this;
    }

    public Builder setSpace_vid_type(final com.vesoft.nebula.PropertyType space_vid_type) {
      this.space_vid_type = space_vid_type;
      return this;
    }

    public Builder setSpace_vid_len(final short space_vid_len) {
      this.space_vid_len = space_vid_len;
      __optional_isset.set(__SPACE_VID_LEN_ISSET_ID, true);
      return this;
    }

    public AppendLogRequest build() {
      AppendLogRequest result = new AppendLogRequest();
      if (__optional_isset.get(__CLUSTERID_ISSET_ID)) {
        result.setClusterId(this.clusterId);
      }
      if (__optional_isset.get(__SPACE_ISSET_ID)) {
        result.setSpace(this.space);
      }
      if (__optional_isset.get(__PART_ISSET_ID)) {
        result.setPart(this.part);
      }
      if (__optional_isset.get(__PART_NUM_ISSET_ID)) {
        result.setPart_num(this.part_num);
      }
      if (__optional_isset.get(__LAST_LOG_ID_TO_SEND_ISSET_ID)) {
        result.setLast_log_id_to_send(this.last_log_id_to_send);
      }
      if (__optional_isset.get(__LAST_LOG_ID_SENT_ISSET_ID)) {
        result.setLast_log_id_sent(this.last_log_id_sent);
      }
      if (__optional_isset.get(__LOG_TERM_ISSET_ID)) {
        result.setLog_term(this.log_term);
      }
      result.setLog_str_list(this.log_str_list);
      if (__optional_isset.get(__NEED_CLEANUP_ISSET_ID)) {
        result.setNeed_cleanup(this.need_cleanup);
      }
      if (__optional_isset.get(__IS_SNAPSHOT_ISSET_ID)) {
        result.setIs_snapshot(this.is_snapshot);
      }
      if (__optional_isset.get(__SNAPSHOT_FINISHED_ISSET_ID)) {
        result.setSnapshot_finished(this.snapshot_finished);
      }
      if (__optional_isset.get(__SNAPSHOT_COMMITLOGID_ISSET_ID)) {
        result.setSnapshot_commitLogId(this.snapshot_commitLogId);
      }
      result.setTo_space_name(this.to_space_name);
      if (__optional_isset.get(__SYNC_META_ISSET_ID)) {
        result.setSync_meta(this.sync_meta);
      }
      result.setSpace_vid_type(this.space_vid_type);
      if (__optional_isset.get(__SPACE_VID_LEN_ISSET_ID)) {
        result.setSpace_vid_len(this.space_vid_len);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppendLogRequest(AppendLogRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.clusterId = TBaseHelper.deepCopy(other.clusterId);
    this.space = TBaseHelper.deepCopy(other.space);
    this.part = TBaseHelper.deepCopy(other.part);
    this.part_num = TBaseHelper.deepCopy(other.part_num);
    this.last_log_id_to_send = TBaseHelper.deepCopy(other.last_log_id_to_send);
    this.last_log_id_sent = TBaseHelper.deepCopy(other.last_log_id_sent);
    this.log_term = TBaseHelper.deepCopy(other.log_term);
    if (other.isSetLog_str_list()) {
      this.log_str_list = TBaseHelper.deepCopy(other.log_str_list);
    }
    this.need_cleanup = TBaseHelper.deepCopy(other.need_cleanup);
    this.is_snapshot = TBaseHelper.deepCopy(other.is_snapshot);
    this.snapshot_finished = TBaseHelper.deepCopy(other.snapshot_finished);
    this.snapshot_commitLogId = TBaseHelper.deepCopy(other.snapshot_commitLogId);
    if (other.isSetTo_space_name()) {
      this.to_space_name = TBaseHelper.deepCopy(other.to_space_name);
    }
    this.sync_meta = TBaseHelper.deepCopy(other.sync_meta);
    if (other.isSetSpace_vid_type()) {
      this.space_vid_type = TBaseHelper.deepCopy(other.space_vid_type);
    }
    this.space_vid_len = TBaseHelper.deepCopy(other.space_vid_len);
  }

  public AppendLogRequest deepCopy() {
    return new AppendLogRequest(this);
  }

  public long getClusterId() {
    return this.clusterId;
  }

  public AppendLogRequest setClusterId(long clusterId) {
    this.clusterId = clusterId;
    setClusterIdIsSet(true);
    return this;
  }

  public void unsetClusterId() {
    __isset_bit_vector.clear(__CLUSTERID_ISSET_ID);
  }

  // Returns true if field clusterId is set (has been assigned a value) and false otherwise
  public boolean isSetClusterId() {
    return __isset_bit_vector.get(__CLUSTERID_ISSET_ID);
  }

  public void setClusterIdIsSet(boolean __value) {
    __isset_bit_vector.set(__CLUSTERID_ISSET_ID, __value);
  }

  public int getSpace() {
    return this.space;
  }

  public AppendLogRequest setSpace(int space) {
    this.space = space;
    setSpaceIsSet(true);
    return this;
  }

  public void unsetSpace() {
    __isset_bit_vector.clear(__SPACE_ISSET_ID);
  }

  // Returns true if field space is set (has been assigned a value) and false otherwise
  public boolean isSetSpace() {
    return __isset_bit_vector.get(__SPACE_ISSET_ID);
  }

  public void setSpaceIsSet(boolean __value) {
    __isset_bit_vector.set(__SPACE_ISSET_ID, __value);
  }

  public int getPart() {
    return this.part;
  }

  public AppendLogRequest setPart(int part) {
    this.part = part;
    setPartIsSet(true);
    return this;
  }

  public void unsetPart() {
    __isset_bit_vector.clear(__PART_ISSET_ID);
  }

  // Returns true if field part is set (has been assigned a value) and false otherwise
  public boolean isSetPart() {
    return __isset_bit_vector.get(__PART_ISSET_ID);
  }

  public void setPartIsSet(boolean __value) {
    __isset_bit_vector.set(__PART_ISSET_ID, __value);
  }

  public int getPart_num() {
    return this.part_num;
  }

  public AppendLogRequest setPart_num(int part_num) {
    this.part_num = part_num;
    setPart_numIsSet(true);
    return this;
  }

  public void unsetPart_num() {
    __isset_bit_vector.clear(__PART_NUM_ISSET_ID);
  }

  // Returns true if field part_num is set (has been assigned a value) and false otherwise
  public boolean isSetPart_num() {
    return __isset_bit_vector.get(__PART_NUM_ISSET_ID);
  }

  public void setPart_numIsSet(boolean __value) {
    __isset_bit_vector.set(__PART_NUM_ISSET_ID, __value);
  }

  public long getLast_log_id_to_send() {
    return this.last_log_id_to_send;
  }

  public AppendLogRequest setLast_log_id_to_send(long last_log_id_to_send) {
    this.last_log_id_to_send = last_log_id_to_send;
    setLast_log_id_to_sendIsSet(true);
    return this;
  }

  public void unsetLast_log_id_to_send() {
    __isset_bit_vector.clear(__LAST_LOG_ID_TO_SEND_ISSET_ID);
  }

  // Returns true if field last_log_id_to_send is set (has been assigned a value) and false otherwise
  public boolean isSetLast_log_id_to_send() {
    return __isset_bit_vector.get(__LAST_LOG_ID_TO_SEND_ISSET_ID);
  }

  public void setLast_log_id_to_sendIsSet(boolean __value) {
    __isset_bit_vector.set(__LAST_LOG_ID_TO_SEND_ISSET_ID, __value);
  }

  public long getLast_log_id_sent() {
    return this.last_log_id_sent;
  }

  public AppendLogRequest setLast_log_id_sent(long last_log_id_sent) {
    this.last_log_id_sent = last_log_id_sent;
    setLast_log_id_sentIsSet(true);
    return this;
  }

  public void unsetLast_log_id_sent() {
    __isset_bit_vector.clear(__LAST_LOG_ID_SENT_ISSET_ID);
  }

  // Returns true if field last_log_id_sent is set (has been assigned a value) and false otherwise
  public boolean isSetLast_log_id_sent() {
    return __isset_bit_vector.get(__LAST_LOG_ID_SENT_ISSET_ID);
  }

  public void setLast_log_id_sentIsSet(boolean __value) {
    __isset_bit_vector.set(__LAST_LOG_ID_SENT_ISSET_ID, __value);
  }

  public long getLog_term() {
    return this.log_term;
  }

  public AppendLogRequest setLog_term(long log_term) {
    this.log_term = log_term;
    setLog_termIsSet(true);
    return this;
  }

  public void unsetLog_term() {
    __isset_bit_vector.clear(__LOG_TERM_ISSET_ID);
  }

  // Returns true if field log_term is set (has been assigned a value) and false otherwise
  public boolean isSetLog_term() {
    return __isset_bit_vector.get(__LOG_TERM_ISSET_ID);
  }

  public void setLog_termIsSet(boolean __value) {
    __isset_bit_vector.set(__LOG_TERM_ISSET_ID, __value);
  }

  public List<com.vesoft.nebula.LogEntry> getLog_str_list() {
    return this.log_str_list;
  }

  public AppendLogRequest setLog_str_list(List<com.vesoft.nebula.LogEntry> log_str_list) {
    this.log_str_list = log_str_list;
    return this;
  }

  public void unsetLog_str_list() {
    this.log_str_list = null;
  }

  // Returns true if field log_str_list is set (has been assigned a value) and false otherwise
  public boolean isSetLog_str_list() {
    return this.log_str_list != null;
  }

  public void setLog_str_listIsSet(boolean __value) {
    if (!__value) {
      this.log_str_list = null;
    }
  }

  public boolean isNeed_cleanup() {
    return this.need_cleanup;
  }

  public AppendLogRequest setNeed_cleanup(boolean need_cleanup) {
    this.need_cleanup = need_cleanup;
    setNeed_cleanupIsSet(true);
    return this;
  }

  public void unsetNeed_cleanup() {
    __isset_bit_vector.clear(__NEED_CLEANUP_ISSET_ID);
  }

  // Returns true if field need_cleanup is set (has been assigned a value) and false otherwise
  public boolean isSetNeed_cleanup() {
    return __isset_bit_vector.get(__NEED_CLEANUP_ISSET_ID);
  }

  public void setNeed_cleanupIsSet(boolean __value) {
    __isset_bit_vector.set(__NEED_CLEANUP_ISSET_ID, __value);
  }

  public boolean isIs_snapshot() {
    return this.is_snapshot;
  }

  public AppendLogRequest setIs_snapshot(boolean is_snapshot) {
    this.is_snapshot = is_snapshot;
    setIs_snapshotIsSet(true);
    return this;
  }

  public void unsetIs_snapshot() {
    __isset_bit_vector.clear(__IS_SNAPSHOT_ISSET_ID);
  }

  // Returns true if field is_snapshot is set (has been assigned a value) and false otherwise
  public boolean isSetIs_snapshot() {
    return __isset_bit_vector.get(__IS_SNAPSHOT_ISSET_ID);
  }

  public void setIs_snapshotIsSet(boolean __value) {
    __isset_bit_vector.set(__IS_SNAPSHOT_ISSET_ID, __value);
  }

  public boolean isSnapshot_finished() {
    return this.snapshot_finished;
  }

  public AppendLogRequest setSnapshot_finished(boolean snapshot_finished) {
    this.snapshot_finished = snapshot_finished;
    setSnapshot_finishedIsSet(true);
    return this;
  }

  public void unsetSnapshot_finished() {
    __isset_bit_vector.clear(__SNAPSHOT_FINISHED_ISSET_ID);
  }

  // Returns true if field snapshot_finished is set (has been assigned a value) and false otherwise
  public boolean isSetSnapshot_finished() {
    return __isset_bit_vector.get(__SNAPSHOT_FINISHED_ISSET_ID);
  }

  public void setSnapshot_finishedIsSet(boolean __value) {
    __isset_bit_vector.set(__SNAPSHOT_FINISHED_ISSET_ID, __value);
  }

  public long getSnapshot_commitLogId() {
    return this.snapshot_commitLogId;
  }

  public AppendLogRequest setSnapshot_commitLogId(long snapshot_commitLogId) {
    this.snapshot_commitLogId = snapshot_commitLogId;
    setSnapshot_commitLogIdIsSet(true);
    return this;
  }

  public void unsetSnapshot_commitLogId() {
    __isset_bit_vector.clear(__SNAPSHOT_COMMITLOGID_ISSET_ID);
  }

  // Returns true if field snapshot_commitLogId is set (has been assigned a value) and false otherwise
  public boolean isSetSnapshot_commitLogId() {
    return __isset_bit_vector.get(__SNAPSHOT_COMMITLOGID_ISSET_ID);
  }

  public void setSnapshot_commitLogIdIsSet(boolean __value) {
    __isset_bit_vector.set(__SNAPSHOT_COMMITLOGID_ISSET_ID, __value);
  }

  public byte[] getTo_space_name() {
    return this.to_space_name;
  }

  public AppendLogRequest setTo_space_name(byte[] to_space_name) {
    this.to_space_name = to_space_name;
    return this;
  }

  public void unsetTo_space_name() {
    this.to_space_name = null;
  }

  // Returns true if field to_space_name is set (has been assigned a value) and false otherwise
  public boolean isSetTo_space_name() {
    return this.to_space_name != null;
  }

  public void setTo_space_nameIsSet(boolean __value) {
    if (!__value) {
      this.to_space_name = null;
    }
  }

  public boolean isSync_meta() {
    return this.sync_meta;
  }

  public AppendLogRequest setSync_meta(boolean sync_meta) {
    this.sync_meta = sync_meta;
    setSync_metaIsSet(true);
    return this;
  }

  public void unsetSync_meta() {
    __isset_bit_vector.clear(__SYNC_META_ISSET_ID);
  }

  // Returns true if field sync_meta is set (has been assigned a value) and false otherwise
  public boolean isSetSync_meta() {
    return __isset_bit_vector.get(__SYNC_META_ISSET_ID);
  }

  public void setSync_metaIsSet(boolean __value) {
    __isset_bit_vector.set(__SYNC_META_ISSET_ID, __value);
  }

  /**
   * 
   * @see com.vesoft.nebula.PropertyType
   */
  public com.vesoft.nebula.PropertyType getSpace_vid_type() {
    return this.space_vid_type;
  }

  /**
   * 
   * @see com.vesoft.nebula.PropertyType
   */
  public AppendLogRequest setSpace_vid_type(com.vesoft.nebula.PropertyType space_vid_type) {
    this.space_vid_type = space_vid_type;
    return this;
  }

  public void unsetSpace_vid_type() {
    this.space_vid_type = null;
  }

  // Returns true if field space_vid_type is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_vid_type() {
    return this.space_vid_type != null;
  }

  public void setSpace_vid_typeIsSet(boolean __value) {
    if (!__value) {
      this.space_vid_type = null;
    }
  }

  public short getSpace_vid_len() {
    return this.space_vid_len;
  }

  public AppendLogRequest setSpace_vid_len(short space_vid_len) {
    this.space_vid_len = space_vid_len;
    setSpace_vid_lenIsSet(true);
    return this;
  }

  public void unsetSpace_vid_len() {
    __isset_bit_vector.clear(__SPACE_VID_LEN_ISSET_ID);
  }

  // Returns true if field space_vid_len is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_vid_len() {
    return __isset_bit_vector.get(__SPACE_VID_LEN_ISSET_ID);
  }

  public void setSpace_vid_lenIsSet(boolean __value) {
    __isset_bit_vector.set(__SPACE_VID_LEN_ISSET_ID, __value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case CLUSTERID:
      if (__value == null) {
        unsetClusterId();
      } else {
        setClusterId((Long)__value);
      }
      break;

    case SPACE:
      if (__value == null) {
        unsetSpace();
      } else {
        setSpace((Integer)__value);
      }
      break;

    case PART:
      if (__value == null) {
        unsetPart();
      } else {
        setPart((Integer)__value);
      }
      break;

    case PART_NUM:
      if (__value == null) {
        unsetPart_num();
      } else {
        setPart_num((Integer)__value);
      }
      break;

    case LAST_LOG_ID_TO_SEND:
      if (__value == null) {
        unsetLast_log_id_to_send();
      } else {
        setLast_log_id_to_send((Long)__value);
      }
      break;

    case LAST_LOG_ID_SENT:
      if (__value == null) {
        unsetLast_log_id_sent();
      } else {
        setLast_log_id_sent((Long)__value);
      }
      break;

    case LOG_TERM:
      if (__value == null) {
        unsetLog_term();
      } else {
        setLog_term((Long)__value);
      }
      break;

    case LOG_STR_LIST:
      if (__value == null) {
        unsetLog_str_list();
      } else {
        setLog_str_list((List<com.vesoft.nebula.LogEntry>)__value);
      }
      break;

    case NEED_CLEANUP:
      if (__value == null) {
        unsetNeed_cleanup();
      } else {
        setNeed_cleanup((Boolean)__value);
      }
      break;

    case IS_SNAPSHOT:
      if (__value == null) {
        unsetIs_snapshot();
      } else {
        setIs_snapshot((Boolean)__value);
      }
      break;

    case SNAPSHOT_FINISHED:
      if (__value == null) {
        unsetSnapshot_finished();
      } else {
        setSnapshot_finished((Boolean)__value);
      }
      break;

    case SNAPSHOT_COMMITLOGID:
      if (__value == null) {
        unsetSnapshot_commitLogId();
      } else {
        setSnapshot_commitLogId((Long)__value);
      }
      break;

    case TO_SPACE_NAME:
      if (__value == null) {
        unsetTo_space_name();
      } else {
        setTo_space_name((byte[])__value);
      }
      break;

    case SYNC_META:
      if (__value == null) {
        unsetSync_meta();
      } else {
        setSync_meta((Boolean)__value);
      }
      break;

    case SPACE_VID_TYPE:
      if (__value == null) {
        unsetSpace_vid_type();
      } else {
        setSpace_vid_type((com.vesoft.nebula.PropertyType)__value);
      }
      break;

    case SPACE_VID_LEN:
      if (__value == null) {
        unsetSpace_vid_len();
      } else {
        setSpace_vid_len((Short)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CLUSTERID:
      return new Long(getClusterId());

    case SPACE:
      return new Integer(getSpace());

    case PART:
      return new Integer(getPart());

    case PART_NUM:
      return new Integer(getPart_num());

    case LAST_LOG_ID_TO_SEND:
      return new Long(getLast_log_id_to_send());

    case LAST_LOG_ID_SENT:
      return new Long(getLast_log_id_sent());

    case LOG_TERM:
      return new Long(getLog_term());

    case LOG_STR_LIST:
      return getLog_str_list();

    case NEED_CLEANUP:
      return new Boolean(isNeed_cleanup());

    case IS_SNAPSHOT:
      return new Boolean(isIs_snapshot());

    case SNAPSHOT_FINISHED:
      return new Boolean(isSnapshot_finished());

    case SNAPSHOT_COMMITLOGID:
      return new Long(getSnapshot_commitLogId());

    case TO_SPACE_NAME:
      return getTo_space_name();

    case SYNC_META:
      return new Boolean(isSync_meta());

    case SPACE_VID_TYPE:
      return getSpace_vid_type();

    case SPACE_VID_LEN:
      return new Short(getSpace_vid_len());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof AppendLogRequest))
      return false;
    AppendLogRequest that = (AppendLogRequest)_that;

    if (!TBaseHelper.equalsNobinary(this.clusterId, that.clusterId)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.space, that.space)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.part, that.part)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.part_num, that.part_num)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.last_log_id_to_send, that.last_log_id_to_send)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.last_log_id_sent, that.last_log_id_sent)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.log_term, that.log_term)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetLog_str_list(), that.isSetLog_str_list(), this.log_str_list, that.log_str_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.need_cleanup, that.need_cleanup)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.is_snapshot, that.is_snapshot)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.snapshot_finished, that.snapshot_finished)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.snapshot_commitLogId, that.snapshot_commitLogId)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetTo_space_name(), that.isSetTo_space_name(), this.to_space_name, that.to_space_name)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.sync_meta, that.sync_meta)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSpace_vid_type(), that.isSetSpace_vid_type(), this.space_vid_type, that.space_vid_type)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.space_vid_len, that.space_vid_len)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {clusterId, space, part, part_num, last_log_id_to_send, last_log_id_sent, log_term, log_str_list, need_cleanup, is_snapshot, snapshot_finished, snapshot_commitLogId, to_space_name, sync_meta, space_vid_type, space_vid_len});
  }

  @Override
  public int compareTo(AppendLogRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClusterId()).compareTo(other.isSetClusterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(clusterId, other.clusterId);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSpace()).compareTo(other.isSetSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space, other.space);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPart()).compareTo(other.isSetPart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(part, other.part);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPart_num()).compareTo(other.isSetPart_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(part_num, other.part_num);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLast_log_id_to_send()).compareTo(other.isSetLast_log_id_to_send());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(last_log_id_to_send, other.last_log_id_to_send);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLast_log_id_sent()).compareTo(other.isSetLast_log_id_sent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(last_log_id_sent, other.last_log_id_sent);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLog_term()).compareTo(other.isSetLog_term());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(log_term, other.log_term);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLog_str_list()).compareTo(other.isSetLog_str_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(log_str_list, other.log_str_list);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNeed_cleanup()).compareTo(other.isSetNeed_cleanup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(need_cleanup, other.need_cleanup);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIs_snapshot()).compareTo(other.isSetIs_snapshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(is_snapshot, other.is_snapshot);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSnapshot_finished()).compareTo(other.isSetSnapshot_finished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(snapshot_finished, other.snapshot_finished);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSnapshot_commitLogId()).compareTo(other.isSetSnapshot_commitLogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(snapshot_commitLogId, other.snapshot_commitLogId);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTo_space_name()).compareTo(other.isSetTo_space_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(to_space_name, other.to_space_name);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSync_meta()).compareTo(other.isSetSync_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(sync_meta, other.sync_meta);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSpace_vid_type()).compareTo(other.isSetSpace_vid_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_vid_type, other.space_vid_type);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSpace_vid_len()).compareTo(other.isSetSpace_vid_len());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_vid_len, other.space_vid_len);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case CLUSTERID:
          if (__field.type == TType.I64) {
            this.clusterId = iprot.readI64();
            setClusterIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SPACE:
          if (__field.type == TType.I32) {
            this.space = iprot.readI32();
            setSpaceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PART:
          if (__field.type == TType.I32) {
            this.part = iprot.readI32();
            setPartIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PART_NUM:
          if (__field.type == TType.I32) {
            this.part_num = iprot.readI32();
            setPart_numIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LAST_LOG_ID_TO_SEND:
          if (__field.type == TType.I64) {
            this.last_log_id_to_send = iprot.readI64();
            setLast_log_id_to_sendIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LAST_LOG_ID_SENT:
          if (__field.type == TType.I64) {
            this.last_log_id_sent = iprot.readI64();
            setLast_log_id_sentIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LOG_TERM:
          if (__field.type == TType.I64) {
            this.log_term = iprot.readI64();
            setLog_termIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LOG_STR_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.log_str_list = new ArrayList<com.vesoft.nebula.LogEntry>(Math.max(0, _list0.size));
              for (int _i1 = 0; 
                   (_list0.size < 0) ? iprot.peekList() : (_i1 < _list0.size); 
                   ++_i1)
              {
                com.vesoft.nebula.LogEntry _elem2;
                _elem2 = new com.vesoft.nebula.LogEntry();
                _elem2.read(iprot);
                this.log_str_list.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NEED_CLEANUP:
          if (__field.type == TType.BOOL) {
            this.need_cleanup = iprot.readBool();
            setNeed_cleanupIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case IS_SNAPSHOT:
          if (__field.type == TType.BOOL) {
            this.is_snapshot = iprot.readBool();
            setIs_snapshotIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SNAPSHOT_FINISHED:
          if (__field.type == TType.BOOL) {
            this.snapshot_finished = iprot.readBool();
            setSnapshot_finishedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SNAPSHOT_COMMITLOGID:
          if (__field.type == TType.I64) {
            this.snapshot_commitLogId = iprot.readI64();
            setSnapshot_commitLogIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TO_SPACE_NAME:
          if (__field.type == TType.STRING) {
            this.to_space_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SYNC_META:
          if (__field.type == TType.BOOL) {
            this.sync_meta = iprot.readBool();
            setSync_metaIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SPACE_VID_TYPE:
          if (__field.type == TType.I32) {
            this.space_vid_type = com.vesoft.nebula.PropertyType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SPACE_VID_LEN:
          if (__field.type == TType.I16) {
            this.space_vid_len = iprot.readI16();
            setSpace_vid_lenIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
    oprot.writeI64(this.clusterId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPACE_FIELD_DESC);
    oprot.writeI32(this.space);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PART_FIELD_DESC);
    oprot.writeI32(this.part);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PART_NUM_FIELD_DESC);
    oprot.writeI32(this.part_num);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_LOG_ID_TO_SEND_FIELD_DESC);
    oprot.writeI64(this.last_log_id_to_send);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_LOG_ID_SENT_FIELD_DESC);
    oprot.writeI64(this.last_log_id_sent);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LOG_TERM_FIELD_DESC);
    oprot.writeI64(this.log_term);
    oprot.writeFieldEnd();
    if (this.log_str_list != null) {
      oprot.writeFieldBegin(LOG_STR_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.log_str_list.size()));
        for (com.vesoft.nebula.LogEntry _iter3 : this.log_str_list)        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NEED_CLEANUP_FIELD_DESC);
    oprot.writeBool(this.need_cleanup);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_SNAPSHOT_FIELD_DESC);
    oprot.writeBool(this.is_snapshot);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SNAPSHOT_FINISHED_FIELD_DESC);
    oprot.writeBool(this.snapshot_finished);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SNAPSHOT_COMMIT_LOG_ID_FIELD_DESC);
    oprot.writeI64(this.snapshot_commitLogId);
    oprot.writeFieldEnd();
    if (this.to_space_name != null) {
      oprot.writeFieldBegin(TO_SPACE_NAME_FIELD_DESC);
      oprot.writeBinary(this.to_space_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SYNC_META_FIELD_DESC);
    oprot.writeBool(this.sync_meta);
    oprot.writeFieldEnd();
    if (this.space_vid_type != null) {
      oprot.writeFieldBegin(SPACE_VID_TYPE_FIELD_DESC);
      oprot.writeI32(this.space_vid_type == null ? 0 : this.space_vid_type.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SPACE_VID_LEN_FIELD_DESC);
    oprot.writeI16(this.space_vid_len);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AppendLogRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("clusterId");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getClusterId(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSpace(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("part");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getPart(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("part_num");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getPart_num(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("last_log_id_to_send");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getLast_log_id_to_send(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("last_log_id_sent");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getLast_log_id_sent(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("log_term");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getLog_term(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("log_str_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getLog_str_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getLog_str_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("need_cleanup");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isNeed_cleanup(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("is_snapshot");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isIs_snapshot(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("snapshot_finished");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isSnapshot_finished(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("snapshot_commitLogId");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSnapshot_commitLogId(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("to_space_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTo_space_name() == null) {
      sb.append("null");
    } else {
        int __to_space_name_size = Math.min(this.getTo_space_name().length, 128);
        for (int i = 0; i < __to_space_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getTo_space_name()[i]).length() > 1 ? Integer.toHexString(this.getTo_space_name()[i]).substring(Integer.toHexString(this.getTo_space_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getTo_space_name()[i]).toUpperCase());
        }
        if (this.getTo_space_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("sync_meta");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isSync_meta(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space_vid_type");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSpace_vid_type() == null) {
      sb.append("null");
    } else {
      String space_vid_type_name = this.getSpace_vid_type() == null ? "null" : this.getSpace_vid_type().name();
      if (space_vid_type_name != null) {
        sb.append(space_vid_type_name);
        sb.append(" (");
      }
      sb.append(this.getSpace_vid_type());
      if (space_vid_type_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("space_vid_len");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSpace_vid_len(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

