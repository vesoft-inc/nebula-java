/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.drainer;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AppendLogResponse implements TBase, java.io.Serializable, Cloneable, Comparable<AppendLogResponse> {
  private static final TStruct STRUCT_DESC = new TStruct("AppendLogResponse");
  private static final TField ERROR_CODE_FIELD_DESC = new TField("error_code", TType.I32, (short)1);
  private static final TField LAST_MATCHED_LOG_ID_FIELD_DESC = new TField("last_matched_log_id", TType.I64, (short)2);

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode error_code;
  public long last_matched_log_id;
  public static final int ERROR_CODE = 1;
  public static final int LAST_MATCHED_LOG_ID = 2;

  // isset id assignments
  private static final int __LAST_MATCHED_LOG_ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ERROR_CODE, new FieldMetaData("error_code", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(LAST_MATCHED_LOG_ID, new FieldMetaData("last_matched_log_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AppendLogResponse.class, metaDataMap);
  }

  public AppendLogResponse() {
  }

  public AppendLogResponse(
      com.vesoft.nebula.ErrorCode error_code,
      long last_matched_log_id) {
    this();
    this.error_code = error_code;
    this.last_matched_log_id = last_matched_log_id;
    setLast_matched_log_idIsSet(true);
  }

  public static class Builder {
    private com.vesoft.nebula.ErrorCode error_code;
    private long last_matched_log_id;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setError_code(final com.vesoft.nebula.ErrorCode error_code) {
      this.error_code = error_code;
      return this;
    }

    public Builder setLast_matched_log_id(final long last_matched_log_id) {
      this.last_matched_log_id = last_matched_log_id;
      __optional_isset.set(__LAST_MATCHED_LOG_ID_ISSET_ID, true);
      return this;
    }

    public AppendLogResponse build() {
      AppendLogResponse result = new AppendLogResponse();
      result.setError_code(this.error_code);
      if (__optional_isset.get(__LAST_MATCHED_LOG_ID_ISSET_ID)) {
        result.setLast_matched_log_id(this.last_matched_log_id);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppendLogResponse(AppendLogResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetError_code()) {
      this.error_code = TBaseHelper.deepCopy(other.error_code);
    }
    this.last_matched_log_id = TBaseHelper.deepCopy(other.last_matched_log_id);
  }

  public AppendLogResponse deepCopy() {
    return new AppendLogResponse(this);
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode getError_code() {
    return this.error_code;
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public AppendLogResponse setError_code(com.vesoft.nebula.ErrorCode error_code) {
    this.error_code = error_code;
    return this;
  }

  public void unsetError_code() {
    this.error_code = null;
  }

  // Returns true if field error_code is set (has been assigned a value) and false otherwise
  public boolean isSetError_code() {
    return this.error_code != null;
  }

  public void setError_codeIsSet(boolean __value) {
    if (!__value) {
      this.error_code = null;
    }
  }

  public long getLast_matched_log_id() {
    return this.last_matched_log_id;
  }

  public AppendLogResponse setLast_matched_log_id(long last_matched_log_id) {
    this.last_matched_log_id = last_matched_log_id;
    setLast_matched_log_idIsSet(true);
    return this;
  }

  public void unsetLast_matched_log_id() {
    __isset_bit_vector.clear(__LAST_MATCHED_LOG_ID_ISSET_ID);
  }

  // Returns true if field last_matched_log_id is set (has been assigned a value) and false otherwise
  public boolean isSetLast_matched_log_id() {
    return __isset_bit_vector.get(__LAST_MATCHED_LOG_ID_ISSET_ID);
  }

  public void setLast_matched_log_idIsSet(boolean __value) {
    __isset_bit_vector.set(__LAST_MATCHED_LOG_ID_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ERROR_CODE:
      if (__value == null) {
        unsetError_code();
      } else {
        setError_code((com.vesoft.nebula.ErrorCode)__value);
      }
      break;

    case LAST_MATCHED_LOG_ID:
      if (__value == null) {
        unsetLast_matched_log_id();
      } else {
        setLast_matched_log_id((Long)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ERROR_CODE:
      return getError_code();

    case LAST_MATCHED_LOG_ID:
      return new Long(getLast_matched_log_id());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof AppendLogResponse))
      return false;
    AppendLogResponse that = (AppendLogResponse)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetError_code(), that.isSetError_code(), this.error_code, that.error_code)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.last_matched_log_id, that.last_matched_log_id)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {error_code, last_matched_log_id});
  }

  @Override
  public int compareTo(AppendLogResponse other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetError_code()).compareTo(other.isSetError_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(error_code, other.error_code);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLast_matched_log_id()).compareTo(other.isSetLast_matched_log_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(last_matched_log_id, other.last_matched_log_id);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ERROR_CODE:
          if (__field.type == TType.I32) {
            this.error_code = com.vesoft.nebula.ErrorCode.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LAST_MATCHED_LOG_ID:
          if (__field.type == TType.I64) {
            this.last_matched_log_id = iprot.readI64();
            setLast_matched_log_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.error_code != null) {
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(this.error_code == null ? 0 : this.error_code.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LAST_MATCHED_LOG_ID_FIELD_DESC);
    oprot.writeI64(this.last_matched_log_id);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AppendLogResponse");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("error_code");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getError_code() == null) {
      sb.append("null");
    } else {
      String error_code_name = this.getError_code() == null ? "null" : this.getError_code().name();
      if (error_code_name != null) {
        sb.append(error_code_name);
        sb.append(" (");
      }
      sb.append(this.getError_code());
      if (error_code_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("last_matched_log_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getLast_matched_log_id(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

