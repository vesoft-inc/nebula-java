/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ValueType implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ValueType");
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
  private static final TField VALUE_TYPE_FIELD_DESC = new TField("value_type", TType.STRUCT, (short)2);
  private static final TField SCHEMA_FIELD_DESC = new TField("schema", TType.STRUCT, (short)3);

  /**
   * 
   * @see SupportedType
   */
  public int type;
  public ValueType value_type;
  public Schema schema;
  public static final int TYPE = 1;
  public static final int VALUE_TYPE = 2;
  public static final int SCHEMA = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(VALUE_TYPE, new FieldMetaData("value_type", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ValueType.class)));
    tmpMetaDataMap.put(SCHEMA, new FieldMetaData("schema", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Schema.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ValueType.class, metaDataMap);
  }

  public ValueType() {
  }

  public ValueType(
    int type)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
  }

  public ValueType(
    int type,
    ValueType value_type,
    Schema schema)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.value_type = value_type;
    this.schema = schema;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ValueType(ValueType other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.type = TBaseHelper.deepCopy(other.type);
    if (other.isSetValue_type()) {
      this.value_type = TBaseHelper.deepCopy(other.value_type);
    }
    if (other.isSetSchema()) {
      this.schema = TBaseHelper.deepCopy(other.schema);
    }
  }

  public ValueType deepCopy() {
    return new ValueType(this);
  }

  @Deprecated
  public ValueType clone() {
    return new ValueType(this);
  }

  /**
   * 
   * @see SupportedType
   */
  public int  getType() {
    return this.type;
  }

  /**
   * 
   * @see SupportedType
   */
  public ValueType setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  // Returns true if field type is set (has been assigned a value) and false otherwise
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public ValueType  getValue_type() {
    return this.value_type;
  }

  public ValueType setValue_type(ValueType value_type) {
    this.value_type = value_type;
    return this;
  }

  public void unsetValue_type() {
    this.value_type = null;
  }

  // Returns true if field value_type is set (has been assigned a value) and false otherwise
  public boolean isSetValue_type() {
    return this.value_type != null;
  }

  public void setValue_typeIsSet(boolean value) {
    if (!value) {
      this.value_type = null;
    }
  }

  public Schema  getSchema() {
    return this.schema;
  }

  public ValueType setSchema(Schema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  // Returns true if field schema is set (has been assigned a value) and false otherwise
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case VALUE_TYPE:
      if (value == null) {
        unsetValue_type();
      } else {
        setValue_type((ValueType)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((Schema)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TYPE:
      return getType();

    case VALUE_TYPE:
      return getValue_type();

    case SCHEMA:
      return getSchema();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TYPE:
      return isSetType();
    case VALUE_TYPE:
      return isSetValue_type();
    case SCHEMA:
      return isSetSchema();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ValueType)
      return this.equals((ValueType)that);
    return false;
  }

  public boolean equals(ValueType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!TBaseHelper.equalsNobinary(this.type, that.type))
        return false;
    }

    boolean this_present_value_type = true && this.isSetValue_type();
    boolean that_present_value_type = true && that.isSetValue_type();
    if (this_present_value_type || that_present_value_type) {
      if (!(this_present_value_type && that_present_value_type))
        return false;
      if (!TBaseHelper.equalsNobinary(this.value_type, that.value_type))
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!TBaseHelper.equalsNobinary(this.schema, that.schema))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_value_type = true && (isSetValue_type());
    builder.append(present_value_type);
    if (present_value_type)
      builder.append(value_type);

    boolean present_schema = true && (isSetSchema());
    builder.append(present_schema);
    if (present_schema)
      builder.append(schema);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VALUE_TYPE:
          if (field.type == TType.STRUCT) {
            this.value_type = new ValueType();
            this.value_type.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA:
          if (field.type == TType.STRUCT) {
            this.schema = new Schema();
            this.schema.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.value_type != null) {
      if (isSetValue_type()) {
        oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
        this.value_type.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.schema != null) {
      if (isSetSchema()) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        this.schema.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ValueType");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("type");
    sb.append(space);
    sb.append(":").append(space);
    String type_name = SupportedType.VALUES_TO_NAMES.get(this. getType());
    if (type_name != null) {
      sb.append(type_name);
      sb.append(" (");
    }
    sb.append(this. getType());
    if (type_name != null) {
      sb.append(")");
    }
    first = false;
    if (isSetValue_type())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("value_type");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getValue_type() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getValue_type(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetSchema())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("schema");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSchema() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSchema(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !SupportedType.VALID_VALUES.contains(type)){
      throw new TProtocolException("The field 'type' has been assigned the invalid value " + type);
    }
  }

}

