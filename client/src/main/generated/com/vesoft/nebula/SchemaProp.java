/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SchemaProp implements TBase, java.io.Serializable, Cloneable, Comparable<SchemaProp> {
  private static final TStruct STRUCT_DESC = new TStruct("SchemaProp");
  private static final TField TTL_DURATION_FIELD_DESC = new TField("ttl_duration", TType.I64, (short)1);
  private static final TField TTL_COL_FIELD_DESC = new TField("ttl_col", TType.STRING, (short)2);

  public long ttl_duration;
  public String ttl_col;
  public static final int TTL_DURATION = 1;
  public static final int TTL_COL = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __TTL_DURATION_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TTL_DURATION, new FieldMetaData("ttl_duration", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(TTL_COL, new FieldMetaData("ttl_col", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SchemaProp.class, metaDataMap);
  }

  public SchemaProp() {
  }

  public SchemaProp(
    long ttl_duration,
    String ttl_col)
  {
    this();
    this.ttl_duration = ttl_duration;
    setTtl_durationIsSet(true);
    this.ttl_col = ttl_col;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SchemaProp(SchemaProp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.ttl_duration = TBaseHelper.deepCopy(other.ttl_duration);
    if (other.isSetTtl_col()) {
      this.ttl_col = TBaseHelper.deepCopy(other.ttl_col);
    }
  }

  public SchemaProp deepCopy() {
    return new SchemaProp(this);
  }

  @Deprecated
  public SchemaProp clone() {
    return new SchemaProp(this);
  }

  public long  getTtl_duration() {
    return this.ttl_duration;
  }

  public SchemaProp setTtl_duration(long ttl_duration) {
    this.ttl_duration = ttl_duration;
    setTtl_durationIsSet(true);
    return this;
  }

  public void unsetTtl_duration() {
    __isset_bit_vector.clear(__TTL_DURATION_ISSET_ID);
  }

  // Returns true if field ttl_duration is set (has been assigned a value) and false otherwise
  public boolean isSetTtl_duration() {
    return __isset_bit_vector.get(__TTL_DURATION_ISSET_ID);
  }

  public void setTtl_durationIsSet(boolean value) {
    __isset_bit_vector.set(__TTL_DURATION_ISSET_ID, value);
  }

  public String  getTtl_col() {
    return this.ttl_col;
  }

  public SchemaProp setTtl_col(String ttl_col) {
    this.ttl_col = ttl_col;
    return this;
  }

  public void unsetTtl_col() {
    this.ttl_col = null;
  }

  // Returns true if field ttl_col is set (has been assigned a value) and false otherwise
  public boolean isSetTtl_col() {
    return this.ttl_col != null;
  }

  public void setTtl_colIsSet(boolean value) {
    if (!value) {
      this.ttl_col = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TTL_DURATION:
      if (value == null) {
        unsetTtl_duration();
      } else {
        setTtl_duration((Long)value);
      }
      break;

    case TTL_COL:
      if (value == null) {
        unsetTtl_col();
      } else {
        setTtl_col((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TTL_DURATION:
      return new Long(getTtl_duration());

    case TTL_COL:
      return getTtl_col();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TTL_DURATION:
      return isSetTtl_duration();
    case TTL_COL:
      return isSetTtl_col();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SchemaProp)
      return this.equals((SchemaProp)that);
    return false;
  }

  public boolean equals(SchemaProp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ttl_duration = true && this.isSetTtl_duration();
    boolean that_present_ttl_duration = true && that.isSetTtl_duration();
    if (this_present_ttl_duration || that_present_ttl_duration) {
      if (!(this_present_ttl_duration && that_present_ttl_duration))
        return false;
      if (!TBaseHelper.equalsNobinary(this.ttl_duration, that.ttl_duration))
        return false;
    }

    boolean this_present_ttl_col = true && this.isSetTtl_col();
    boolean that_present_ttl_col = true && that.isSetTtl_col();
    if (this_present_ttl_col || that_present_ttl_col) {
      if (!(this_present_ttl_col && that_present_ttl_col))
        return false;
      if (!TBaseHelper.equalsNobinary(this.ttl_col, that.ttl_col))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_ttl_duration = true && (isSetTtl_duration());
    builder.append(present_ttl_duration);
    if (present_ttl_duration)
      builder.append(ttl_duration);

    boolean present_ttl_col = true && (isSetTtl_col());
    builder.append(present_ttl_col);
    if (present_ttl_col)
      builder.append(ttl_col);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(SchemaProp other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTtl_duration()).compareTo(other.isSetTtl_duration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(ttl_duration, other.ttl_duration);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTtl_col()).compareTo(other.isSetTtl_col());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(ttl_col, other.ttl_col);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TTL_DURATION:
          if (field.type == TType.I64) {
            this.ttl_duration = iprot.readI64();
            setTtl_durationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TTL_COL:
          if (field.type == TType.STRING) {
            this.ttl_col = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetTtl_duration()) {
      oprot.writeFieldBegin(TTL_DURATION_FIELD_DESC);
      oprot.writeI64(this.ttl_duration);
      oprot.writeFieldEnd();
    }
    if (this.ttl_col != null) {
      if (isSetTtl_col()) {
        oprot.writeFieldBegin(TTL_COL_FIELD_DESC);
        oprot.writeString(this.ttl_col);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SchemaProp");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    if (isSetTtl_duration())
    {
      sb.append(indentStr);
      sb.append("ttl_duration");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getTtl_duration(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetTtl_col())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ttl_col");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getTtl_col() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getTtl_col(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

