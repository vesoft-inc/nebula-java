/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class LineString implements TBase, java.io.Serializable, Cloneable, Comparable<LineString> {
  private static final TStruct STRUCT_DESC = new TStruct("LineString");
  private static final TField COORD_LIST_FIELD_DESC = new TField("coordList", TType.LIST, (short)1);

  public List<Coordinate> coordList;
  public static final int COORDLIST = 1;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(COORDLIST, new FieldMetaData("coordList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Coordinate.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(LineString.class, metaDataMap);
  }

  public LineString() {
  }

  public LineString(
      List<Coordinate> coordList) {
    this();
    this.coordList = coordList;
  }

  public static class Builder {
    private List<Coordinate> coordList;

    public Builder() {
    }

    public Builder setCoordList(final List<Coordinate> coordList) {
      this.coordList = coordList;
      return this;
    }

    public LineString build() {
      LineString result = new LineString();
      result.setCoordList(this.coordList);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineString(LineString other) {
    if (other.isSetCoordList()) {
      this.coordList = TBaseHelper.deepCopy(other.coordList);
    }
  }

  public LineString deepCopy() {
    return new LineString(this);
  }

  public List<Coordinate> getCoordList() {
    return this.coordList;
  }

  public LineString setCoordList(List<Coordinate> coordList) {
    this.coordList = coordList;
    return this;
  }

  public void unsetCoordList() {
    this.coordList = null;
  }

  // Returns true if field coordList is set (has been assigned a value) and false otherwise
  public boolean isSetCoordList() {
    return this.coordList != null;
  }

  public void setCoordListIsSet(boolean __value) {
    if (!__value) {
      this.coordList = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case COORDLIST:
      if (__value == null) {
        unsetCoordList();
      } else {
        setCoordList((List<Coordinate>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COORDLIST:
      return getCoordList();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof LineString))
      return false;
    LineString that = (LineString)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetCoordList(), that.isSetCoordList(), this.coordList, that.coordList)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {coordList});
  }

  @Override
  public int compareTo(LineString other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCoordList()).compareTo(other.isSetCoordList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(coordList, other.coordList);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case COORDLIST:
          if (__field.type == TType.LIST) {
            {
              TList _list25 = iprot.readListBegin();
              this.coordList = new ArrayList<Coordinate>(Math.max(0, _list25.size));
              for (int _i26 = 0; 
                   (_list25.size < 0) ? iprot.peekList() : (_i26 < _list25.size); 
                   ++_i26)
              {
                Coordinate _elem27;
                _elem27 = new Coordinate();
                _elem27.read(iprot);
                this.coordList.add(_elem27);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.coordList != null) {
      oprot.writeFieldBegin(COORD_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.coordList.size()));
        for (Coordinate _iter28 : this.coordList)        {
          _iter28.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("LineString");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("coordList");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getCoordList() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getCoordList(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

