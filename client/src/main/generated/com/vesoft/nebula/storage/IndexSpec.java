/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class IndexSpec implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("IndexSpec");
  private static final TField CONTEXTS_FIELD_DESC = new TField("contexts", TType.LIST, (short)1);
  private static final TField IS_EDGE_FIELD_DESC = new TField("is_edge", TType.BOOL, (short)2);
  private static final TField TAG_OR_EDGE_ID_FIELD_DESC = new TField("tag_or_edge_id", TType.I32, (short)3);

  public List<IndexQueryContext> contexts;
  public boolean is_edge;
  public int tag_or_edge_id;
  public static final int CONTEXTS = 1;
  public static final int IS_EDGE = 2;
  public static final int TAG_OR_EDGE_ID = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __IS_EDGE_ISSET_ID = 0;
  private static final int __TAG_OR_EDGE_ID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CONTEXTS, new FieldMetaData("contexts", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, IndexQueryContext.class))));
    tmpMetaDataMap.put(IS_EDGE, new FieldMetaData("is_edge", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(TAG_OR_EDGE_ID, new FieldMetaData("tag_or_edge_id", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(IndexSpec.class, metaDataMap);
  }

  public IndexSpec() {
  }

  public IndexSpec(
    List<IndexQueryContext> contexts,
    boolean is_edge,
    int tag_or_edge_id)
  {
    this();
    this.contexts = contexts;
    this.is_edge = is_edge;
    setIs_edgeIsSet(true);
    this.tag_or_edge_id = tag_or_edge_id;
    setTag_or_edge_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexSpec(IndexSpec other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetContexts()) {
      this.contexts = TBaseHelper.deepCopy(other.contexts);
    }
    this.is_edge = TBaseHelper.deepCopy(other.is_edge);
    this.tag_or_edge_id = TBaseHelper.deepCopy(other.tag_or_edge_id);
  }

  public IndexSpec deepCopy() {
    return new IndexSpec(this);
  }

  @Deprecated
  public IndexSpec clone() {
    return new IndexSpec(this);
  }

  public List<IndexQueryContext>  getContexts() {
    return this.contexts;
  }

  public IndexSpec setContexts(List<IndexQueryContext> contexts) {
    this.contexts = contexts;
    return this;
  }

  public void unsetContexts() {
    this.contexts = null;
  }

  // Returns true if field contexts is set (has been assigned a value) and false otherwise
  public boolean isSetContexts() {
    return this.contexts != null;
  }

  public void setContextsIsSet(boolean value) {
    if (!value) {
      this.contexts = null;
    }
  }

  public boolean  isIs_edge() {
    return this.is_edge;
  }

  public IndexSpec setIs_edge(boolean is_edge) {
    this.is_edge = is_edge;
    setIs_edgeIsSet(true);
    return this;
  }

  public void unsetIs_edge() {
    __isset_bit_vector.clear(__IS_EDGE_ISSET_ID);
  }

  // Returns true if field is_edge is set (has been assigned a value) and false otherwise
  public boolean isSetIs_edge() {
    return __isset_bit_vector.get(__IS_EDGE_ISSET_ID);
  }

  public void setIs_edgeIsSet(boolean value) {
    __isset_bit_vector.set(__IS_EDGE_ISSET_ID, value);
  }

  public int  getTag_or_edge_id() {
    return this.tag_or_edge_id;
  }

  public IndexSpec setTag_or_edge_id(int tag_or_edge_id) {
    this.tag_or_edge_id = tag_or_edge_id;
    setTag_or_edge_idIsSet(true);
    return this;
  }

  public void unsetTag_or_edge_id() {
    __isset_bit_vector.clear(__TAG_OR_EDGE_ID_ISSET_ID);
  }

  // Returns true if field tag_or_edge_id is set (has been assigned a value) and false otherwise
  public boolean isSetTag_or_edge_id() {
    return __isset_bit_vector.get(__TAG_OR_EDGE_ID_ISSET_ID);
  }

  public void setTag_or_edge_idIsSet(boolean value) {
    __isset_bit_vector.set(__TAG_OR_EDGE_ID_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CONTEXTS:
      if (value == null) {
        unsetContexts();
      } else {
        setContexts((List<IndexQueryContext>)value);
      }
      break;

    case IS_EDGE:
      if (value == null) {
        unsetIs_edge();
      } else {
        setIs_edge((Boolean)value);
      }
      break;

    case TAG_OR_EDGE_ID:
      if (value == null) {
        unsetTag_or_edge_id();
      } else {
        setTag_or_edge_id((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CONTEXTS:
      return getContexts();

    case IS_EDGE:
      return new Boolean(isIs_edge());

    case TAG_OR_EDGE_ID:
      return new Integer(getTag_or_edge_id());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CONTEXTS:
      return isSetContexts();
    case IS_EDGE:
      return isSetIs_edge();
    case TAG_OR_EDGE_ID:
      return isSetTag_or_edge_id();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndexSpec)
      return this.equals((IndexSpec)that);
    return false;
  }

  public boolean equals(IndexSpec that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_contexts = true && this.isSetContexts();
    boolean that_present_contexts = true && that.isSetContexts();
    if (this_present_contexts || that_present_contexts) {
      if (!(this_present_contexts && that_present_contexts))
        return false;
      if (!TBaseHelper.equalsNobinary(this.contexts, that.contexts))
        return false;
    }

    boolean this_present_is_edge = true;
    boolean that_present_is_edge = true;
    if (this_present_is_edge || that_present_is_edge) {
      if (!(this_present_is_edge && that_present_is_edge))
        return false;
      if (!TBaseHelper.equalsNobinary(this.is_edge, that.is_edge))
        return false;
    }

    boolean this_present_tag_or_edge_id = true;
    boolean that_present_tag_or_edge_id = true;
    if (this_present_tag_or_edge_id || that_present_tag_or_edge_id) {
      if (!(this_present_tag_or_edge_id && that_present_tag_or_edge_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.tag_or_edge_id, that.tag_or_edge_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_contexts = true && (isSetContexts());
    builder.append(present_contexts);
    if (present_contexts)
      builder.append(contexts);

    boolean present_is_edge = true;
    builder.append(present_is_edge);
    if (present_is_edge)
      builder.append(is_edge);

    boolean present_tag_or_edge_id = true;
    builder.append(present_tag_or_edge_id);
    if (present_tag_or_edge_id)
      builder.append(tag_or_edge_id);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CONTEXTS:
          if (field.type == TType.LIST) {
            {
              TList _list159 = iprot.readListBegin();
              this.contexts = new ArrayList<IndexQueryContext>(Math.max(0, _list159.size));
              for (int _i160 = 0; 
                   (_list159.size < 0) ? iprot.peekList() : (_i160 < _list159.size); 
                   ++_i160)
              {
                IndexQueryContext _elem161;
                _elem161 = new IndexQueryContext();
                _elem161.read(iprot);
                this.contexts.add(_elem161);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IS_EDGE:
          if (field.type == TType.BOOL) {
            this.is_edge = iprot.readBool();
            setIs_edgeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_OR_EDGE_ID:
          if (field.type == TType.I32) {
            this.tag_or_edge_id = iprot.readI32();
            setTag_or_edge_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetIs_edge()) {
      throw new TProtocolException("Required field 'is_edge' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetTag_or_edge_id()) {
      throw new TProtocolException("Required field 'tag_or_edge_id' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.contexts != null) {
      oprot.writeFieldBegin(CONTEXTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.contexts.size()));
        for (IndexQueryContext _iter162 : this.contexts)        {
          _iter162.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_EDGE_FIELD_DESC);
    oprot.writeBool(this.is_edge);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TAG_OR_EDGE_ID_FIELD_DESC);
    oprot.writeI32(this.tag_or_edge_id);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("IndexSpec");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("contexts");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getContexts() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getContexts(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("is_edge");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isIs_edge(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("tag_or_edge_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getTag_or_edge_id(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (contexts == null) {
      throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'contexts' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_edge' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tag_or_edge_id' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }

}

