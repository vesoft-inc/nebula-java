/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ScanVertexRequest implements TBase, java.io.Serializable, Cloneable, Comparable<ScanVertexRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("ScanVertexRequest");
  private static final TField SPACE_ID_FIELD_DESC = new TField("space_id", TType.I32, (short)1);
  private static final TField PART_ID_FIELD_DESC = new TField("part_id", TType.I32, (short)2);
  private static final TField CURSOR_FIELD_DESC = new TField("cursor", TType.STRING, (short)3);
  private static final TField VERTEX_ID_FIELD_DESC = new TField("vertex_id", TType.I64, (short)4);
  private static final TField ROW_LIMIT_FIELD_DESC = new TField("row_limit", TType.I32, (short)5);
  private static final TField START_TIME_FIELD_DESC = new TField("start_time", TType.I64, (short)6);
  private static final TField END_TIME_FIELD_DESC = new TField("end_time", TType.I64, (short)7);
  private static final TField MAX_VERSIONS_FIELD_DESC = new TField("max_versions", TType.I32, (short)8);

  public int space_id;
  public int part_id;
  public byte[] cursor;
  public long vertex_id;
  public int row_limit;
  public long start_time;
  public long end_time;
  public int max_versions;
  public static final int SPACE_ID = 1;
  public static final int PART_ID = 2;
  public static final int CURSOR = 3;
  public static final int VERTEX_ID = 4;
  public static final int ROW_LIMIT = 5;
  public static final int START_TIME = 6;
  public static final int END_TIME = 7;
  public static final int MAX_VERSIONS = 8;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SPACE_ID_ISSET_ID = 0;
  private static final int __PART_ID_ISSET_ID = 1;
  private static final int __VERTEX_ID_ISSET_ID = 2;
  private static final int __ROW_LIMIT_ISSET_ID = 3;
  private static final int __START_TIME_ISSET_ID = 4;
  private static final int __END_TIME_ISSET_ID = 5;
  private static final int __MAX_VERSIONS_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE_ID, new FieldMetaData("space_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PART_ID, new FieldMetaData("part_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(CURSOR, new FieldMetaData("cursor", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(VERTEX_ID, new FieldMetaData("vertex_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(ROW_LIMIT, new FieldMetaData("row_limit", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(START_TIME, new FieldMetaData("start_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(END_TIME, new FieldMetaData("end_time", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(MAX_VERSIONS, new FieldMetaData("max_versions", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ScanVertexRequest.class, metaDataMap);
  }

  public ScanVertexRequest() {
  }

  public ScanVertexRequest(
    int space_id,
    int part_id,
    int row_limit,
    long start_time,
    long end_time,
    int max_versions)
  {
    this();
    this.space_id = space_id;
    setSpace_idIsSet(true);
    this.part_id = part_id;
    setPart_idIsSet(true);
    this.row_limit = row_limit;
    setRow_limitIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.end_time = end_time;
    setEnd_timeIsSet(true);
    this.max_versions = max_versions;
    setMax_versionsIsSet(true);
  }

  public ScanVertexRequest(
    int space_id,
    int part_id,
    byte[] cursor,
    long vertex_id,
    int row_limit,
    long start_time,
    long end_time,
    int max_versions)
  {
    this();
    this.space_id = space_id;
    setSpace_idIsSet(true);
    this.part_id = part_id;
    setPart_idIsSet(true);
    this.cursor = cursor;
    this.vertex_id = vertex_id;
    setVertex_idIsSet(true);
    this.row_limit = row_limit;
    setRow_limitIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.end_time = end_time;
    setEnd_timeIsSet(true);
    this.max_versions = max_versions;
    setMax_versionsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScanVertexRequest(ScanVertexRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.space_id = TBaseHelper.deepCopy(other.space_id);
    this.part_id = TBaseHelper.deepCopy(other.part_id);
    if (other.isSetCursor()) {
      this.cursor = TBaseHelper.deepCopy(other.cursor);
    }
    this.vertex_id = TBaseHelper.deepCopy(other.vertex_id);
    this.row_limit = TBaseHelper.deepCopy(other.row_limit);
    this.start_time = TBaseHelper.deepCopy(other.start_time);
    this.end_time = TBaseHelper.deepCopy(other.end_time);
    this.max_versions = TBaseHelper.deepCopy(other.max_versions);
  }

  public ScanVertexRequest deepCopy() {
    return new ScanVertexRequest(this);
  }

  @Deprecated
  public ScanVertexRequest clone() {
    return new ScanVertexRequest(this);
  }

  public int  getSpace_id() {
    return this.space_id;
  }

  public ScanVertexRequest setSpace_id(int space_id) {
    this.space_id = space_id;
    setSpace_idIsSet(true);
    return this;
  }

  public void unsetSpace_id() {
    __isset_bit_vector.clear(__SPACE_ID_ISSET_ID);
  }

  // Returns true if field space_id is set (has been assigned a value) and false otherwise
  public boolean isSetSpace_id() {
    return __isset_bit_vector.get(__SPACE_ID_ISSET_ID);
  }

  public void setSpace_idIsSet(boolean value) {
    __isset_bit_vector.set(__SPACE_ID_ISSET_ID, value);
  }

  public int  getPart_id() {
    return this.part_id;
  }

  public ScanVertexRequest setPart_id(int part_id) {
    this.part_id = part_id;
    setPart_idIsSet(true);
    return this;
  }

  public void unsetPart_id() {
    __isset_bit_vector.clear(__PART_ID_ISSET_ID);
  }

  // Returns true if field part_id is set (has been assigned a value) and false otherwise
  public boolean isSetPart_id() {
    return __isset_bit_vector.get(__PART_ID_ISSET_ID);
  }

  public void setPart_idIsSet(boolean value) {
    __isset_bit_vector.set(__PART_ID_ISSET_ID, value);
  }

  public byte[]  getCursor() {
    return this.cursor;
  }

  public ScanVertexRequest setCursor(byte[] cursor) {
    this.cursor = cursor;
    return this;
  }

  public void unsetCursor() {
    this.cursor = null;
  }

  // Returns true if field cursor is set (has been assigned a value) and false otherwise
  public boolean isSetCursor() {
    return this.cursor != null;
  }

  public void setCursorIsSet(boolean value) {
    if (!value) {
      this.cursor = null;
    }
  }

  public long  getVertex_id() {
    return this.vertex_id;
  }

  public ScanVertexRequest setVertex_id(long vertex_id) {
    this.vertex_id = vertex_id;
    setVertex_idIsSet(true);
    return this;
  }

  public void unsetVertex_id() {
    __isset_bit_vector.clear(__VERTEX_ID_ISSET_ID);
  }

  // Returns true if field vertex_id is set (has been assigned a value) and false otherwise
  public boolean isSetVertex_id() {
    return __isset_bit_vector.get(__VERTEX_ID_ISSET_ID);
  }

  public void setVertex_idIsSet(boolean value) {
    __isset_bit_vector.set(__VERTEX_ID_ISSET_ID, value);
  }

  public int  getRow_limit() {
    return this.row_limit;
  }

  public ScanVertexRequest setRow_limit(int row_limit) {
    this.row_limit = row_limit;
    setRow_limitIsSet(true);
    return this;
  }

  public void unsetRow_limit() {
    __isset_bit_vector.clear(__ROW_LIMIT_ISSET_ID);
  }

  // Returns true if field row_limit is set (has been assigned a value) and false otherwise
  public boolean isSetRow_limit() {
    return __isset_bit_vector.get(__ROW_LIMIT_ISSET_ID);
  }

  public void setRow_limitIsSet(boolean value) {
    __isset_bit_vector.set(__ROW_LIMIT_ISSET_ID, value);
  }

  public long  getStart_time() {
    return this.start_time;
  }

  public ScanVertexRequest setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bit_vector.clear(__START_TIME_ISSET_ID);
  }

  // Returns true if field start_time is set (has been assigned a value) and false otherwise
  public boolean isSetStart_time() {
    return __isset_bit_vector.get(__START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bit_vector.set(__START_TIME_ISSET_ID, value);
  }

  public long  getEnd_time() {
    return this.end_time;
  }

  public ScanVertexRequest setEnd_time(long end_time) {
    this.end_time = end_time;
    setEnd_timeIsSet(true);
    return this;
  }

  public void unsetEnd_time() {
    __isset_bit_vector.clear(__END_TIME_ISSET_ID);
  }

  // Returns true if field end_time is set (has been assigned a value) and false otherwise
  public boolean isSetEnd_time() {
    return __isset_bit_vector.get(__END_TIME_ISSET_ID);
  }

  public void setEnd_timeIsSet(boolean value) {
    __isset_bit_vector.set(__END_TIME_ISSET_ID, value);
  }

  public int  getMax_versions() {
    return this.max_versions;
  }

  public ScanVertexRequest setMax_versions(int max_versions) {
    this.max_versions = max_versions;
    setMax_versionsIsSet(true);
    return this;
  }

  public void unsetMax_versions() {
    __isset_bit_vector.clear(__MAX_VERSIONS_ISSET_ID);
  }

  // Returns true if field max_versions is set (has been assigned a value) and false otherwise
  public boolean isSetMax_versions() {
    return __isset_bit_vector.get(__MAX_VERSIONS_ISSET_ID);
  }

  public void setMax_versionsIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_VERSIONS_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SPACE_ID:
      if (value == null) {
        unsetSpace_id();
      } else {
        setSpace_id((Integer)value);
      }
      break;

    case PART_ID:
      if (value == null) {
        unsetPart_id();
      } else {
        setPart_id((Integer)value);
      }
      break;

    case CURSOR:
      if (value == null) {
        unsetCursor();
      } else {
        setCursor((byte[])value);
      }
      break;

    case VERTEX_ID:
      if (value == null) {
        unsetVertex_id();
      } else {
        setVertex_id((Long)value);
      }
      break;

    case ROW_LIMIT:
      if (value == null) {
        unsetRow_limit();
      } else {
        setRow_limit((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEnd_time();
      } else {
        setEnd_time((Long)value);
      }
      break;

    case MAX_VERSIONS:
      if (value == null) {
        unsetMax_versions();
      } else {
        setMax_versions((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return new Integer(getSpace_id());

    case PART_ID:
      return new Integer(getPart_id());

    case CURSOR:
      return getCursor();

    case VERTEX_ID:
      return new Long(getVertex_id());

    case ROW_LIMIT:
      return new Integer(getRow_limit());

    case START_TIME:
      return new Long(getStart_time());

    case END_TIME:
      return new Long(getEnd_time());

    case MAX_VERSIONS:
      return new Integer(getMax_versions());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SPACE_ID:
      return isSetSpace_id();
    case PART_ID:
      return isSetPart_id();
    case CURSOR:
      return isSetCursor();
    case VERTEX_ID:
      return isSetVertex_id();
    case ROW_LIMIT:
      return isSetRow_limit();
    case START_TIME:
      return isSetStart_time();
    case END_TIME:
      return isSetEnd_time();
    case MAX_VERSIONS:
      return isSetMax_versions();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScanVertexRequest)
      return this.equals((ScanVertexRequest)that);
    return false;
  }

  public boolean equals(ScanVertexRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_space_id = true;
    boolean that_present_space_id = true;
    if (this_present_space_id || that_present_space_id) {
      if (!(this_present_space_id && that_present_space_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.space_id, that.space_id))
        return false;
    }

    boolean this_present_part_id = true;
    boolean that_present_part_id = true;
    if (this_present_part_id || that_present_part_id) {
      if (!(this_present_part_id && that_present_part_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.part_id, that.part_id))
        return false;
    }

    boolean this_present_cursor = true && this.isSetCursor();
    boolean that_present_cursor = true && that.isSetCursor();
    if (this_present_cursor || that_present_cursor) {
      if (!(this_present_cursor && that_present_cursor))
        return false;
      if (!TBaseHelper.equalsSlow(this.cursor, that.cursor))
        return false;
    }

    boolean this_present_vertex_id = true && this.isSetVertex_id();
    boolean that_present_vertex_id = true && that.isSetVertex_id();
    if (this_present_vertex_id || that_present_vertex_id) {
      if (!(this_present_vertex_id && that_present_vertex_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.vertex_id, that.vertex_id))
        return false;
    }

    boolean this_present_row_limit = true;
    boolean that_present_row_limit = true;
    if (this_present_row_limit || that_present_row_limit) {
      if (!(this_present_row_limit && that_present_row_limit))
        return false;
      if (!TBaseHelper.equalsNobinary(this.row_limit, that.row_limit))
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.start_time, that.start_time))
        return false;
    }

    boolean this_present_end_time = true;
    boolean that_present_end_time = true;
    if (this_present_end_time || that_present_end_time) {
      if (!(this_present_end_time && that_present_end_time))
        return false;
      if (!TBaseHelper.equalsNobinary(this.end_time, that.end_time))
        return false;
    }

    boolean this_present_max_versions = true;
    boolean that_present_max_versions = true;
    if (this_present_max_versions || that_present_max_versions) {
      if (!(this_present_max_versions && that_present_max_versions))
        return false;
      if (!TBaseHelper.equalsNobinary(this.max_versions, that.max_versions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_space_id = true;
    builder.append(present_space_id);
    if (present_space_id)
      builder.append(space_id);

    boolean present_part_id = true;
    builder.append(present_part_id);
    if (present_part_id)
      builder.append(part_id);

    boolean present_cursor = true && (isSetCursor());
    builder.append(present_cursor);
    if (present_cursor)
      builder.append(cursor);

    boolean present_vertex_id = true && (isSetVertex_id());
    builder.append(present_vertex_id);
    if (present_vertex_id)
      builder.append(vertex_id);

    boolean present_row_limit = true;
    builder.append(present_row_limit);
    if (present_row_limit)
      builder.append(row_limit);

    boolean present_start_time = true;
    builder.append(present_start_time);
    if (present_start_time)
      builder.append(start_time);

    boolean present_end_time = true;
    builder.append(present_end_time);
    if (present_end_time)
      builder.append(end_time);

    boolean present_max_versions = true;
    builder.append(present_max_versions);
    if (present_max_versions)
      builder.append(max_versions);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ScanVertexRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpace_id()).compareTo(other.isSetSpace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space_id, other.space_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPart_id()).compareTo(other.isSetPart_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(part_id, other.part_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCursor()).compareTo(other.isSetCursor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cursor, other.cursor);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetVertex_id()).compareTo(other.isSetVertex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(vertex_id, other.vertex_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRow_limit()).compareTo(other.isSetRow_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(row_limit, other.row_limit);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(start_time, other.start_time);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEnd_time()).compareTo(other.isSetEnd_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(end_time, other.end_time);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMax_versions()).compareTo(other.isSetMax_versions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(max_versions, other.max_versions);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            setSpace_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PART_ID:
          if (field.type == TType.I32) {
            this.part_id = iprot.readI32();
            setPart_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURSOR:
          if (field.type == TType.STRING) {
            this.cursor = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERTEX_ID:
          if (field.type == TType.I64) {
            this.vertex_id = iprot.readI64();
            setVertex_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROW_LIMIT:
          if (field.type == TType.I32) {
            this.row_limit = iprot.readI32();
            setRow_limitIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_TIME:
          if (field.type == TType.I64) {
            this.start_time = iprot.readI64();
            setStart_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END_TIME:
          if (field.type == TType.I64) {
            this.end_time = iprot.readI64();
            setEnd_timeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAX_VERSIONS:
          if (field.type == TType.I32) {
            this.max_versions = iprot.readI32();
            setMax_versionsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PART_ID_FIELD_DESC);
    oprot.writeI32(this.part_id);
    oprot.writeFieldEnd();
    if (this.cursor != null) {
      if (isSetCursor()) {
        oprot.writeFieldBegin(CURSOR_FIELD_DESC);
        oprot.writeBinary(this.cursor);
        oprot.writeFieldEnd();
      }
    }
    if (isSetVertex_id()) {
      oprot.writeFieldBegin(VERTEX_ID_FIELD_DESC);
      oprot.writeI64(this.vertex_id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ROW_LIMIT_FIELD_DESC);
    oprot.writeI32(this.row_limit);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(START_TIME_FIELD_DESC);
    oprot.writeI64(this.start_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_TIME_FIELD_DESC);
    oprot.writeI64(this.end_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MAX_VERSIONS_FIELD_DESC);
    oprot.writeI32(this.max_versions);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ScanVertexRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("space_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSpace_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("part_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getPart_id(), indent + 1, prettyPrint));
    first = false;
    if (isSetCursor())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("cursor");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getCursor() == null) {
        sb.append("null");
      } else {
          int __cursor_size = Math.min(this. getCursor().length, 128);
          for (int i = 0; i < __cursor_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this. getCursor()[i]).length() > 1 ? Integer.toHexString(this. getCursor()[i]).substring(Integer.toHexString(this. getCursor()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getCursor()[i]).toUpperCase());
          }
          if (this. getCursor().length > 128) sb.append(" ...");
      }
      first = false;
    }
    if (isSetVertex_id())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("vertex_id");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getVertex_id(), indent + 1, prettyPrint));
      first = false;
    }
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("row_limit");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getRow_limit(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("start_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getStart_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("end_time");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getEnd_time(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("max_versions");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMax_versions(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

