/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class StatProp implements TBase, java.io.Serializable, Cloneable, Comparable<StatProp> {
  private static final TStruct STRUCT_DESC = new TStruct("StatProp");
  private static final TField ALIAS_FIELD_DESC = new TField("alias", TType.STRING, (short)1);
  private static final TField PROP_FIELD_DESC = new TField("prop", TType.STRING, (short)2);
  private static final TField STAT_FIELD_DESC = new TField("stat", TType.I32, (short)3);

  public byte[] alias;
  public byte[] prop;
  /**
   * 
   * @see StatType
   */
  public int stat;
  public static final int ALIAS = 1;
  public static final int PROP = 2;
  public static final int STAT = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __STAT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ALIAS, new FieldMetaData("alias", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(PROP, new FieldMetaData("prop", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(STAT, new FieldMetaData("stat", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(StatProp.class, metaDataMap);
  }

  public StatProp() {
  }

  public StatProp(
    byte[] alias,
    byte[] prop,
    int stat)
  {
    this();
    this.alias = alias;
    this.prop = prop;
    this.stat = stat;
    setStatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatProp(StatProp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAlias()) {
      this.alias = TBaseHelper.deepCopy(other.alias);
    }
    if (other.isSetProp()) {
      this.prop = TBaseHelper.deepCopy(other.prop);
    }
    this.stat = TBaseHelper.deepCopy(other.stat);
  }

  public StatProp deepCopy() {
    return new StatProp(this);
  }

  @Deprecated
  public StatProp clone() {
    return new StatProp(this);
  }

  public byte[]  getAlias() {
    return this.alias;
  }

  public StatProp setAlias(byte[] alias) {
    this.alias = alias;
    return this;
  }

  public void unsetAlias() {
    this.alias = null;
  }

  // Returns true if field alias is set (has been assigned a value) and false otherwise
  public boolean isSetAlias() {
    return this.alias != null;
  }

  public void setAliasIsSet(boolean value) {
    if (!value) {
      this.alias = null;
    }
  }

  public byte[]  getProp() {
    return this.prop;
  }

  public StatProp setProp(byte[] prop) {
    this.prop = prop;
    return this;
  }

  public void unsetProp() {
    this.prop = null;
  }

  // Returns true if field prop is set (has been assigned a value) and false otherwise
  public boolean isSetProp() {
    return this.prop != null;
  }

  public void setPropIsSet(boolean value) {
    if (!value) {
      this.prop = null;
    }
  }

  /**
   * 
   * @see StatType
   */
  public int  getStat() {
    return this.stat;
  }

  /**
   * 
   * @see StatType
   */
  public StatProp setStat(int stat) {
    this.stat = stat;
    setStatIsSet(true);
    return this;
  }

  public void unsetStat() {
    __isset_bit_vector.clear(__STAT_ISSET_ID);
  }

  // Returns true if field stat is set (has been assigned a value) and false otherwise
  public boolean isSetStat() {
    return __isset_bit_vector.get(__STAT_ISSET_ID);
  }

  public void setStatIsSet(boolean value) {
    __isset_bit_vector.set(__STAT_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ALIAS:
      if (value == null) {
        unsetAlias();
      } else {
        setAlias((byte[])value);
      }
      break;

    case PROP:
      if (value == null) {
        unsetProp();
      } else {
        setProp((byte[])value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ALIAS:
      return getAlias();

    case PROP:
      return getProp();

    case STAT:
      return getStat();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ALIAS:
      return isSetAlias();
    case PROP:
      return isSetProp();
    case STAT:
      return isSetStat();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatProp)
      return this.equals((StatProp)that);
    return false;
  }

  public boolean equals(StatProp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_alias = true && this.isSetAlias();
    boolean that_present_alias = true && that.isSetAlias();
    if (this_present_alias || that_present_alias) {
      if (!(this_present_alias && that_present_alias))
        return false;
      if (!TBaseHelper.equalsSlow(this.alias, that.alias))
        return false;
    }

    boolean this_present_prop = true && this.isSetProp();
    boolean that_present_prop = true && that.isSetProp();
    if (this_present_prop || that_present_prop) {
      if (!(this_present_prop && that_present_prop))
        return false;
      if (!TBaseHelper.equalsSlow(this.prop, that.prop))
        return false;
    }

    boolean this_present_stat = true;
    boolean that_present_stat = true;
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stat, that.stat))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_alias = true && (isSetAlias());
    builder.append(present_alias);
    if (present_alias)
      builder.append(alias);

    boolean present_prop = true && (isSetProp());
    builder.append(present_prop);
    if (present_prop)
      builder.append(prop);

    boolean present_stat = true;
    builder.append(present_stat);
    if (present_stat)
      builder.append(stat);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(StatProp other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlias()).compareTo(other.isSetAlias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(alias, other.alias);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetProp()).compareTo(other.isSetProp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(prop, other.prop);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stat, other.stat);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ALIAS:
          if (field.type == TType.STRING) {
            this.alias = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROP:
          if (field.type == TType.STRING) {
            this.prop = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAT:
          if (field.type == TType.I32) {
            this.stat = iprot.readI32();
            setStatIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.alias != null) {
      oprot.writeFieldBegin(ALIAS_FIELD_DESC);
      oprot.writeBinary(this.alias);
      oprot.writeFieldEnd();
    }
    if (this.prop != null) {
      oprot.writeFieldBegin(PROP_FIELD_DESC);
      oprot.writeBinary(this.prop);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STAT_FIELD_DESC);
    oprot.writeI32(this.stat);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("StatProp");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("alias");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getAlias() == null) {
      sb.append("null");
    } else {
        int __alias_size = Math.min(this. getAlias().length, 128);
        for (int i = 0; i < __alias_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getAlias()[i]).length() > 1 ? Integer.toHexString(this. getAlias()[i]).substring(Integer.toHexString(this. getAlias()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getAlias()[i]).toUpperCase());
        }
        if (this. getAlias().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("prop");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getProp() == null) {
      sb.append("null");
    } else {
        int __prop_size = Math.min(this. getProp().length, 128);
        for (int i = 0; i < __prop_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getProp()[i]).length() > 1 ? Integer.toHexString(this. getProp()[i]).substring(Integer.toHexString(this. getProp()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getProp()[i]).toUpperCase());
        }
        if (this. getProp().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("stat");
    sb.append(space);
    sb.append(":").append(space);
    String stat_name = StatType.VALUES_TO_NAMES.get(this. getStat());
    if (stat_name != null) {
      sb.append(stat_name);
      sb.append(" (");
    }
    sb.append(this. getStat());
    if (stat_name != null) {
      sb.append(")");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStat() && !StatType.VALID_VALUES.contains(stat)){
      throw new TProtocolException("The field 'stat' has been assigned the invalid value " + stat);
    }
  }

}

