/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class IndexColumnHint implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("IndexColumnHint");
  private static final TField COLUMN_NAME_FIELD_DESC = new TField("column_name", TType.STRING, (short)1);
  private static final TField SCAN_TYPE_FIELD_DESC = new TField("scan_type", TType.I32, (short)2);
  private static final TField BEGIN_VALUE_FIELD_DESC = new TField("begin_value", TType.STRUCT, (short)3);
  private static final TField END_VALUE_FIELD_DESC = new TField("end_value", TType.STRUCT, (short)4);
  private static final TField INCLUDE_BEGIN_FIELD_DESC = new TField("include_begin", TType.BOOL, (short)5);
  private static final TField INCLUDE_END_FIELD_DESC = new TField("include_end", TType.BOOL, (short)6);

  public byte[] column_name;
  /**
   * 
   * @see ScanType
   */
  public ScanType scan_type;
  public com.vesoft.nebula.Value begin_value;
  public com.vesoft.nebula.Value end_value;
  public boolean include_begin;
  public boolean include_end;
  public static final int COLUMN_NAME = 1;
  public static final int SCAN_TYPE = 2;
  public static final int BEGIN_VALUE = 3;
  public static final int END_VALUE = 4;
  public static final int INCLUDE_BEGIN = 5;
  public static final int INCLUDE_END = 6;

  // isset id assignments
  private static final int __INCLUDE_BEGIN_ISSET_ID = 0;
  private static final int __INCLUDE_END_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(COLUMN_NAME, new FieldMetaData("column_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(SCAN_TYPE, new FieldMetaData("scan_type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(BEGIN_VALUE, new FieldMetaData("begin_value", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class)));
    tmpMetaDataMap.put(END_VALUE, new FieldMetaData("end_value", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class)));
    tmpMetaDataMap.put(INCLUDE_BEGIN, new FieldMetaData("include_begin", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(INCLUDE_END, new FieldMetaData("include_end", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(IndexColumnHint.class, metaDataMap);
  }

  public IndexColumnHint() {
    this.include_begin = true;

    this.include_end = false;

  }

  public IndexColumnHint(
      byte[] column_name,
      ScanType scan_type,
      com.vesoft.nebula.Value begin_value,
      com.vesoft.nebula.Value end_value,
      boolean include_begin,
      boolean include_end) {
    this();
    this.column_name = column_name;
    this.scan_type = scan_type;
    this.begin_value = begin_value;
    this.end_value = end_value;
    this.include_begin = include_begin;
    setInclude_beginIsSet(true);
    this.include_end = include_end;
    setInclude_endIsSet(true);
  }

  public static class Builder {
    private byte[] column_name;
    private ScanType scan_type;
    private com.vesoft.nebula.Value begin_value;
    private com.vesoft.nebula.Value end_value;
    private boolean include_begin;
    private boolean include_end;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setColumn_name(final byte[] column_name) {
      this.column_name = column_name;
      return this;
    }

    public Builder setScan_type(final ScanType scan_type) {
      this.scan_type = scan_type;
      return this;
    }

    public Builder setBegin_value(final com.vesoft.nebula.Value begin_value) {
      this.begin_value = begin_value;
      return this;
    }

    public Builder setEnd_value(final com.vesoft.nebula.Value end_value) {
      this.end_value = end_value;
      return this;
    }

    public Builder setInclude_begin(final boolean include_begin) {
      this.include_begin = include_begin;
      __optional_isset.set(__INCLUDE_BEGIN_ISSET_ID, true);
      return this;
    }

    public Builder setInclude_end(final boolean include_end) {
      this.include_end = include_end;
      __optional_isset.set(__INCLUDE_END_ISSET_ID, true);
      return this;
    }

    public IndexColumnHint build() {
      IndexColumnHint result = new IndexColumnHint();
      result.setColumn_name(this.column_name);
      result.setScan_type(this.scan_type);
      result.setBegin_value(this.begin_value);
      result.setEnd_value(this.end_value);
      if (__optional_isset.get(__INCLUDE_BEGIN_ISSET_ID)) {
        result.setInclude_begin(this.include_begin);
      }
      if (__optional_isset.get(__INCLUDE_END_ISSET_ID)) {
        result.setInclude_end(this.include_end);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexColumnHint(IndexColumnHint other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetColumn_name()) {
      this.column_name = TBaseHelper.deepCopy(other.column_name);
    }
    if (other.isSetScan_type()) {
      this.scan_type = TBaseHelper.deepCopy(other.scan_type);
    }
    if (other.isSetBegin_value()) {
      this.begin_value = TBaseHelper.deepCopy(other.begin_value);
    }
    if (other.isSetEnd_value()) {
      this.end_value = TBaseHelper.deepCopy(other.end_value);
    }
    this.include_begin = TBaseHelper.deepCopy(other.include_begin);
    this.include_end = TBaseHelper.deepCopy(other.include_end);
  }

  public IndexColumnHint deepCopy() {
    return new IndexColumnHint(this);
  }

  public byte[] getColumn_name() {
    return this.column_name;
  }

  public IndexColumnHint setColumn_name(byte[] column_name) {
    this.column_name = column_name;
    return this;
  }

  public void unsetColumn_name() {
    this.column_name = null;
  }

  // Returns true if field column_name is set (has been assigned a value) and false otherwise
  public boolean isSetColumn_name() {
    return this.column_name != null;
  }

  public void setColumn_nameIsSet(boolean __value) {
    if (!__value) {
      this.column_name = null;
    }
  }

  /**
   * 
   * @see ScanType
   */
  public ScanType getScan_type() {
    return this.scan_type;
  }

  /**
   * 
   * @see ScanType
   */
  public IndexColumnHint setScan_type(ScanType scan_type) {
    this.scan_type = scan_type;
    return this;
  }

  public void unsetScan_type() {
    this.scan_type = null;
  }

  // Returns true if field scan_type is set (has been assigned a value) and false otherwise
  public boolean isSetScan_type() {
    return this.scan_type != null;
  }

  public void setScan_typeIsSet(boolean __value) {
    if (!__value) {
      this.scan_type = null;
    }
  }

  public com.vesoft.nebula.Value getBegin_value() {
    return this.begin_value;
  }

  public IndexColumnHint setBegin_value(com.vesoft.nebula.Value begin_value) {
    this.begin_value = begin_value;
    return this;
  }

  public void unsetBegin_value() {
    this.begin_value = null;
  }

  // Returns true if field begin_value is set (has been assigned a value) and false otherwise
  public boolean isSetBegin_value() {
    return this.begin_value != null;
  }

  public void setBegin_valueIsSet(boolean __value) {
    if (!__value) {
      this.begin_value = null;
    }
  }

  public com.vesoft.nebula.Value getEnd_value() {
    return this.end_value;
  }

  public IndexColumnHint setEnd_value(com.vesoft.nebula.Value end_value) {
    this.end_value = end_value;
    return this;
  }

  public void unsetEnd_value() {
    this.end_value = null;
  }

  // Returns true if field end_value is set (has been assigned a value) and false otherwise
  public boolean isSetEnd_value() {
    return this.end_value != null;
  }

  public void setEnd_valueIsSet(boolean __value) {
    if (!__value) {
      this.end_value = null;
    }
  }

  public boolean isInclude_begin() {
    return this.include_begin;
  }

  public IndexColumnHint setInclude_begin(boolean include_begin) {
    this.include_begin = include_begin;
    setInclude_beginIsSet(true);
    return this;
  }

  public void unsetInclude_begin() {
    __isset_bit_vector.clear(__INCLUDE_BEGIN_ISSET_ID);
  }

  // Returns true if field include_begin is set (has been assigned a value) and false otherwise
  public boolean isSetInclude_begin() {
    return __isset_bit_vector.get(__INCLUDE_BEGIN_ISSET_ID);
  }

  public void setInclude_beginIsSet(boolean __value) {
    __isset_bit_vector.set(__INCLUDE_BEGIN_ISSET_ID, __value);
  }

  public boolean isInclude_end() {
    return this.include_end;
  }

  public IndexColumnHint setInclude_end(boolean include_end) {
    this.include_end = include_end;
    setInclude_endIsSet(true);
    return this;
  }

  public void unsetInclude_end() {
    __isset_bit_vector.clear(__INCLUDE_END_ISSET_ID);
  }

  // Returns true if field include_end is set (has been assigned a value) and false otherwise
  public boolean isSetInclude_end() {
    return __isset_bit_vector.get(__INCLUDE_END_ISSET_ID);
  }

  public void setInclude_endIsSet(boolean __value) {
    __isset_bit_vector.set(__INCLUDE_END_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case COLUMN_NAME:
      if (__value == null) {
        unsetColumn_name();
      } else {
        setColumn_name((byte[])__value);
      }
      break;

    case SCAN_TYPE:
      if (__value == null) {
        unsetScan_type();
      } else {
        setScan_type((ScanType)__value);
      }
      break;

    case BEGIN_VALUE:
      if (__value == null) {
        unsetBegin_value();
      } else {
        setBegin_value((com.vesoft.nebula.Value)__value);
      }
      break;

    case END_VALUE:
      if (__value == null) {
        unsetEnd_value();
      } else {
        setEnd_value((com.vesoft.nebula.Value)__value);
      }
      break;

    case INCLUDE_BEGIN:
      if (__value == null) {
        unsetInclude_begin();
      } else {
        setInclude_begin((Boolean)__value);
      }
      break;

    case INCLUDE_END:
      if (__value == null) {
        unsetInclude_end();
      } else {
        setInclude_end((Boolean)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COLUMN_NAME:
      return getColumn_name();

    case SCAN_TYPE:
      return getScan_type();

    case BEGIN_VALUE:
      return getBegin_value();

    case END_VALUE:
      return getEnd_value();

    case INCLUDE_BEGIN:
      return new Boolean(isInclude_begin());

    case INCLUDE_END:
      return new Boolean(isInclude_end());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof IndexColumnHint))
      return false;
    IndexColumnHint that = (IndexColumnHint)_that;

    if (!TBaseHelper.equalsSlow(this.isSetColumn_name(), that.isSetColumn_name(), this.column_name, that.column_name)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetScan_type(), that.isSetScan_type(), this.scan_type, that.scan_type)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetBegin_value(), that.isSetBegin_value(), this.begin_value, that.begin_value)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnd_value(), that.isSetEnd_value(), this.end_value, that.end_value)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.include_begin, that.include_begin)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.include_end, that.include_end)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {column_name, scan_type, begin_value, end_value, include_begin, include_end});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case COLUMN_NAME:
          if (__field.type == TType.STRING) {
            this.column_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SCAN_TYPE:
          if (__field.type == TType.I32) {
            this.scan_type = ScanType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BEGIN_VALUE:
          if (__field.type == TType.STRUCT) {
            this.begin_value = new com.vesoft.nebula.Value();
            this.begin_value.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case END_VALUE:
          if (__field.type == TType.STRUCT) {
            this.end_value = new com.vesoft.nebula.Value();
            this.end_value.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case INCLUDE_BEGIN:
          if (__field.type == TType.BOOL) {
            this.include_begin = iprot.readBool();
            setInclude_beginIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case INCLUDE_END:
          if (__field.type == TType.BOOL) {
            this.include_end = iprot.readBool();
            setInclude_endIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_name != null) {
      oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
      oprot.writeBinary(this.column_name);
      oprot.writeFieldEnd();
    }
    if (this.scan_type != null) {
      oprot.writeFieldBegin(SCAN_TYPE_FIELD_DESC);
      oprot.writeI32(this.scan_type == null ? 0 : this.scan_type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.begin_value != null) {
      oprot.writeFieldBegin(BEGIN_VALUE_FIELD_DESC);
      this.begin_value.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.end_value != null) {
      oprot.writeFieldBegin(END_VALUE_FIELD_DESC);
      this.end_value.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(INCLUDE_BEGIN_FIELD_DESC);
    oprot.writeBool(this.include_begin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INCLUDE_END_FIELD_DESC);
    oprot.writeBool(this.include_end);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("IndexColumnHint");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("column_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getColumn_name() == null) {
      sb.append("null");
    } else {
        int __column_name_size = Math.min(this.getColumn_name().length, 128);
        for (int i = 0; i < __column_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getColumn_name()[i]).length() > 1 ? Integer.toHexString(this.getColumn_name()[i]).substring(Integer.toHexString(this.getColumn_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getColumn_name()[i]).toUpperCase());
        }
        if (this.getColumn_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("scan_type");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getScan_type() == null) {
      sb.append("null");
    } else {
      String scan_type_name = this.getScan_type() == null ? "null" : this.getScan_type().name();
      if (scan_type_name != null) {
        sb.append(scan_type_name);
        sb.append(" (");
      }
      sb.append(this.getScan_type());
      if (scan_type_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("begin_value");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getBegin_value() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getBegin_value(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("end_value");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnd_value() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnd_value(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("include_begin");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isInclude_begin(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("include_end");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isInclude_end(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

