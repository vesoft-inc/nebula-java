/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class IndexColumnHint implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("IndexColumnHint");
  private static final TField COLUMN_NAME_FIELD_DESC = new TField("column_name", TType.STRING, (short)1);
  private static final TField SCAN_TYPE_FIELD_DESC = new TField("scan_type", TType.I32, (short)2);
  private static final TField BEGIN_VALUE_FIELD_DESC = new TField("begin_value", TType.STRUCT, (short)3);
  private static final TField END_VALUE_FIELD_DESC = new TField("end_value", TType.STRUCT, (short)4);

  public byte[] column_name;
  /**
   * 
   * @see ScanType
   */
  public int scan_type;
  public com.vesoft.nebula.Value begin_value;
  public com.vesoft.nebula.Value end_value;
  public static final int COLUMN_NAME = 1;
  public static final int SCAN_TYPE = 2;
  public static final int BEGIN_VALUE = 3;
  public static final int END_VALUE = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SCAN_TYPE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(COLUMN_NAME, new FieldMetaData("column_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(SCAN_TYPE, new FieldMetaData("scan_type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(BEGIN_VALUE, new FieldMetaData("begin_value", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class)));
    tmpMetaDataMap.put(END_VALUE, new FieldMetaData("end_value", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(IndexColumnHint.class, metaDataMap);
  }

  public IndexColumnHint() {
  }

  public IndexColumnHint(
    byte[] column_name,
    int scan_type,
    com.vesoft.nebula.Value begin_value,
    com.vesoft.nebula.Value end_value)
  {
    this();
    this.column_name = column_name;
    this.scan_type = scan_type;
    setScan_typeIsSet(true);
    this.begin_value = begin_value;
    this.end_value = end_value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexColumnHint(IndexColumnHint other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetColumn_name()) {
      this.column_name = TBaseHelper.deepCopy(other.column_name);
    }
    this.scan_type = TBaseHelper.deepCopy(other.scan_type);
    if (other.isSetBegin_value()) {
      this.begin_value = TBaseHelper.deepCopy(other.begin_value);
    }
    if (other.isSetEnd_value()) {
      this.end_value = TBaseHelper.deepCopy(other.end_value);
    }
  }

  public IndexColumnHint deepCopy() {
    return new IndexColumnHint(this);
  }

  @Deprecated
  public IndexColumnHint clone() {
    return new IndexColumnHint(this);
  }

  public byte[]  getColumn_name() {
    return this.column_name;
  }

  public IndexColumnHint setColumn_name(byte[] column_name) {
    this.column_name = column_name;
    return this;
  }

  public void unsetColumn_name() {
    this.column_name = null;
  }

  // Returns true if field column_name is set (has been assigned a value) and false otherwise
  public boolean isSetColumn_name() {
    return this.column_name != null;
  }

  public void setColumn_nameIsSet(boolean value) {
    if (!value) {
      this.column_name = null;
    }
  }

  /**
   * 
   * @see ScanType
   */
  public int  getScan_type() {
    return this.scan_type;
  }

  /**
   * 
   * @see ScanType
   */
  public IndexColumnHint setScan_type(int scan_type) {
    this.scan_type = scan_type;
    setScan_typeIsSet(true);
    return this;
  }

  public void unsetScan_type() {
    __isset_bit_vector.clear(__SCAN_TYPE_ISSET_ID);
  }

  // Returns true if field scan_type is set (has been assigned a value) and false otherwise
  public boolean isSetScan_type() {
    return __isset_bit_vector.get(__SCAN_TYPE_ISSET_ID);
  }

  public void setScan_typeIsSet(boolean value) {
    __isset_bit_vector.set(__SCAN_TYPE_ISSET_ID, value);
  }

  public com.vesoft.nebula.Value  getBegin_value() {
    return this.begin_value;
  }

  public IndexColumnHint setBegin_value(com.vesoft.nebula.Value begin_value) {
    this.begin_value = begin_value;
    return this;
  }

  public void unsetBegin_value() {
    this.begin_value = null;
  }

  // Returns true if field begin_value is set (has been assigned a value) and false otherwise
  public boolean isSetBegin_value() {
    return this.begin_value != null;
  }

  public void setBegin_valueIsSet(boolean value) {
    if (!value) {
      this.begin_value = null;
    }
  }

  public com.vesoft.nebula.Value  getEnd_value() {
    return this.end_value;
  }

  public IndexColumnHint setEnd_value(com.vesoft.nebula.Value end_value) {
    this.end_value = end_value;
    return this;
  }

  public void unsetEnd_value() {
    this.end_value = null;
  }

  // Returns true if field end_value is set (has been assigned a value) and false otherwise
  public boolean isSetEnd_value() {
    return this.end_value != null;
  }

  public void setEnd_valueIsSet(boolean value) {
    if (!value) {
      this.end_value = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumn_name();
      } else {
        setColumn_name((byte[])value);
      }
      break;

    case SCAN_TYPE:
      if (value == null) {
        unsetScan_type();
      } else {
        setScan_type((Integer)value);
      }
      break;

    case BEGIN_VALUE:
      if (value == null) {
        unsetBegin_value();
      } else {
        setBegin_value((com.vesoft.nebula.Value)value);
      }
      break;

    case END_VALUE:
      if (value == null) {
        unsetEnd_value();
      } else {
        setEnd_value((com.vesoft.nebula.Value)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COLUMN_NAME:
      return getColumn_name();

    case SCAN_TYPE:
      return getScan_type();

    case BEGIN_VALUE:
      return getBegin_value();

    case END_VALUE:
      return getEnd_value();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case COLUMN_NAME:
      return isSetColumn_name();
    case SCAN_TYPE:
      return isSetScan_type();
    case BEGIN_VALUE:
      return isSetBegin_value();
    case END_VALUE:
      return isSetEnd_value();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndexColumnHint)
      return this.equals((IndexColumnHint)that);
    return false;
  }

  public boolean equals(IndexColumnHint that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_column_name = true && this.isSetColumn_name();
    boolean that_present_column_name = true && that.isSetColumn_name();
    if (this_present_column_name || that_present_column_name) {
      if (!(this_present_column_name && that_present_column_name))
        return false;
      if (!TBaseHelper.equalsSlow(this.column_name, that.column_name))
        return false;
    }

    boolean this_present_scan_type = true;
    boolean that_present_scan_type = true;
    if (this_present_scan_type || that_present_scan_type) {
      if (!(this_present_scan_type && that_present_scan_type))
        return false;
      if (!TBaseHelper.equalsNobinary(this.scan_type, that.scan_type))
        return false;
    }

    boolean this_present_begin_value = true && this.isSetBegin_value();
    boolean that_present_begin_value = true && that.isSetBegin_value();
    if (this_present_begin_value || that_present_begin_value) {
      if (!(this_present_begin_value && that_present_begin_value))
        return false;
      if (!TBaseHelper.equalsNobinary(this.begin_value, that.begin_value))
        return false;
    }

    boolean this_present_end_value = true && this.isSetEnd_value();
    boolean that_present_end_value = true && that.isSetEnd_value();
    if (this_present_end_value || that_present_end_value) {
      if (!(this_present_end_value && that_present_end_value))
        return false;
      if (!TBaseHelper.equalsNobinary(this.end_value, that.end_value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_column_name = true && (isSetColumn_name());
    builder.append(present_column_name);
    if (present_column_name)
      builder.append(column_name);

    boolean present_scan_type = true;
    builder.append(present_scan_type);
    if (present_scan_type)
      builder.append(scan_type);

    boolean present_begin_value = true && (isSetBegin_value());
    builder.append(present_begin_value);
    if (present_begin_value)
      builder.append(begin_value);

    boolean present_end_value = true && (isSetEnd_value());
    builder.append(present_end_value);
    if (present_end_value)
      builder.append(end_value);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case COLUMN_NAME:
          if (field.type == TType.STRING) {
            this.column_name = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCAN_TYPE:
          if (field.type == TType.I32) {
            this.scan_type = iprot.readI32();
            setScan_typeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BEGIN_VALUE:
          if (field.type == TType.STRUCT) {
            this.begin_value = new com.vesoft.nebula.Value();
            this.begin_value.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END_VALUE:
          if (field.type == TType.STRUCT) {
            this.end_value = new com.vesoft.nebula.Value();
            this.end_value.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_name != null) {
      oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
      oprot.writeBinary(this.column_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SCAN_TYPE_FIELD_DESC);
    oprot.writeI32(this.scan_type);
    oprot.writeFieldEnd();
    if (this.begin_value != null) {
      oprot.writeFieldBegin(BEGIN_VALUE_FIELD_DESC);
      this.begin_value.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.end_value != null) {
      oprot.writeFieldBegin(END_VALUE_FIELD_DESC);
      this.end_value.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("IndexColumnHint");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("column_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getColumn_name() == null) {
      sb.append("null");
    } else {
        int __column_name_size = Math.min(this. getColumn_name().length, 128);
        for (int i = 0; i < __column_name_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getColumn_name()[i]).length() > 1 ? Integer.toHexString(this. getColumn_name()[i]).substring(Integer.toHexString(this. getColumn_name()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getColumn_name()[i]).toUpperCase());
        }
        if (this. getColumn_name().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("scan_type");
    sb.append(space);
    sb.append(":").append(space);
    String scan_type_name = ScanType.VALUES_TO_NAMES.get(this. getScan_type());
    if (scan_type_name != null) {
      sb.append(scan_type_name);
      sb.append(" (");
    }
    sb.append(this. getScan_type());
    if (scan_type_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("begin_value");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBegin_value() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBegin_value(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("end_value");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEnd_value() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEnd_value(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetScan_type() && !ScanType.VALID_VALUES.contains(scan_type)){
      throw new TProtocolException("The field 'scan_type' has been assigned the invalid value " + scan_type);
    }
  }

}

