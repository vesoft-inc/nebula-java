/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class OrderBy implements TBase, java.io.Serializable, Cloneable, Comparable<OrderBy> {
  private static final TStruct STRUCT_DESC = new TStruct("OrderBy");
  private static final TField PROP_FIELD_DESC = new TField("prop", TType.STRING, (short)1);
  private static final TField DIRECTION_FIELD_DESC = new TField("direction", TType.I32, (short)2);

  public byte[] prop;
  /**
   * 
   * @see OrderDirection
   */
  public int direction;
  public static final int PROP = 1;
  public static final int DIRECTION = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __DIRECTION_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PROP, new FieldMetaData("prop", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(DIRECTION, new FieldMetaData("direction", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(OrderBy.class, metaDataMap);
  }

  public OrderBy() {
  }

  public OrderBy(
    byte[] prop,
    int direction)
  {
    this();
    this.prop = prop;
    this.direction = direction;
    setDirectionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderBy(OrderBy other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetProp()) {
      this.prop = TBaseHelper.deepCopy(other.prop);
    }
    this.direction = TBaseHelper.deepCopy(other.direction);
  }

  public OrderBy deepCopy() {
    return new OrderBy(this);
  }

  @Deprecated
  public OrderBy clone() {
    return new OrderBy(this);
  }

  public byte[]  getProp() {
    return this.prop;
  }

  public OrderBy setProp(byte[] prop) {
    this.prop = prop;
    return this;
  }

  public void unsetProp() {
    this.prop = null;
  }

  // Returns true if field prop is set (has been assigned a value) and false otherwise
  public boolean isSetProp() {
    return this.prop != null;
  }

  public void setPropIsSet(boolean value) {
    if (!value) {
      this.prop = null;
    }
  }

  /**
   * 
   * @see OrderDirection
   */
  public int  getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see OrderDirection
   */
  public OrderBy setDirection(int direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bit_vector.clear(__DIRECTION_ISSET_ID);
  }

  // Returns true if field direction is set (has been assigned a value) and false otherwise
  public boolean isSetDirection() {
    return __isset_bit_vector.get(__DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bit_vector.set(__DIRECTION_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PROP:
      if (value == null) {
        unsetProp();
      } else {
        setProp((byte[])value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PROP:
      return getProp();

    case DIRECTION:
      return getDirection();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PROP:
      return isSetProp();
    case DIRECTION:
      return isSetDirection();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderBy)
      return this.equals((OrderBy)that);
    return false;
  }

  public boolean equals(OrderBy that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_prop = true && this.isSetProp();
    boolean that_present_prop = true && that.isSetProp();
    if (this_present_prop || that_present_prop) {
      if (!(this_present_prop && that_present_prop))
        return false;
      if (!TBaseHelper.equalsSlow(this.prop, that.prop))
        return false;
    }

    boolean this_present_direction = true;
    boolean that_present_direction = true;
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!TBaseHelper.equalsNobinary(this.direction, that.direction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_prop = true && (isSetProp());
    builder.append(present_prop);
    if (present_prop)
      builder.append(prop);

    boolean present_direction = true;
    builder.append(present_direction);
    if (present_direction)
      builder.append(direction);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(OrderBy other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProp()).compareTo(other.isSetProp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(prop, other.prop);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(direction, other.direction);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PROP:
          if (field.type == TType.STRING) {
            this.prop = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DIRECTION:
          if (field.type == TType.I32) {
            this.direction = iprot.readI32();
            setDirectionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.prop != null) {
      oprot.writeFieldBegin(PROP_FIELD_DESC);
      oprot.writeBinary(this.prop);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
    oprot.writeI32(this.direction);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("OrderBy");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("prop");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getProp() == null) {
      sb.append("null");
    } else {
        int __prop_size = Math.min(this. getProp().length, 128);
        for (int i = 0; i < __prop_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getProp()[i]).length() > 1 ? Integer.toHexString(this. getProp()[i]).substring(Integer.toHexString(this. getProp()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getProp()[i]).toUpperCase());
        }
        if (this. getProp().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("direction");
    sb.append(space);
    sb.append(":").append(space);
    String direction_name = OrderDirection.VALUES_TO_NAMES.get(this. getDirection());
    if (direction_name != null) {
      sb.append(direction_name);
      sb.append(" (");
    }
    sb.append(this. getDirection());
    if (direction_name != null) {
      sb.append(")");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetDirection() && !OrderDirection.VALID_VALUES.contains(direction)){
      throw new TProtocolException("The field 'direction' has been assigned the invalid value " + direction);
    }
  }

}

