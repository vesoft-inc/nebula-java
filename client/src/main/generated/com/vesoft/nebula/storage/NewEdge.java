/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class NewEdge implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("NewEdge");
  private static final TField KEY_FIELD_DESC = new TField("key", TType.STRUCT, (short)1);
  private static final TField PROPS_FIELD_DESC = new TField("props", TType.LIST, (short)2);

  public EdgeKey key;
  public List<com.vesoft.nebula.Value> props;
  public static final int KEY = 1;
  public static final int PROPS = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, EdgeKey.class)));
    tmpMetaDataMap.put(PROPS, new FieldMetaData("props", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.Value.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(NewEdge.class, metaDataMap);
  }

  public NewEdge() {
  }

  public NewEdge(
      EdgeKey key,
      List<com.vesoft.nebula.Value> props) {
    this();
    this.key = key;
    this.props = props;
  }

  public static class Builder {
    private EdgeKey key;
    private List<com.vesoft.nebula.Value> props;

    public Builder() {
    }

    public Builder setKey(final EdgeKey key) {
      this.key = key;
      return this;
    }

    public Builder setProps(final List<com.vesoft.nebula.Value> props) {
      this.props = props;
      return this;
    }

    public NewEdge build() {
      NewEdge result = new NewEdge();
      result.setKey(this.key);
      result.setProps(this.props);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NewEdge(NewEdge other) {
    if (other.isSetKey()) {
      this.key = TBaseHelper.deepCopy(other.key);
    }
    if (other.isSetProps()) {
      this.props = TBaseHelper.deepCopy(other.props);
    }
  }

  public NewEdge deepCopy() {
    return new NewEdge(this);
  }

  public EdgeKey getKey() {
    return this.key;
  }

  public NewEdge setKey(EdgeKey key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  // Returns true if field key is set (has been assigned a value) and false otherwise
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean __value) {
    if (!__value) {
      this.key = null;
    }
  }

  public List<com.vesoft.nebula.Value> getProps() {
    return this.props;
  }

  public NewEdge setProps(List<com.vesoft.nebula.Value> props) {
    this.props = props;
    return this;
  }

  public void unsetProps() {
    this.props = null;
  }

  // Returns true if field props is set (has been assigned a value) and false otherwise
  public boolean isSetProps() {
    return this.props != null;
  }

  public void setPropsIsSet(boolean __value) {
    if (!__value) {
      this.props = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case KEY:
      if (__value == null) {
        unsetKey();
      } else {
        setKey((EdgeKey)__value);
      }
      break;

    case PROPS:
      if (__value == null) {
        unsetProps();
      } else {
        setProps((List<com.vesoft.nebula.Value>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case KEY:
      return getKey();

    case PROPS:
      return getProps();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof NewEdge))
      return false;
    NewEdge that = (NewEdge)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetKey(), that.isSetKey(), this.key, that.key)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetProps(), that.isSetProps(), this.props, that.props)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {key, props});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case KEY:
          if (__field.type == TType.STRUCT) {
            this.key = new EdgeKey();
            this.key.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PROPS:
          if (__field.type == TType.LIST) {
            {
              TList _list100 = iprot.readListBegin();
              this.props = new ArrayList<com.vesoft.nebula.Value>(Math.max(0, _list100.size));
              for (int _i101 = 0; 
                   (_list100.size < 0) ? iprot.peekList() : (_i101 < _list100.size); 
                   ++_i101)
              {
                com.vesoft.nebula.Value _elem102;
                _elem102 = new com.vesoft.nebula.Value();
                _elem102.read(iprot);
                this.props.add(_elem102);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      this.key.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.props != null) {
      oprot.writeFieldBegin(PROPS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.props.size()));
        for (com.vesoft.nebula.Value _iter103 : this.props)        {
          _iter103.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("NewEdge");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("key");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getKey() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getKey(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("props");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getProps() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getProps(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

