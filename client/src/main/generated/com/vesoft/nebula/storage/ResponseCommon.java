/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ResponseCommon implements TBase, java.io.Serializable, Cloneable, Comparable<ResponseCommon> {
  private static final TStruct STRUCT_DESC = new TStruct("ResponseCommon");
  private static final TField FAILED_PARTS_FIELD_DESC = new TField("failed_parts", TType.LIST, (short)1);
  private static final TField LATENCY_IN_US_FIELD_DESC = new TField("latency_in_us", TType.I64, (short)2);
  private static final TField LATENCY_DETAIL_US_FIELD_DESC = new TField("latency_detail_us", TType.MAP, (short)3);

  public List<PartitionResult> failed_parts;
  public long latency_in_us;
  public Map<String,Integer> latency_detail_us;
  public static final int FAILED_PARTS = 1;
  public static final int LATENCY_IN_US = 2;
  public static final int LATENCY_DETAIL_US = 3;

  // isset id assignments
  private static final int __LATENCY_IN_US_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(FAILED_PARTS, new FieldMetaData("failed_parts", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, PartitionResult.class))));
    tmpMetaDataMap.put(LATENCY_IN_US, new FieldMetaData("latency_in_us", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LATENCY_DETAIL_US, new FieldMetaData("latency_detail_us", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ResponseCommon.class, metaDataMap);
  }

  public ResponseCommon() {
  }

  public ResponseCommon(
      List<PartitionResult> failed_parts,
      long latency_in_us) {
    this();
    this.failed_parts = failed_parts;
    this.latency_in_us = latency_in_us;
    setLatency_in_usIsSet(true);
  }

  public ResponseCommon(
      List<PartitionResult> failed_parts,
      long latency_in_us,
      Map<String,Integer> latency_detail_us) {
    this();
    this.failed_parts = failed_parts;
    this.latency_in_us = latency_in_us;
    setLatency_in_usIsSet(true);
    this.latency_detail_us = latency_detail_us;
  }

  public static class Builder {
    private List<PartitionResult> failed_parts;
    private long latency_in_us;
    private Map<String,Integer> latency_detail_us;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setFailed_parts(final List<PartitionResult> failed_parts) {
      this.failed_parts = failed_parts;
      return this;
    }

    public Builder setLatency_in_us(final long latency_in_us) {
      this.latency_in_us = latency_in_us;
      __optional_isset.set(__LATENCY_IN_US_ISSET_ID, true);
      return this;
    }

    public Builder setLatency_detail_us(final Map<String,Integer> latency_detail_us) {
      this.latency_detail_us = latency_detail_us;
      return this;
    }

    public ResponseCommon build() {
      ResponseCommon result = new ResponseCommon();
      result.setFailed_parts(this.failed_parts);
      if (__optional_isset.get(__LATENCY_IN_US_ISSET_ID)) {
        result.setLatency_in_us(this.latency_in_us);
      }
      result.setLatency_detail_us(this.latency_detail_us);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseCommon(ResponseCommon other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetFailed_parts()) {
      this.failed_parts = TBaseHelper.deepCopy(other.failed_parts);
    }
    this.latency_in_us = TBaseHelper.deepCopy(other.latency_in_us);
    if (other.isSetLatency_detail_us()) {
      this.latency_detail_us = TBaseHelper.deepCopy(other.latency_detail_us);
    }
  }

  public ResponseCommon deepCopy() {
    return new ResponseCommon(this);
  }

  public List<PartitionResult> getFailed_parts() {
    return this.failed_parts;
  }

  public ResponseCommon setFailed_parts(List<PartitionResult> failed_parts) {
    this.failed_parts = failed_parts;
    return this;
  }

  public void unsetFailed_parts() {
    this.failed_parts = null;
  }

  // Returns true if field failed_parts is set (has been assigned a value) and false otherwise
  public boolean isSetFailed_parts() {
    return this.failed_parts != null;
  }

  public void setFailed_partsIsSet(boolean __value) {
    if (!__value) {
      this.failed_parts = null;
    }
  }

  public long getLatency_in_us() {
    return this.latency_in_us;
  }

  public ResponseCommon setLatency_in_us(long latency_in_us) {
    this.latency_in_us = latency_in_us;
    setLatency_in_usIsSet(true);
    return this;
  }

  public void unsetLatency_in_us() {
    __isset_bit_vector.clear(__LATENCY_IN_US_ISSET_ID);
  }

  // Returns true if field latency_in_us is set (has been assigned a value) and false otherwise
  public boolean isSetLatency_in_us() {
    return __isset_bit_vector.get(__LATENCY_IN_US_ISSET_ID);
  }

  public void setLatency_in_usIsSet(boolean __value) {
    __isset_bit_vector.set(__LATENCY_IN_US_ISSET_ID, __value);
  }

  public Map<String,Integer> getLatency_detail_us() {
    return this.latency_detail_us;
  }

  public ResponseCommon setLatency_detail_us(Map<String,Integer> latency_detail_us) {
    this.latency_detail_us = latency_detail_us;
    return this;
  }

  public void unsetLatency_detail_us() {
    this.latency_detail_us = null;
  }

  // Returns true if field latency_detail_us is set (has been assigned a value) and false otherwise
  public boolean isSetLatency_detail_us() {
    return this.latency_detail_us != null;
  }

  public void setLatency_detail_usIsSet(boolean __value) {
    if (!__value) {
      this.latency_detail_us = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case FAILED_PARTS:
      if (__value == null) {
        unsetFailed_parts();
      } else {
        setFailed_parts((List<PartitionResult>)__value);
      }
      break;

    case LATENCY_IN_US:
      if (__value == null) {
        unsetLatency_in_us();
      } else {
        setLatency_in_us((Long)__value);
      }
      break;

    case LATENCY_DETAIL_US:
      if (__value == null) {
        unsetLatency_detail_us();
      } else {
        setLatency_detail_us((Map<String,Integer>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case FAILED_PARTS:
      return getFailed_parts();

    case LATENCY_IN_US:
      return new Long(getLatency_in_us());

    case LATENCY_DETAIL_US:
      return getLatency_detail_us();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof ResponseCommon))
      return false;
    ResponseCommon that = (ResponseCommon)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetFailed_parts(), that.isSetFailed_parts(), this.failed_parts, that.failed_parts)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.latency_in_us, that.latency_in_us)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetLatency_detail_us(), that.isSetLatency_detail_us(), this.latency_detail_us, that.latency_detail_us)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {failed_parts, latency_in_us, latency_detail_us});
  }

  @Override
  public int compareTo(ResponseCommon other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFailed_parts()).compareTo(other.isSetFailed_parts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(failed_parts, other.failed_parts);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLatency_in_us()).compareTo(other.isSetLatency_in_us());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(latency_in_us, other.latency_in_us);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLatency_detail_us()).compareTo(other.isSetLatency_detail_us());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(latency_detail_us, other.latency_detail_us);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case FAILED_PARTS:
          if (__field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.failed_parts = new ArrayList<PartitionResult>(Math.max(0, _list0.size));
              for (int _i1 = 0; 
                   (_list0.size < 0) ? iprot.peekList() : (_i1 < _list0.size); 
                   ++_i1)
              {
                PartitionResult _elem2;
                _elem2 = new PartitionResult();
                _elem2.read(iprot);
                this.failed_parts.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LATENCY_IN_US:
          if (__field.type == TType.I64) {
            this.latency_in_us = iprot.readI64();
            setLatency_in_usIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LATENCY_DETAIL_US:
          if (__field.type == TType.MAP) {
            {
              TMap _map3 = iprot.readMapBegin();
              this.latency_detail_us = new HashMap<String,Integer>(Math.max(0, 2*_map3.size));
              for (int _i4 = 0; 
                   (_map3.size < 0) ? iprot.peekMap() : (_i4 < _map3.size); 
                   ++_i4)
              {
                String _key5;
                int _val6;
                _key5 = iprot.readString();
                _val6 = iprot.readI32();
                this.latency_detail_us.put(_key5, _val6);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetLatency_in_us()) {
      throw new TProtocolException("Required field 'latency_in_us' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.failed_parts != null) {
      oprot.writeFieldBegin(FAILED_PARTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.failed_parts.size()));
        for (PartitionResult _iter7 : this.failed_parts)        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LATENCY_IN_US_FIELD_DESC);
    oprot.writeI64(this.latency_in_us);
    oprot.writeFieldEnd();
    if (this.latency_detail_us != null) {
      if (isSetLatency_detail_us()) {
        oprot.writeFieldBegin(LATENCY_DETAIL_US_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.latency_detail_us.size()));
          for (Map.Entry<String, Integer> _iter8 : this.latency_detail_us.entrySet())          {
            oprot.writeString(_iter8.getKey());
            oprot.writeI32(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ResponseCommon");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("failed_parts");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getFailed_parts() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getFailed_parts(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("latency_in_us");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getLatency_in_us(), indent + 1, prettyPrint));
    first = false;
    if (isSetLatency_detail_us())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("latency_detail_us");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getLatency_detail_us() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getLatency_detail_us(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (failed_parts == null) {
      throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'failed_parts' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'latency_in_us' because it's a primitive and you chose the non-beans generator.
  }

}

