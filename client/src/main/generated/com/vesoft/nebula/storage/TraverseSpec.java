/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class TraverseSpec implements TBase, java.io.Serializable, Cloneable, Comparable<TraverseSpec> {
  private static final TStruct STRUCT_DESC = new TStruct("TraverseSpec");
  private static final TField EDGE_TYPES_FIELD_DESC = new TField("edge_types", TType.LIST, (short)1);
  private static final TField EDGE_DIRECTION_FIELD_DESC = new TField("edge_direction", TType.I32, (short)2);
  private static final TField DEDUP_FIELD_DESC = new TField("dedup", TType.BOOL, (short)3);
  private static final TField STAT_PROPS_FIELD_DESC = new TField("stat_props", TType.LIST, (short)4);
  private static final TField VERTEX_PROPS_FIELD_DESC = new TField("vertex_props", TType.LIST, (short)5);
  private static final TField EDGE_PROPS_FIELD_DESC = new TField("edge_props", TType.LIST, (short)6);
  private static final TField EXPRESSIONS_FIELD_DESC = new TField("expressions", TType.LIST, (short)7);
  private static final TField ORDER_BY_FIELD_DESC = new TField("order_by", TType.LIST, (short)8);
  private static final TField RANDOM_FIELD_DESC = new TField("random", TType.BOOL, (short)9);
  private static final TField LIMIT_FIELD_DESC = new TField("limit", TType.I64, (short)10);
  private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRING, (short)11);

  public List<Integer> edge_types;
  /**
   * 
   * @see EdgeDirection
   */
  public int edge_direction;
  public boolean dedup;
  public List<StatProp> stat_props;
  public List<VertexProp> vertex_props;
  public List<EdgeProp> edge_props;
  public List<Expr> expressions;
  public List<OrderBy> order_by;
  public boolean random;
  public long limit;
  public byte[] filter;
  public static final int EDGE_TYPES = 1;
  public static final int EDGE_DIRECTION = 2;
  public static final int DEDUP = 3;
  public static final int STAT_PROPS = 4;
  public static final int VERTEX_PROPS = 5;
  public static final int EDGE_PROPS = 6;
  public static final int EXPRESSIONS = 7;
  public static final int ORDER_BY = 8;
  public static final int RANDOM = 9;
  public static final int LIMIT = 10;
  public static final int FILTER = 11;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __EDGE_DIRECTION_ISSET_ID = 0;
  private static final int __DEDUP_ISSET_ID = 1;
  private static final int __RANDOM_ISSET_ID = 2;
  private static final int __LIMIT_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(EDGE_TYPES, new FieldMetaData("edge_types", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(EDGE_DIRECTION, new FieldMetaData("edge_direction", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(DEDUP, new FieldMetaData("dedup", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(STAT_PROPS, new FieldMetaData("stat_props", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, StatProp.class))));
    tmpMetaDataMap.put(VERTEX_PROPS, new FieldMetaData("vertex_props", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, VertexProp.class))));
    tmpMetaDataMap.put(EDGE_PROPS, new FieldMetaData("edge_props", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, EdgeProp.class))));
    tmpMetaDataMap.put(EXPRESSIONS, new FieldMetaData("expressions", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Expr.class))));
    tmpMetaDataMap.put(ORDER_BY, new FieldMetaData("order_by", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, OrderBy.class))));
    tmpMetaDataMap.put(RANDOM, new FieldMetaData("random", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(LIMIT, new FieldMetaData("limit", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(FILTER, new FieldMetaData("filter", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(TraverseSpec.class, metaDataMap);
  }

  public TraverseSpec() {
    this.edge_direction = 1;

    this.dedup = false;

  }

  public TraverseSpec(
    List<Integer> edge_types,
    int edge_direction,
    boolean dedup)
  {
    this();
    this.edge_types = edge_types;
    this.edge_direction = edge_direction;
    setEdge_directionIsSet(true);
    this.dedup = dedup;
    setDedupIsSet(true);
  }

  public TraverseSpec(
    List<Integer> edge_types,
    int edge_direction,
    boolean dedup,
    List<StatProp> stat_props,
    List<VertexProp> vertex_props,
    List<EdgeProp> edge_props,
    List<Expr> expressions,
    List<OrderBy> order_by,
    boolean random,
    long limit,
    byte[] filter)
  {
    this();
    this.edge_types = edge_types;
    this.edge_direction = edge_direction;
    setEdge_directionIsSet(true);
    this.dedup = dedup;
    setDedupIsSet(true);
    this.stat_props = stat_props;
    this.vertex_props = vertex_props;
    this.edge_props = edge_props;
    this.expressions = expressions;
    this.order_by = order_by;
    this.random = random;
    setRandomIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
    this.filter = filter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TraverseSpec(TraverseSpec other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetEdge_types()) {
      this.edge_types = TBaseHelper.deepCopy(other.edge_types);
    }
    this.edge_direction = TBaseHelper.deepCopy(other.edge_direction);
    this.dedup = TBaseHelper.deepCopy(other.dedup);
    if (other.isSetStat_props()) {
      this.stat_props = TBaseHelper.deepCopy(other.stat_props);
    }
    if (other.isSetVertex_props()) {
      this.vertex_props = TBaseHelper.deepCopy(other.vertex_props);
    }
    if (other.isSetEdge_props()) {
      this.edge_props = TBaseHelper.deepCopy(other.edge_props);
    }
    if (other.isSetExpressions()) {
      this.expressions = TBaseHelper.deepCopy(other.expressions);
    }
    if (other.isSetOrder_by()) {
      this.order_by = TBaseHelper.deepCopy(other.order_by);
    }
    this.random = TBaseHelper.deepCopy(other.random);
    this.limit = TBaseHelper.deepCopy(other.limit);
    if (other.isSetFilter()) {
      this.filter = TBaseHelper.deepCopy(other.filter);
    }
  }

  public TraverseSpec deepCopy() {
    return new TraverseSpec(this);
  }

  @Deprecated
  public TraverseSpec clone() {
    return new TraverseSpec(this);
  }

  public List<Integer>  getEdge_types() {
    return this.edge_types;
  }

  public TraverseSpec setEdge_types(List<Integer> edge_types) {
    this.edge_types = edge_types;
    return this;
  }

  public void unsetEdge_types() {
    this.edge_types = null;
  }

  // Returns true if field edge_types is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_types() {
    return this.edge_types != null;
  }

  public void setEdge_typesIsSet(boolean value) {
    if (!value) {
      this.edge_types = null;
    }
  }

  /**
   * 
   * @see EdgeDirection
   */
  public int  getEdge_direction() {
    return this.edge_direction;
  }

  /**
   * 
   * @see EdgeDirection
   */
  public TraverseSpec setEdge_direction(int edge_direction) {
    this.edge_direction = edge_direction;
    setEdge_directionIsSet(true);
    return this;
  }

  public void unsetEdge_direction() {
    __isset_bit_vector.clear(__EDGE_DIRECTION_ISSET_ID);
  }

  // Returns true if field edge_direction is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_direction() {
    return __isset_bit_vector.get(__EDGE_DIRECTION_ISSET_ID);
  }

  public void setEdge_directionIsSet(boolean value) {
    __isset_bit_vector.set(__EDGE_DIRECTION_ISSET_ID, value);
  }

  public boolean  isDedup() {
    return this.dedup;
  }

  public TraverseSpec setDedup(boolean dedup) {
    this.dedup = dedup;
    setDedupIsSet(true);
    return this;
  }

  public void unsetDedup() {
    __isset_bit_vector.clear(__DEDUP_ISSET_ID);
  }

  // Returns true if field dedup is set (has been assigned a value) and false otherwise
  public boolean isSetDedup() {
    return __isset_bit_vector.get(__DEDUP_ISSET_ID);
  }

  public void setDedupIsSet(boolean value) {
    __isset_bit_vector.set(__DEDUP_ISSET_ID, value);
  }

  public List<StatProp>  getStat_props() {
    return this.stat_props;
  }

  public TraverseSpec setStat_props(List<StatProp> stat_props) {
    this.stat_props = stat_props;
    return this;
  }

  public void unsetStat_props() {
    this.stat_props = null;
  }

  // Returns true if field stat_props is set (has been assigned a value) and false otherwise
  public boolean isSetStat_props() {
    return this.stat_props != null;
  }

  public void setStat_propsIsSet(boolean value) {
    if (!value) {
      this.stat_props = null;
    }
  }

  public List<VertexProp>  getVertex_props() {
    return this.vertex_props;
  }

  public TraverseSpec setVertex_props(List<VertexProp> vertex_props) {
    this.vertex_props = vertex_props;
    return this;
  }

  public void unsetVertex_props() {
    this.vertex_props = null;
  }

  // Returns true if field vertex_props is set (has been assigned a value) and false otherwise
  public boolean isSetVertex_props() {
    return this.vertex_props != null;
  }

  public void setVertex_propsIsSet(boolean value) {
    if (!value) {
      this.vertex_props = null;
    }
  }

  public List<EdgeProp>  getEdge_props() {
    return this.edge_props;
  }

  public TraverseSpec setEdge_props(List<EdgeProp> edge_props) {
    this.edge_props = edge_props;
    return this;
  }

  public void unsetEdge_props() {
    this.edge_props = null;
  }

  // Returns true if field edge_props is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_props() {
    return this.edge_props != null;
  }

  public void setEdge_propsIsSet(boolean value) {
    if (!value) {
      this.edge_props = null;
    }
  }

  public List<Expr>  getExpressions() {
    return this.expressions;
  }

  public TraverseSpec setExpressions(List<Expr> expressions) {
    this.expressions = expressions;
    return this;
  }

  public void unsetExpressions() {
    this.expressions = null;
  }

  // Returns true if field expressions is set (has been assigned a value) and false otherwise
  public boolean isSetExpressions() {
    return this.expressions != null;
  }

  public void setExpressionsIsSet(boolean value) {
    if (!value) {
      this.expressions = null;
    }
  }

  public List<OrderBy>  getOrder_by() {
    return this.order_by;
  }

  public TraverseSpec setOrder_by(List<OrderBy> order_by) {
    this.order_by = order_by;
    return this;
  }

  public void unsetOrder_by() {
    this.order_by = null;
  }

  // Returns true if field order_by is set (has been assigned a value) and false otherwise
  public boolean isSetOrder_by() {
    return this.order_by != null;
  }

  public void setOrder_byIsSet(boolean value) {
    if (!value) {
      this.order_by = null;
    }
  }

  public boolean  isRandom() {
    return this.random;
  }

  public TraverseSpec setRandom(boolean random) {
    this.random = random;
    setRandomIsSet(true);
    return this;
  }

  public void unsetRandom() {
    __isset_bit_vector.clear(__RANDOM_ISSET_ID);
  }

  // Returns true if field random is set (has been assigned a value) and false otherwise
  public boolean isSetRandom() {
    return __isset_bit_vector.get(__RANDOM_ISSET_ID);
  }

  public void setRandomIsSet(boolean value) {
    __isset_bit_vector.set(__RANDOM_ISSET_ID, value);
  }

  public long  getLimit() {
    return this.limit;
  }

  public TraverseSpec setLimit(long limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bit_vector.clear(__LIMIT_ISSET_ID);
  }

  // Returns true if field limit is set (has been assigned a value) and false otherwise
  public boolean isSetLimit() {
    return __isset_bit_vector.get(__LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bit_vector.set(__LIMIT_ISSET_ID, value);
  }

  public byte[]  getFilter() {
    return this.filter;
  }

  public TraverseSpec setFilter(byte[] filter) {
    this.filter = filter;
    return this;
  }

  public void unsetFilter() {
    this.filter = null;
  }

  // Returns true if field filter is set (has been assigned a value) and false otherwise
  public boolean isSetFilter() {
    return this.filter != null;
  }

  public void setFilterIsSet(boolean value) {
    if (!value) {
      this.filter = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case EDGE_TYPES:
      if (value == null) {
        unsetEdge_types();
      } else {
        setEdge_types((List<Integer>)value);
      }
      break;

    case EDGE_DIRECTION:
      if (value == null) {
        unsetEdge_direction();
      } else {
        setEdge_direction((Integer)value);
      }
      break;

    case DEDUP:
      if (value == null) {
        unsetDedup();
      } else {
        setDedup((Boolean)value);
      }
      break;

    case STAT_PROPS:
      if (value == null) {
        unsetStat_props();
      } else {
        setStat_props((List<StatProp>)value);
      }
      break;

    case VERTEX_PROPS:
      if (value == null) {
        unsetVertex_props();
      } else {
        setVertex_props((List<VertexProp>)value);
      }
      break;

    case EDGE_PROPS:
      if (value == null) {
        unsetEdge_props();
      } else {
        setEdge_props((List<EdgeProp>)value);
      }
      break;

    case EXPRESSIONS:
      if (value == null) {
        unsetExpressions();
      } else {
        setExpressions((List<Expr>)value);
      }
      break;

    case ORDER_BY:
      if (value == null) {
        unsetOrder_by();
      } else {
        setOrder_by((List<OrderBy>)value);
      }
      break;

    case RANDOM:
      if (value == null) {
        unsetRandom();
      } else {
        setRandom((Boolean)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Long)value);
      }
      break;

    case FILTER:
      if (value == null) {
        unsetFilter();
      } else {
        setFilter((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case EDGE_TYPES:
      return getEdge_types();

    case EDGE_DIRECTION:
      return getEdge_direction();

    case DEDUP:
      return new Boolean(isDedup());

    case STAT_PROPS:
      return getStat_props();

    case VERTEX_PROPS:
      return getVertex_props();

    case EDGE_PROPS:
      return getEdge_props();

    case EXPRESSIONS:
      return getExpressions();

    case ORDER_BY:
      return getOrder_by();

    case RANDOM:
      return new Boolean(isRandom());

    case LIMIT:
      return new Long(getLimit());

    case FILTER:
      return getFilter();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case EDGE_TYPES:
      return isSetEdge_types();
    case EDGE_DIRECTION:
      return isSetEdge_direction();
    case DEDUP:
      return isSetDedup();
    case STAT_PROPS:
      return isSetStat_props();
    case VERTEX_PROPS:
      return isSetVertex_props();
    case EDGE_PROPS:
      return isSetEdge_props();
    case EXPRESSIONS:
      return isSetExpressions();
    case ORDER_BY:
      return isSetOrder_by();
    case RANDOM:
      return isSetRandom();
    case LIMIT:
      return isSetLimit();
    case FILTER:
      return isSetFilter();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TraverseSpec)
      return this.equals((TraverseSpec)that);
    return false;
  }

  public boolean equals(TraverseSpec that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_edge_types = true && this.isSetEdge_types();
    boolean that_present_edge_types = true && that.isSetEdge_types();
    if (this_present_edge_types || that_present_edge_types) {
      if (!(this_present_edge_types && that_present_edge_types))
        return false;
      if (!TBaseHelper.equalsNobinary(this.edge_types, that.edge_types))
        return false;
    }

    boolean this_present_edge_direction = true;
    boolean that_present_edge_direction = true;
    if (this_present_edge_direction || that_present_edge_direction) {
      if (!(this_present_edge_direction && that_present_edge_direction))
        return false;
      if (!TBaseHelper.equalsNobinary(this.edge_direction, that.edge_direction))
        return false;
    }

    boolean this_present_dedup = true;
    boolean that_present_dedup = true;
    if (this_present_dedup || that_present_dedup) {
      if (!(this_present_dedup && that_present_dedup))
        return false;
      if (!TBaseHelper.equalsNobinary(this.dedup, that.dedup))
        return false;
    }

    boolean this_present_stat_props = true && this.isSetStat_props();
    boolean that_present_stat_props = true && that.isSetStat_props();
    if (this_present_stat_props || that_present_stat_props) {
      if (!(this_present_stat_props && that_present_stat_props))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stat_props, that.stat_props))
        return false;
    }

    boolean this_present_vertex_props = true && this.isSetVertex_props();
    boolean that_present_vertex_props = true && that.isSetVertex_props();
    if (this_present_vertex_props || that_present_vertex_props) {
      if (!(this_present_vertex_props && that_present_vertex_props))
        return false;
      if (!TBaseHelper.equalsNobinary(this.vertex_props, that.vertex_props))
        return false;
    }

    boolean this_present_edge_props = true && this.isSetEdge_props();
    boolean that_present_edge_props = true && that.isSetEdge_props();
    if (this_present_edge_props || that_present_edge_props) {
      if (!(this_present_edge_props && that_present_edge_props))
        return false;
      if (!TBaseHelper.equalsNobinary(this.edge_props, that.edge_props))
        return false;
    }

    boolean this_present_expressions = true && this.isSetExpressions();
    boolean that_present_expressions = true && that.isSetExpressions();
    if (this_present_expressions || that_present_expressions) {
      if (!(this_present_expressions && that_present_expressions))
        return false;
      if (!TBaseHelper.equalsNobinary(this.expressions, that.expressions))
        return false;
    }

    boolean this_present_order_by = true && this.isSetOrder_by();
    boolean that_present_order_by = true && that.isSetOrder_by();
    if (this_present_order_by || that_present_order_by) {
      if (!(this_present_order_by && that_present_order_by))
        return false;
      if (!TBaseHelper.equalsNobinary(this.order_by, that.order_by))
        return false;
    }

    boolean this_present_random = true && this.isSetRandom();
    boolean that_present_random = true && that.isSetRandom();
    if (this_present_random || that_present_random) {
      if (!(this_present_random && that_present_random))
        return false;
      if (!TBaseHelper.equalsNobinary(this.random, that.random))
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (!TBaseHelper.equalsNobinary(this.limit, that.limit))
        return false;
    }

    boolean this_present_filter = true && this.isSetFilter();
    boolean that_present_filter = true && that.isSetFilter();
    if (this_present_filter || that_present_filter) {
      if (!(this_present_filter && that_present_filter))
        return false;
      if (!TBaseHelper.equalsSlow(this.filter, that.filter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_edge_types = true && (isSetEdge_types());
    builder.append(present_edge_types);
    if (present_edge_types)
      builder.append(edge_types);

    boolean present_edge_direction = true;
    builder.append(present_edge_direction);
    if (present_edge_direction)
      builder.append(edge_direction);

    boolean present_dedup = true;
    builder.append(present_dedup);
    if (present_dedup)
      builder.append(dedup);

    boolean present_stat_props = true && (isSetStat_props());
    builder.append(present_stat_props);
    if (present_stat_props)
      builder.append(stat_props);

    boolean present_vertex_props = true && (isSetVertex_props());
    builder.append(present_vertex_props);
    if (present_vertex_props)
      builder.append(vertex_props);

    boolean present_edge_props = true && (isSetEdge_props());
    builder.append(present_edge_props);
    if (present_edge_props)
      builder.append(edge_props);

    boolean present_expressions = true && (isSetExpressions());
    builder.append(present_expressions);
    if (present_expressions)
      builder.append(expressions);

    boolean present_order_by = true && (isSetOrder_by());
    builder.append(present_order_by);
    if (present_order_by)
      builder.append(order_by);

    boolean present_random = true && (isSetRandom());
    builder.append(present_random);
    if (present_random)
      builder.append(random);

    boolean present_limit = true && (isSetLimit());
    builder.append(present_limit);
    if (present_limit)
      builder.append(limit);

    boolean present_filter = true && (isSetFilter());
    builder.append(present_filter);
    if (present_filter)
      builder.append(filter);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TraverseSpec other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEdge_types()).compareTo(other.isSetEdge_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edge_types, other.edge_types);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEdge_direction()).compareTo(other.isSetEdge_direction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edge_direction, other.edge_direction);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDedup()).compareTo(other.isSetDedup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(dedup, other.dedup);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStat_props()).compareTo(other.isSetStat_props());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stat_props, other.stat_props);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetVertex_props()).compareTo(other.isSetVertex_props());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(vertex_props, other.vertex_props);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEdge_props()).compareTo(other.isSetEdge_props());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edge_props, other.edge_props);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetExpressions()).compareTo(other.isSetExpressions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(expressions, other.expressions);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOrder_by()).compareTo(other.isSetOrder_by());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(order_by, other.order_by);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRandom()).compareTo(other.isSetRandom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(random, other.random);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(limit, other.limit);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(filter, other.filter);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case EDGE_TYPES:
          if (field.type == TType.LIST) {
            {
              TList _list12 = iprot.readListBegin();
              this.edge_types = new ArrayList<Integer>(Math.max(0, _list12.size));
              for (int _i13 = 0; 
                   (_list12.size < 0) ? iprot.peekList() : (_i13 < _list12.size); 
                   ++_i13)
              {
                int _elem14;
                _elem14 = iprot.readI32();
                this.edge_types.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGE_DIRECTION:
          if (field.type == TType.I32) {
            this.edge_direction = iprot.readI32();
            setEdge_directionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEDUP:
          if (field.type == TType.BOOL) {
            this.dedup = iprot.readBool();
            setDedupIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAT_PROPS:
          if (field.type == TType.LIST) {
            {
              TList _list15 = iprot.readListBegin();
              this.stat_props = new ArrayList<StatProp>(Math.max(0, _list15.size));
              for (int _i16 = 0; 
                   (_list15.size < 0) ? iprot.peekList() : (_i16 < _list15.size); 
                   ++_i16)
              {
                StatProp _elem17;
                _elem17 = new StatProp();
                _elem17.read(iprot);
                this.stat_props.add(_elem17);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERTEX_PROPS:
          if (field.type == TType.LIST) {
            {
              TList _list18 = iprot.readListBegin();
              this.vertex_props = new ArrayList<VertexProp>(Math.max(0, _list18.size));
              for (int _i19 = 0; 
                   (_list18.size < 0) ? iprot.peekList() : (_i19 < _list18.size); 
                   ++_i19)
              {
                VertexProp _elem20;
                _elem20 = new VertexProp();
                _elem20.read(iprot);
                this.vertex_props.add(_elem20);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGE_PROPS:
          if (field.type == TType.LIST) {
            {
              TList _list21 = iprot.readListBegin();
              this.edge_props = new ArrayList<EdgeProp>(Math.max(0, _list21.size));
              for (int _i22 = 0; 
                   (_list21.size < 0) ? iprot.peekList() : (_i22 < _list21.size); 
                   ++_i22)
              {
                EdgeProp _elem23;
                _elem23 = new EdgeProp();
                _elem23.read(iprot);
                this.edge_props.add(_elem23);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXPRESSIONS:
          if (field.type == TType.LIST) {
            {
              TList _list24 = iprot.readListBegin();
              this.expressions = new ArrayList<Expr>(Math.max(0, _list24.size));
              for (int _i25 = 0; 
                   (_list24.size < 0) ? iprot.peekList() : (_i25 < _list24.size); 
                   ++_i25)
              {
                Expr _elem26;
                _elem26 = new Expr();
                _elem26.read(iprot);
                this.expressions.add(_elem26);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDER_BY:
          if (field.type == TType.LIST) {
            {
              TList _list27 = iprot.readListBegin();
              this.order_by = new ArrayList<OrderBy>(Math.max(0, _list27.size));
              for (int _i28 = 0; 
                   (_list27.size < 0) ? iprot.peekList() : (_i28 < _list27.size); 
                   ++_i28)
              {
                OrderBy _elem29;
                _elem29 = new OrderBy();
                _elem29.read(iprot);
                this.order_by.add(_elem29);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RANDOM:
          if (field.type == TType.BOOL) {
            this.random = iprot.readBool();
            setRandomIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMIT:
          if (field.type == TType.I64) {
            this.limit = iprot.readI64();
            setLimitIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FILTER:
          if (field.type == TType.STRING) {
            this.filter = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.edge_types != null) {
      oprot.writeFieldBegin(EDGE_TYPES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.edge_types.size()));
        for (int _iter30 : this.edge_types)        {
          oprot.writeI32(_iter30);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EDGE_DIRECTION_FIELD_DESC);
    oprot.writeI32(this.edge_direction);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DEDUP_FIELD_DESC);
    oprot.writeBool(this.dedup);
    oprot.writeFieldEnd();
    if (this.stat_props != null) {
      if (isSetStat_props()) {
        oprot.writeFieldBegin(STAT_PROPS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.stat_props.size()));
          for (StatProp _iter31 : this.stat_props)          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.vertex_props != null) {
      if (isSetVertex_props()) {
        oprot.writeFieldBegin(VERTEX_PROPS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.vertex_props.size()));
          for (VertexProp _iter32 : this.vertex_props)          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.edge_props != null) {
      if (isSetEdge_props()) {
        oprot.writeFieldBegin(EDGE_PROPS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.edge_props.size()));
          for (EdgeProp _iter33 : this.edge_props)          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.expressions != null) {
      if (isSetExpressions()) {
        oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.expressions.size()));
          for (Expr _iter34 : this.expressions)          {
            _iter34.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.order_by != null) {
      if (isSetOrder_by()) {
        oprot.writeFieldBegin(ORDER_BY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.order_by.size()));
          for (OrderBy _iter35 : this.order_by)          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetRandom()) {
      oprot.writeFieldBegin(RANDOM_FIELD_DESC);
      oprot.writeBool(this.random);
      oprot.writeFieldEnd();
    }
    if (isSetLimit()) {
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI64(this.limit);
      oprot.writeFieldEnd();
    }
    if (this.filter != null) {
      if (isSetFilter()) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        oprot.writeBinary(this.filter);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("TraverseSpec");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("edge_types");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEdge_types() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEdge_types(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("edge_direction");
    sb.append(space);
    sb.append(":").append(space);
    String edge_direction_name = EdgeDirection.VALUES_TO_NAMES.get(this. getEdge_direction());
    if (edge_direction_name != null) {
      sb.append(edge_direction_name);
      sb.append(" (");
    }
    sb.append(this. getEdge_direction());
    if (edge_direction_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("dedup");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isDedup(), indent + 1, prettyPrint));
    first = false;
    if (isSetStat_props())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stat_props");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStat_props() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getStat_props(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetVertex_props())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("vertex_props");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getVertex_props() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getVertex_props(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetEdge_props())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("edge_props");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEdge_props() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEdge_props(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetExpressions())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("expressions");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getExpressions() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getExpressions(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetOrder_by())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("order_by");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getOrder_by() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getOrder_by(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetRandom())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("random");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. isRandom(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetLimit())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("limit");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getLimit(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetFilter())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("filter");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getFilter() == null) {
        sb.append("null");
      } else {
          int __filter_size = Math.min(this. getFilter().length, 128);
          for (int i = 0; i < __filter_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this. getFilter()[i]).length() > 1 ? Integer.toHexString(this. getFilter()[i]).substring(Integer.toHexString(this. getFilter()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getFilter()[i]).toUpperCase());
          }
          if (this. getFilter().length > 128) sb.append(" ...");
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetEdge_direction() && !EdgeDirection.VALID_VALUES.contains(edge_direction)){
      throw new TProtocolException("The field 'edge_direction' has been assigned the invalid value " + edge_direction);
    }
  }

}

