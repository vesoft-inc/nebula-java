/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class PropDef implements TBase, java.io.Serializable, Cloneable, Comparable<PropDef> {
  private static final TStruct STRUCT_DESC = new TStruct("PropDef");
  private static final TField OWNER_FIELD_DESC = new TField("owner", TType.I32, (short)1);
  private static final TField ID_FIELD_DESC = new TField("id", TType.STRUCT, (short)2);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);
  private static final TField STAT_FIELD_DESC = new TField("stat", TType.I32, (short)4);

  /**
   * 
   * @see PropOwner
   */
  public int owner;
  public EntryId id;
  public String name;
  public int stat;
  public static final int OWNER = 1;
  public static final int ID = 2;
  public static final int NAME = 3;
  public static final int STAT = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __OWNER_ISSET_ID = 0;
  private static final int __STAT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(OWNER, new FieldMetaData("owner", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, EntryId.class)));
    tmpMetaDataMap.put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(STAT, new FieldMetaData("stat", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(PropDef.class, metaDataMap);
  }

  public PropDef() {
  }

  public PropDef(
    int owner,
    EntryId id,
    String name,
    int stat)
  {
    this();
    this.owner = owner;
    setOwnerIsSet(true);
    this.id = id;
    this.name = name;
    this.stat = stat;
    setStatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PropDef(PropDef other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.owner = TBaseHelper.deepCopy(other.owner);
    if (other.isSetId()) {
      this.id = TBaseHelper.deepCopy(other.id);
    }
    if (other.isSetName()) {
      this.name = TBaseHelper.deepCopy(other.name);
    }
    this.stat = TBaseHelper.deepCopy(other.stat);
  }

  public PropDef deepCopy() {
    return new PropDef(this);
  }

  @Deprecated
  public PropDef clone() {
    return new PropDef(this);
  }

  /**
   * 
   * @see PropOwner
   */
  public int  getOwner() {
    return this.owner;
  }

  /**
   * 
   * @see PropOwner
   */
  public PropDef setOwner(int owner) {
    this.owner = owner;
    setOwnerIsSet(true);
    return this;
  }

  public void unsetOwner() {
    __isset_bit_vector.clear(__OWNER_ISSET_ID);
  }

  // Returns true if field owner is set (has been assigned a value) and false otherwise
  public boolean isSetOwner() {
    return __isset_bit_vector.get(__OWNER_ISSET_ID);
  }

  public void setOwnerIsSet(boolean value) {
    __isset_bit_vector.set(__OWNER_ISSET_ID, value);
  }

  public EntryId  getId() {
    return this.id;
  }

  public PropDef setId(EntryId id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  // Returns true if field id is set (has been assigned a value) and false otherwise
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String  getName() {
    return this.name;
  }

  public PropDef setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int  getStat() {
    return this.stat;
  }

  public PropDef setStat(int stat) {
    this.stat = stat;
    setStatIsSet(true);
    return this;
  }

  public void unsetStat() {
    __isset_bit_vector.clear(__STAT_ISSET_ID);
  }

  // Returns true if field stat is set (has been assigned a value) and false otherwise
  public boolean isSetStat() {
    return __isset_bit_vector.get(__STAT_ISSET_ID);
  }

  public void setStatIsSet(boolean value) {
    __isset_bit_vector.set(__STAT_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((EntryId)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case OWNER:
      return getOwner();

    case ID:
      return getId();

    case NAME:
      return getName();

    case STAT:
      return getStat();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case OWNER:
      return isSetOwner();
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case STAT:
      return isSetStat();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PropDef)
      return this.equals((PropDef)that);
    return false;
  }

  public boolean equals(PropDef that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_owner = true;
    boolean that_present_owner = true;
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!TBaseHelper.equalsNobinary(this.owner, that.owner))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.id, that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!TBaseHelper.equalsNobinary(this.name, that.name))
        return false;
    }

    boolean this_present_stat = true;
    boolean that_present_stat = true;
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stat, that.stat))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_owner = true;
    builder.append(present_owner);
    if (present_owner)
      builder.append(owner);

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_stat = true;
    builder.append(present_stat);
    if (present_stat)
      builder.append(stat);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(PropDef other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(owner, other.owner);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id, other.id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(name, other.name);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stat, other.stat);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case OWNER:
          if (field.type == TType.I32) {
            this.owner = iprot.readI32();
            setOwnerIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ID:
          if (field.type == TType.STRUCT) {
            this.id = new EntryId();
            this.id.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAT:
          if (field.type == TType.I32) {
            this.stat = iprot.readI32();
            setStatIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(OWNER_FIELD_DESC);
    oprot.writeI32(this.owner);
    oprot.writeFieldEnd();
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      this.id.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STAT_FIELD_DESC);
    oprot.writeI32(this.stat);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("PropDef");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("owner");
    sb.append(space);
    sb.append(":").append(space);
    String owner_name = PropOwner.VALUES_TO_NAMES.get(this. getOwner());
    if (owner_name != null) {
      sb.append(owner_name);
      sb.append(" (");
    }
    sb.append(this. getOwner());
    if (owner_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("id");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getId() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getId(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getName() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getName(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("stat");
    sb.append(space);
    sb.append(":").append(space);
    String stat_name = StatType.VALUES_TO_NAMES.get(this. getStat());
    if (stat_name != null) {
      sb.append(stat_name);
      sb.append(" (");
    }
    sb.append(this. getStat());
    if (stat_name != null) {
      sb.append(")");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetOwner() && !PropOwner.VALID_VALUES.contains(owner)){
      throw new TProtocolException("The field 'owner' has been assigned the invalid value " + owner);
    }
  }

}

