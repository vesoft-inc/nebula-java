/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class GetSyncProgressResp implements TBase, java.io.Serializable, Cloneable, Comparable<GetSyncProgressResp> {
  private static final TStruct STRUCT_DESC = new TStruct("GetSyncProgressResp");
  private static final TField CODE_FIELD_DESC = new TField("code", TType.I32, (short)1);
  private static final TField PROGRESSES_FIELD_DESC = new TField("progresses", TType.MAP, (short)2);

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode code;
  public Map<Integer,com.vesoft.nebula.SyncInfo> progresses;
  public static final int CODE = 1;
  public static final int PROGRESSES = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CODE, new FieldMetaData("code", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PROGRESSES, new FieldMetaData("progresses", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, com.vesoft.nebula.SyncInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(GetSyncProgressResp.class, metaDataMap);
  }

  public GetSyncProgressResp() {
  }

  public GetSyncProgressResp(
      com.vesoft.nebula.ErrorCode code,
      Map<Integer,com.vesoft.nebula.SyncInfo> progresses) {
    this();
    this.code = code;
    this.progresses = progresses;
  }

  public static class Builder {
    private com.vesoft.nebula.ErrorCode code;
    private Map<Integer,com.vesoft.nebula.SyncInfo> progresses;

    public Builder() {
    }

    public Builder setCode(final com.vesoft.nebula.ErrorCode code) {
      this.code = code;
      return this;
    }

    public Builder setProgresses(final Map<Integer,com.vesoft.nebula.SyncInfo> progresses) {
      this.progresses = progresses;
      return this;
    }

    public GetSyncProgressResp build() {
      GetSyncProgressResp result = new GetSyncProgressResp();
      result.setCode(this.code);
      result.setProgresses(this.progresses);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSyncProgressResp(GetSyncProgressResp other) {
    if (other.isSetCode()) {
      this.code = TBaseHelper.deepCopy(other.code);
    }
    if (other.isSetProgresses()) {
      this.progresses = TBaseHelper.deepCopy(other.progresses);
    }
  }

  public GetSyncProgressResp deepCopy() {
    return new GetSyncProgressResp(this);
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode getCode() {
    return this.code;
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public GetSyncProgressResp setCode(com.vesoft.nebula.ErrorCode code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  // Returns true if field code is set (has been assigned a value) and false otherwise
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean __value) {
    if (!__value) {
      this.code = null;
    }
  }

  public Map<Integer,com.vesoft.nebula.SyncInfo> getProgresses() {
    return this.progresses;
  }

  public GetSyncProgressResp setProgresses(Map<Integer,com.vesoft.nebula.SyncInfo> progresses) {
    this.progresses = progresses;
    return this;
  }

  public void unsetProgresses() {
    this.progresses = null;
  }

  // Returns true if field progresses is set (has been assigned a value) and false otherwise
  public boolean isSetProgresses() {
    return this.progresses != null;
  }

  public void setProgressesIsSet(boolean __value) {
    if (!__value) {
      this.progresses = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case CODE:
      if (__value == null) {
        unsetCode();
      } else {
        setCode((com.vesoft.nebula.ErrorCode)__value);
      }
      break;

    case PROGRESSES:
      if (__value == null) {
        unsetProgresses();
      } else {
        setProgresses((Map<Integer,com.vesoft.nebula.SyncInfo>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CODE:
      return getCode();

    case PROGRESSES:
      return getProgresses();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof GetSyncProgressResp))
      return false;
    GetSyncProgressResp that = (GetSyncProgressResp)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetCode(), that.isSetCode(), this.code, that.code)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetProgresses(), that.isSetProgresses(), this.progresses, that.progresses)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {code, progresses});
  }

  @Override
  public int compareTo(GetSyncProgressResp other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(code, other.code);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetProgresses()).compareTo(other.isSetProgresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(progresses, other.progresses);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case CODE:
          if (__field.type == TType.I32) {
            this.code = com.vesoft.nebula.ErrorCode.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PROGRESSES:
          if (__field.type == TType.MAP) {
            {
              TMap _map319 = iprot.readMapBegin();
              this.progresses = new HashMap<Integer,com.vesoft.nebula.SyncInfo>(Math.max(0, 2*_map319.size));
              for (int _i320 = 0; 
                   (_map319.size < 0) ? iprot.peekMap() : (_i320 < _map319.size); 
                   ++_i320)
              {
                int _key321;
                com.vesoft.nebula.SyncInfo _val322;
                _key321 = iprot.readI32();
                _val322 = new com.vesoft.nebula.SyncInfo();
                _val322.read(iprot);
                this.progresses.put(_key321, _val322);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.code != null) {
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(this.code == null ? 0 : this.code.getValue());
      oprot.writeFieldEnd();
    }
    if (this.progresses != null) {
      oprot.writeFieldBegin(PROGRESSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.progresses.size()));
        for (Map.Entry<Integer, com.vesoft.nebula.SyncInfo> _iter323 : this.progresses.entrySet())        {
          oprot.writeI32(_iter323.getKey());
          _iter323.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("GetSyncProgressResp");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("code");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getCode() == null) {
      sb.append("null");
    } else {
      String code_name = this.getCode() == null ? "null" : this.getCode().name();
      if (code_name != null) {
        sb.append(code_name);
        sb.append(" (");
      }
      sb.append(this.getCode());
      if (code_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("progresses");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getProgresses() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getProgresses(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

