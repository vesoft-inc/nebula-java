/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class VertexData implements TBase, java.io.Serializable, Cloneable, Comparable<VertexData> {
  private static final TStruct STRUCT_DESC = new TStruct("VertexData");
  private static final TField VERTEX_ID_FIELD_DESC = new TField("vertex_id", TType.I64, (short)1);
  private static final TField TAG_DATA_FIELD_DESC = new TField("tag_data", TType.LIST, (short)2);
  private static final TField EDGE_DATA_FIELD_DESC = new TField("edge_data", TType.LIST, (short)3);

  public long vertex_id;
  public List<TagData> tag_data;
  public List<EdgeData> edge_data;
  public static final int VERTEX_ID = 1;
  public static final int TAG_DATA = 2;
  public static final int EDGE_DATA = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __VERTEX_ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(VERTEX_ID, new FieldMetaData("vertex_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(TAG_DATA, new FieldMetaData("tag_data", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TagData.class))));
    tmpMetaDataMap.put(EDGE_DATA, new FieldMetaData("edge_data", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, EdgeData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(VertexData.class, metaDataMap);
  }

  public VertexData() {
  }

  public VertexData(
    long vertex_id,
    List<TagData> tag_data,
    List<EdgeData> edge_data)
  {
    this();
    this.vertex_id = vertex_id;
    setVertex_idIsSet(true);
    this.tag_data = tag_data;
    this.edge_data = edge_data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VertexData(VertexData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.vertex_id = TBaseHelper.deepCopy(other.vertex_id);
    if (other.isSetTag_data()) {
      this.tag_data = TBaseHelper.deepCopy(other.tag_data);
    }
    if (other.isSetEdge_data()) {
      this.edge_data = TBaseHelper.deepCopy(other.edge_data);
    }
  }

  public VertexData deepCopy() {
    return new VertexData(this);
  }

  @Deprecated
  public VertexData clone() {
    return new VertexData(this);
  }

  public long  getVertex_id() {
    return this.vertex_id;
  }

  public VertexData setVertex_id(long vertex_id) {
    this.vertex_id = vertex_id;
    setVertex_idIsSet(true);
    return this;
  }

  public void unsetVertex_id() {
    __isset_bit_vector.clear(__VERTEX_ID_ISSET_ID);
  }

  // Returns true if field vertex_id is set (has been assigned a value) and false otherwise
  public boolean isSetVertex_id() {
    return __isset_bit_vector.get(__VERTEX_ID_ISSET_ID);
  }

  public void setVertex_idIsSet(boolean value) {
    __isset_bit_vector.set(__VERTEX_ID_ISSET_ID, value);
  }

  public List<TagData>  getTag_data() {
    return this.tag_data;
  }

  public VertexData setTag_data(List<TagData> tag_data) {
    this.tag_data = tag_data;
    return this;
  }

  public void unsetTag_data() {
    this.tag_data = null;
  }

  // Returns true if field tag_data is set (has been assigned a value) and false otherwise
  public boolean isSetTag_data() {
    return this.tag_data != null;
  }

  public void setTag_dataIsSet(boolean value) {
    if (!value) {
      this.tag_data = null;
    }
  }

  public List<EdgeData>  getEdge_data() {
    return this.edge_data;
  }

  public VertexData setEdge_data(List<EdgeData> edge_data) {
    this.edge_data = edge_data;
    return this;
  }

  public void unsetEdge_data() {
    this.edge_data = null;
  }

  // Returns true if field edge_data is set (has been assigned a value) and false otherwise
  public boolean isSetEdge_data() {
    return this.edge_data != null;
  }

  public void setEdge_dataIsSet(boolean value) {
    if (!value) {
      this.edge_data = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case VERTEX_ID:
      if (value == null) {
        unsetVertex_id();
      } else {
        setVertex_id((Long)value);
      }
      break;

    case TAG_DATA:
      if (value == null) {
        unsetTag_data();
      } else {
        setTag_data((List<TagData>)value);
      }
      break;

    case EDGE_DATA:
      if (value == null) {
        unsetEdge_data();
      } else {
        setEdge_data((List<EdgeData>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case VERTEX_ID:
      return new Long(getVertex_id());

    case TAG_DATA:
      return getTag_data();

    case EDGE_DATA:
      return getEdge_data();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case VERTEX_ID:
      return isSetVertex_id();
    case TAG_DATA:
      return isSetTag_data();
    case EDGE_DATA:
      return isSetEdge_data();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VertexData)
      return this.equals((VertexData)that);
    return false;
  }

  public boolean equals(VertexData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_vertex_id = true;
    boolean that_present_vertex_id = true;
    if (this_present_vertex_id || that_present_vertex_id) {
      if (!(this_present_vertex_id && that_present_vertex_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.vertex_id, that.vertex_id))
        return false;
    }

    boolean this_present_tag_data = true && this.isSetTag_data();
    boolean that_present_tag_data = true && that.isSetTag_data();
    if (this_present_tag_data || that_present_tag_data) {
      if (!(this_present_tag_data && that_present_tag_data))
        return false;
      if (!TBaseHelper.equalsNobinary(this.tag_data, that.tag_data))
        return false;
    }

    boolean this_present_edge_data = true && this.isSetEdge_data();
    boolean that_present_edge_data = true && that.isSetEdge_data();
    if (this_present_edge_data || that_present_edge_data) {
      if (!(this_present_edge_data && that_present_edge_data))
        return false;
      if (!TBaseHelper.equalsNobinary(this.edge_data, that.edge_data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_vertex_id = true;
    builder.append(present_vertex_id);
    if (present_vertex_id)
      builder.append(vertex_id);

    boolean present_tag_data = true && (isSetTag_data());
    builder.append(present_tag_data);
    if (present_tag_data)
      builder.append(tag_data);

    boolean present_edge_data = true && (isSetEdge_data());
    builder.append(present_edge_data);
    if (present_edge_data)
      builder.append(edge_data);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(VertexData other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVertex_id()).compareTo(other.isSetVertex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(vertex_id, other.vertex_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTag_data()).compareTo(other.isSetTag_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(tag_data, other.tag_data);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEdge_data()).compareTo(other.isSetEdge_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(edge_data, other.edge_data);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case VERTEX_ID:
          if (field.type == TType.I64) {
            this.vertex_id = iprot.readI64();
            setVertex_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_DATA:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.tag_data = new ArrayList<TagData>(Math.max(0, _list4.size));
              for (int _i5 = 0; 
                   (_list4.size < 0) ? iprot.peekList() : (_i5 < _list4.size); 
                   ++_i5)
              {
                TagData _elem6;
                _elem6 = new TagData();
                _elem6.read(iprot);
                this.tag_data.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGE_DATA:
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.edge_data = new ArrayList<EdgeData>(Math.max(0, _list7.size));
              for (int _i8 = 0; 
                   (_list7.size < 0) ? iprot.peekList() : (_i8 < _list7.size); 
                   ++_i8)
              {
                EdgeData _elem9;
                _elem9 = new EdgeData();
                _elem9.read(iprot);
                this.edge_data.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(VERTEX_ID_FIELD_DESC);
    oprot.writeI64(this.vertex_id);
    oprot.writeFieldEnd();
    if (this.tag_data != null) {
      oprot.writeFieldBegin(TAG_DATA_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.tag_data.size()));
        for (TagData _iter10 : this.tag_data)        {
          _iter10.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.edge_data != null) {
      oprot.writeFieldBegin(EDGE_DATA_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.edge_data.size()));
        for (EdgeData _iter11 : this.edge_data)        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("VertexData");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("vertex_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getVertex_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("tag_data");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTag_data() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTag_data(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("edge_data");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEdge_data() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEdge_data(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

