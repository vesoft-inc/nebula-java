/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.storage;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class CatchUpResp implements TBase, java.io.Serializable, Cloneable, Comparable<CatchUpResp> {
  private static final TStruct STRUCT_DESC = new TStruct("CatchUpResp");
  private static final TField CODE_FIELD_DESC = new TField("code", TType.I32, (short)1);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)2);
  private static final TField SNAPSHOT_ROWS_FIELD_DESC = new TField("snapshotRows", TType.I64, (short)3);
  private static final TField COMMIT_LOG_ID_FIELD_DESC = new TField("commitLogId", TType.I64, (short)4);
  private static final TField RESULT_FIELD_DESC = new TField("result", TType.STRUCT, (short)5);

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode code;
  /**
   * 
   * @see CatchUpStatus
   */
  public CatchUpStatus status;
  public long snapshotRows;
  public long commitLogId;
  public ResponseCommon result;
  public static final int CODE = 1;
  public static final int STATUS = 2;
  public static final int SNAPSHOTROWS = 3;
  public static final int COMMITLOGID = 4;
  public static final int RESULT = 5;

  // isset id assignments
  private static final int __SNAPSHOTROWS_ISSET_ID = 0;
  private static final int __COMMITLOGID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CODE, new FieldMetaData("code", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SNAPSHOTROWS, new FieldMetaData("snapshotRows", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(COMMITLOGID, new FieldMetaData("commitLogId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(RESULT, new FieldMetaData("result", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ResponseCommon.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(CatchUpResp.class, metaDataMap);
  }

  public CatchUpResp() {
  }

  public CatchUpResp(
      com.vesoft.nebula.ErrorCode code,
      CatchUpStatus status,
      long snapshotRows,
      long commitLogId,
      ResponseCommon result) {
    this();
    this.code = code;
    this.status = status;
    this.snapshotRows = snapshotRows;
    setSnapshotRowsIsSet(true);
    this.commitLogId = commitLogId;
    setCommitLogIdIsSet(true);
    this.result = result;
  }

  public static class Builder {
    private com.vesoft.nebula.ErrorCode code;
    private CatchUpStatus status;
    private long snapshotRows;
    private long commitLogId;
    private ResponseCommon result;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setCode(final com.vesoft.nebula.ErrorCode code) {
      this.code = code;
      return this;
    }

    public Builder setStatus(final CatchUpStatus status) {
      this.status = status;
      return this;
    }

    public Builder setSnapshotRows(final long snapshotRows) {
      this.snapshotRows = snapshotRows;
      __optional_isset.set(__SNAPSHOTROWS_ISSET_ID, true);
      return this;
    }

    public Builder setCommitLogId(final long commitLogId) {
      this.commitLogId = commitLogId;
      __optional_isset.set(__COMMITLOGID_ISSET_ID, true);
      return this;
    }

    public Builder setResult(final ResponseCommon result) {
      this.result = result;
      return this;
    }

    public CatchUpResp build() {
      CatchUpResp result = new CatchUpResp();
      result.setCode(this.code);
      result.setStatus(this.status);
      if (__optional_isset.get(__SNAPSHOTROWS_ISSET_ID)) {
        result.setSnapshotRows(this.snapshotRows);
      }
      if (__optional_isset.get(__COMMITLOGID_ISSET_ID)) {
        result.setCommitLogId(this.commitLogId);
      }
      result.setResult(this.result);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CatchUpResp(CatchUpResp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCode()) {
      this.code = TBaseHelper.deepCopy(other.code);
    }
    if (other.isSetStatus()) {
      this.status = TBaseHelper.deepCopy(other.status);
    }
    this.snapshotRows = TBaseHelper.deepCopy(other.snapshotRows);
    this.commitLogId = TBaseHelper.deepCopy(other.commitLogId);
    if (other.isSetResult()) {
      this.result = TBaseHelper.deepCopy(other.result);
    }
  }

  public CatchUpResp deepCopy() {
    return new CatchUpResp(this);
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode getCode() {
    return this.code;
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public CatchUpResp setCode(com.vesoft.nebula.ErrorCode code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  // Returns true if field code is set (has been assigned a value) and false otherwise
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean __value) {
    if (!__value) {
      this.code = null;
    }
  }

  /**
   * 
   * @see CatchUpStatus
   */
  public CatchUpStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see CatchUpStatus
   */
  public CatchUpResp setStatus(CatchUpStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean __value) {
    if (!__value) {
      this.status = null;
    }
  }

  public long getSnapshotRows() {
    return this.snapshotRows;
  }

  public CatchUpResp setSnapshotRows(long snapshotRows) {
    this.snapshotRows = snapshotRows;
    setSnapshotRowsIsSet(true);
    return this;
  }

  public void unsetSnapshotRows() {
    __isset_bit_vector.clear(__SNAPSHOTROWS_ISSET_ID);
  }

  // Returns true if field snapshotRows is set (has been assigned a value) and false otherwise
  public boolean isSetSnapshotRows() {
    return __isset_bit_vector.get(__SNAPSHOTROWS_ISSET_ID);
  }

  public void setSnapshotRowsIsSet(boolean __value) {
    __isset_bit_vector.set(__SNAPSHOTROWS_ISSET_ID, __value);
  }

  public long getCommitLogId() {
    return this.commitLogId;
  }

  public CatchUpResp setCommitLogId(long commitLogId) {
    this.commitLogId = commitLogId;
    setCommitLogIdIsSet(true);
    return this;
  }

  public void unsetCommitLogId() {
    __isset_bit_vector.clear(__COMMITLOGID_ISSET_ID);
  }

  // Returns true if field commitLogId is set (has been assigned a value) and false otherwise
  public boolean isSetCommitLogId() {
    return __isset_bit_vector.get(__COMMITLOGID_ISSET_ID);
  }

  public void setCommitLogIdIsSet(boolean __value) {
    __isset_bit_vector.set(__COMMITLOGID_ISSET_ID, __value);
  }

  public ResponseCommon getResult() {
    return this.result;
  }

  public CatchUpResp setResult(ResponseCommon result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  // Returns true if field result is set (has been assigned a value) and false otherwise
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean __value) {
    if (!__value) {
      this.result = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case CODE:
      if (__value == null) {
        unsetCode();
      } else {
        setCode((com.vesoft.nebula.ErrorCode)__value);
      }
      break;

    case STATUS:
      if (__value == null) {
        unsetStatus();
      } else {
        setStatus((CatchUpStatus)__value);
      }
      break;

    case SNAPSHOTROWS:
      if (__value == null) {
        unsetSnapshotRows();
      } else {
        setSnapshotRows((Long)__value);
      }
      break;

    case COMMITLOGID:
      if (__value == null) {
        unsetCommitLogId();
      } else {
        setCommitLogId((Long)__value);
      }
      break;

    case RESULT:
      if (__value == null) {
        unsetResult();
      } else {
        setResult((ResponseCommon)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CODE:
      return getCode();

    case STATUS:
      return getStatus();

    case SNAPSHOTROWS:
      return new Long(getSnapshotRows());

    case COMMITLOGID:
      return new Long(getCommitLogId());

    case RESULT:
      return getResult();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof CatchUpResp))
      return false;
    CatchUpResp that = (CatchUpResp)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetCode(), that.isSetCode(), this.code, that.code)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStatus(), that.isSetStatus(), this.status, that.status)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.snapshotRows, that.snapshotRows)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.commitLogId, that.commitLogId)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetResult(), that.isSetResult(), this.result, that.result)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {code, status, snapshotRows, commitLogId, result});
  }

  @Override
  public int compareTo(CatchUpResp other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(code, other.code);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSnapshotRows()).compareTo(other.isSetSnapshotRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(snapshotRows, other.snapshotRows);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCommitLogId()).compareTo(other.isSetCommitLogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(commitLogId, other.commitLogId);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(result, other.result);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case CODE:
          if (__field.type == TType.I32) {
            this.code = com.vesoft.nebula.ErrorCode.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STATUS:
          if (__field.type == TType.I32) {
            this.status = CatchUpStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SNAPSHOTROWS:
          if (__field.type == TType.I64) {
            this.snapshotRows = iprot.readI64();
            setSnapshotRowsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case COMMITLOGID:
          if (__field.type == TType.I64) {
            this.commitLogId = iprot.readI64();
            setCommitLogIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case RESULT:
          if (__field.type == TType.STRUCT) {
            this.result = new ResponseCommon();
            this.result.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.code != null) {
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(this.code == null ? 0 : this.code.getValue());
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status == null ? 0 : this.status.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SNAPSHOT_ROWS_FIELD_DESC);
    oprot.writeI64(this.snapshotRows);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COMMIT_LOG_ID_FIELD_DESC);
    oprot.writeI64(this.commitLogId);
    oprot.writeFieldEnd();
    if (this.result != null) {
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      this.result.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("CatchUpResp");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("code");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getCode() == null) {
      sb.append("null");
    } else {
      String code_name = this.getCode() == null ? "null" : this.getCode().name();
      if (code_name != null) {
        sb.append(code_name);
        sb.append(" (");
      }
      sb.append(this.getCode());
      if (code_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStatus() == null) {
      sb.append("null");
    } else {
      String status_name = this.getStatus() == null ? "null" : this.getStatus().name();
      if (status_name != null) {
        sb.append(status_name);
        sb.append(" (");
      }
      sb.append(this.getStatus());
      if (status_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("snapshotRows");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSnapshotRows(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("commitLogId");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getCommitLogId(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("result");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getResult() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getResult(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

