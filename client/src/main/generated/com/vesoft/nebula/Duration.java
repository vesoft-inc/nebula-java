/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Duration implements TBase, java.io.Serializable, Cloneable, Comparable<Duration> {
  private static final TStruct STRUCT_DESC = new TStruct("Duration");
  private static final TField SECONDS_FIELD_DESC = new TField("seconds", TType.I64, (short)1);
  private static final TField MICROSECONDS_FIELD_DESC = new TField("microseconds", TType.I32, (short)2);
  private static final TField MONTHS_FIELD_DESC = new TField("months", TType.I32, (short)3);

  public long seconds;
  public int microseconds;
  public int months;
  public static final int SECONDS = 1;
  public static final int MICROSECONDS = 2;
  public static final int MONTHS = 3;

  // isset id assignments
  private static final int __SECONDS_ISSET_ID = 0;
  private static final int __MICROSECONDS_ISSET_ID = 1;
  private static final int __MONTHS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SECONDS, new FieldMetaData("seconds", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(MICROSECONDS, new FieldMetaData("microseconds", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(MONTHS, new FieldMetaData("months", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Duration.class, metaDataMap);
  }

  public Duration() {
  }

  public Duration(
      long seconds,
      int microseconds,
      int months) {
    this();
    this.seconds = seconds;
    setSecondsIsSet(true);
    this.microseconds = microseconds;
    setMicrosecondsIsSet(true);
    this.months = months;
    setMonthsIsSet(true);
  }

  public static class Builder {
    private long seconds;
    private int microseconds;
    private int months;

    BitSet __optional_isset = new BitSet(3);

    public Builder() {
    }

    public Builder setSeconds(final long seconds) {
      this.seconds = seconds;
      __optional_isset.set(__SECONDS_ISSET_ID, true);
      return this;
    }

    public Builder setMicroseconds(final int microseconds) {
      this.microseconds = microseconds;
      __optional_isset.set(__MICROSECONDS_ISSET_ID, true);
      return this;
    }

    public Builder setMonths(final int months) {
      this.months = months;
      __optional_isset.set(__MONTHS_ISSET_ID, true);
      return this;
    }

    public Duration build() {
      Duration result = new Duration();
      if (__optional_isset.get(__SECONDS_ISSET_ID)) {
        result.setSeconds(this.seconds);
      }
      if (__optional_isset.get(__MICROSECONDS_ISSET_ID)) {
        result.setMicroseconds(this.microseconds);
      }
      if (__optional_isset.get(__MONTHS_ISSET_ID)) {
        result.setMonths(this.months);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Duration(Duration other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.seconds = TBaseHelper.deepCopy(other.seconds);
    this.microseconds = TBaseHelper.deepCopy(other.microseconds);
    this.months = TBaseHelper.deepCopy(other.months);
  }

  public Duration deepCopy() {
    return new Duration(this);
  }

  public long getSeconds() {
    return this.seconds;
  }

  public Duration setSeconds(long seconds) {
    this.seconds = seconds;
    setSecondsIsSet(true);
    return this;
  }

  public void unsetSeconds() {
    __isset_bit_vector.clear(__SECONDS_ISSET_ID);
  }

  // Returns true if field seconds is set (has been assigned a value) and false otherwise
  public boolean isSetSeconds() {
    return __isset_bit_vector.get(__SECONDS_ISSET_ID);
  }

  public void setSecondsIsSet(boolean __value) {
    __isset_bit_vector.set(__SECONDS_ISSET_ID, __value);
  }

  public int getMicroseconds() {
    return this.microseconds;
  }

  public Duration setMicroseconds(int microseconds) {
    this.microseconds = microseconds;
    setMicrosecondsIsSet(true);
    return this;
  }

  public void unsetMicroseconds() {
    __isset_bit_vector.clear(__MICROSECONDS_ISSET_ID);
  }

  // Returns true if field microseconds is set (has been assigned a value) and false otherwise
  public boolean isSetMicroseconds() {
    return __isset_bit_vector.get(__MICROSECONDS_ISSET_ID);
  }

  public void setMicrosecondsIsSet(boolean __value) {
    __isset_bit_vector.set(__MICROSECONDS_ISSET_ID, __value);
  }

  public int getMonths() {
    return this.months;
  }

  public Duration setMonths(int months) {
    this.months = months;
    setMonthsIsSet(true);
    return this;
  }

  public void unsetMonths() {
    __isset_bit_vector.clear(__MONTHS_ISSET_ID);
  }

  // Returns true if field months is set (has been assigned a value) and false otherwise
  public boolean isSetMonths() {
    return __isset_bit_vector.get(__MONTHS_ISSET_ID);
  }

  public void setMonthsIsSet(boolean __value) {
    __isset_bit_vector.set(__MONTHS_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SECONDS:
      if (__value == null) {
        unsetSeconds();
      } else {
        setSeconds((Long)__value);
      }
      break;

    case MICROSECONDS:
      if (__value == null) {
        unsetMicroseconds();
      } else {
        setMicroseconds((Integer)__value);
      }
      break;

    case MONTHS:
      if (__value == null) {
        unsetMonths();
      } else {
        setMonths((Integer)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SECONDS:
      return new Long(getSeconds());

    case MICROSECONDS:
      return new Integer(getMicroseconds());

    case MONTHS:
      return new Integer(getMonths());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Duration))
      return false;
    Duration that = (Duration)_that;

    if (!TBaseHelper.equalsNobinary(this.seconds, that.seconds)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.microseconds, that.microseconds)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.months, that.months)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {seconds, microseconds, months});
  }

  @Override
  public int compareTo(Duration other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSeconds()).compareTo(other.isSetSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(seconds, other.seconds);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMicroseconds()).compareTo(other.isSetMicroseconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(microseconds, other.microseconds);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMonths()).compareTo(other.isSetMonths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(months, other.months);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SECONDS:
          if (__field.type == TType.I64) {
            this.seconds = iprot.readI64();
            setSecondsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MICROSECONDS:
          if (__field.type == TType.I32) {
            this.microseconds = iprot.readI32();
            setMicrosecondsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MONTHS:
          if (__field.type == TType.I32) {
            this.months = iprot.readI32();
            setMonthsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SECONDS_FIELD_DESC);
    oprot.writeI64(this.seconds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MICROSECONDS_FIELD_DESC);
    oprot.writeI32(this.microseconds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MONTHS_FIELD_DESC);
    oprot.writeI32(this.months);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Duration");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("seconds");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSeconds(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("microseconds");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getMicroseconds(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("months");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getMonths(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

