/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.raftex;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AskForVoteRequest implements TBase, java.io.Serializable, Cloneable, Comparable<AskForVoteRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("AskForVoteRequest");
  private static final TField SPACE_FIELD_DESC = new TField("space", TType.I32, (short)1);
  private static final TField PART_FIELD_DESC = new TField("part", TType.I32, (short)2);
  private static final TField CANDIDATE_IP_FIELD_DESC = new TField("candidate_ip", TType.I32, (short)3);
  private static final TField CANDIDATE_PORT_FIELD_DESC = new TField("candidate_port", TType.I32, (short)4);
  private static final TField TERM_FIELD_DESC = new TField("term", TType.I64, (short)5);
  private static final TField LAST_LOG_ID_FIELD_DESC = new TField("last_log_id", TType.I64, (short)6);
  private static final TField LAST_LOG_TERM_FIELD_DESC = new TField("last_log_term", TType.I64, (short)7);

  public int space;
  public int part;
  public int candidate_ip;
  public int candidate_port;
  public long term;
  public long last_log_id;
  public long last_log_term;
  public static final int SPACE = 1;
  public static final int PART = 2;
  public static final int CANDIDATE_IP = 3;
  public static final int CANDIDATE_PORT = 4;
  public static final int TERM = 5;
  public static final int LAST_LOG_ID = 6;
  public static final int LAST_LOG_TERM = 7;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SPACE_ISSET_ID = 0;
  private static final int __PART_ISSET_ID = 1;
  private static final int __CANDIDATE_IP_ISSET_ID = 2;
  private static final int __CANDIDATE_PORT_ISSET_ID = 3;
  private static final int __TERM_ISSET_ID = 4;
  private static final int __LAST_LOG_ID_ISSET_ID = 5;
  private static final int __LAST_LOG_TERM_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE, new FieldMetaData("space", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PART, new FieldMetaData("part", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(CANDIDATE_IP, new FieldMetaData("candidate_ip", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(CANDIDATE_PORT, new FieldMetaData("candidate_port", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TERM, new FieldMetaData("term", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LAST_LOG_ID, new FieldMetaData("last_log_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LAST_LOG_TERM, new FieldMetaData("last_log_term", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AskForVoteRequest.class, metaDataMap);
  }

  public AskForVoteRequest() {
  }

  public AskForVoteRequest(
    int space,
    int part,
    int candidate_ip,
    int candidate_port,
    long term,
    long last_log_id,
    long last_log_term)
  {
    this();
    this.space = space;
    setSpaceIsSet(true);
    this.part = part;
    setPartIsSet(true);
    this.candidate_ip = candidate_ip;
    setCandidate_ipIsSet(true);
    this.candidate_port = candidate_port;
    setCandidate_portIsSet(true);
    this.term = term;
    setTermIsSet(true);
    this.last_log_id = last_log_id;
    setLast_log_idIsSet(true);
    this.last_log_term = last_log_term;
    setLast_log_termIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AskForVoteRequest(AskForVoteRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.space = TBaseHelper.deepCopy(other.space);
    this.part = TBaseHelper.deepCopy(other.part);
    this.candidate_ip = TBaseHelper.deepCopy(other.candidate_ip);
    this.candidate_port = TBaseHelper.deepCopy(other.candidate_port);
    this.term = TBaseHelper.deepCopy(other.term);
    this.last_log_id = TBaseHelper.deepCopy(other.last_log_id);
    this.last_log_term = TBaseHelper.deepCopy(other.last_log_term);
  }

  public AskForVoteRequest deepCopy() {
    return new AskForVoteRequest(this);
  }

  @Deprecated
  public AskForVoteRequest clone() {
    return new AskForVoteRequest(this);
  }

  public int  getSpace() {
    return this.space;
  }

  public AskForVoteRequest setSpace(int space) {
    this.space = space;
    setSpaceIsSet(true);
    return this;
  }

  public void unsetSpace() {
    __isset_bit_vector.clear(__SPACE_ISSET_ID);
  }

  // Returns true if field space is set (has been assigned a value) and false otherwise
  public boolean isSetSpace() {
    return __isset_bit_vector.get(__SPACE_ISSET_ID);
  }

  public void setSpaceIsSet(boolean value) {
    __isset_bit_vector.set(__SPACE_ISSET_ID, value);
  }

  public int  getPart() {
    return this.part;
  }

  public AskForVoteRequest setPart(int part) {
    this.part = part;
    setPartIsSet(true);
    return this;
  }

  public void unsetPart() {
    __isset_bit_vector.clear(__PART_ISSET_ID);
  }

  // Returns true if field part is set (has been assigned a value) and false otherwise
  public boolean isSetPart() {
    return __isset_bit_vector.get(__PART_ISSET_ID);
  }

  public void setPartIsSet(boolean value) {
    __isset_bit_vector.set(__PART_ISSET_ID, value);
  }

  public int  getCandidate_ip() {
    return this.candidate_ip;
  }

  public AskForVoteRequest setCandidate_ip(int candidate_ip) {
    this.candidate_ip = candidate_ip;
    setCandidate_ipIsSet(true);
    return this;
  }

  public void unsetCandidate_ip() {
    __isset_bit_vector.clear(__CANDIDATE_IP_ISSET_ID);
  }

  // Returns true if field candidate_ip is set (has been assigned a value) and false otherwise
  public boolean isSetCandidate_ip() {
    return __isset_bit_vector.get(__CANDIDATE_IP_ISSET_ID);
  }

  public void setCandidate_ipIsSet(boolean value) {
    __isset_bit_vector.set(__CANDIDATE_IP_ISSET_ID, value);
  }

  public int  getCandidate_port() {
    return this.candidate_port;
  }

  public AskForVoteRequest setCandidate_port(int candidate_port) {
    this.candidate_port = candidate_port;
    setCandidate_portIsSet(true);
    return this;
  }

  public void unsetCandidate_port() {
    __isset_bit_vector.clear(__CANDIDATE_PORT_ISSET_ID);
  }

  // Returns true if field candidate_port is set (has been assigned a value) and false otherwise
  public boolean isSetCandidate_port() {
    return __isset_bit_vector.get(__CANDIDATE_PORT_ISSET_ID);
  }

  public void setCandidate_portIsSet(boolean value) {
    __isset_bit_vector.set(__CANDIDATE_PORT_ISSET_ID, value);
  }

  public long  getTerm() {
    return this.term;
  }

  public AskForVoteRequest setTerm(long term) {
    this.term = term;
    setTermIsSet(true);
    return this;
  }

  public void unsetTerm() {
    __isset_bit_vector.clear(__TERM_ISSET_ID);
  }

  // Returns true if field term is set (has been assigned a value) and false otherwise
  public boolean isSetTerm() {
    return __isset_bit_vector.get(__TERM_ISSET_ID);
  }

  public void setTermIsSet(boolean value) {
    __isset_bit_vector.set(__TERM_ISSET_ID, value);
  }

  public long  getLast_log_id() {
    return this.last_log_id;
  }

  public AskForVoteRequest setLast_log_id(long last_log_id) {
    this.last_log_id = last_log_id;
    setLast_log_idIsSet(true);
    return this;
  }

  public void unsetLast_log_id() {
    __isset_bit_vector.clear(__LAST_LOG_ID_ISSET_ID);
  }

  // Returns true if field last_log_id is set (has been assigned a value) and false otherwise
  public boolean isSetLast_log_id() {
    return __isset_bit_vector.get(__LAST_LOG_ID_ISSET_ID);
  }

  public void setLast_log_idIsSet(boolean value) {
    __isset_bit_vector.set(__LAST_LOG_ID_ISSET_ID, value);
  }

  public long  getLast_log_term() {
    return this.last_log_term;
  }

  public AskForVoteRequest setLast_log_term(long last_log_term) {
    this.last_log_term = last_log_term;
    setLast_log_termIsSet(true);
    return this;
  }

  public void unsetLast_log_term() {
    __isset_bit_vector.clear(__LAST_LOG_TERM_ISSET_ID);
  }

  // Returns true if field last_log_term is set (has been assigned a value) and false otherwise
  public boolean isSetLast_log_term() {
    return __isset_bit_vector.get(__LAST_LOG_TERM_ISSET_ID);
  }

  public void setLast_log_termIsSet(boolean value) {
    __isset_bit_vector.set(__LAST_LOG_TERM_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SPACE:
      if (value == null) {
        unsetSpace();
      } else {
        setSpace((Integer)value);
      }
      break;

    case PART:
      if (value == null) {
        unsetPart();
      } else {
        setPart((Integer)value);
      }
      break;

    case CANDIDATE_IP:
      if (value == null) {
        unsetCandidate_ip();
      } else {
        setCandidate_ip((Integer)value);
      }
      break;

    case CANDIDATE_PORT:
      if (value == null) {
        unsetCandidate_port();
      } else {
        setCandidate_port((Integer)value);
      }
      break;

    case TERM:
      if (value == null) {
        unsetTerm();
      } else {
        setTerm((Long)value);
      }
      break;

    case LAST_LOG_ID:
      if (value == null) {
        unsetLast_log_id();
      } else {
        setLast_log_id((Long)value);
      }
      break;

    case LAST_LOG_TERM:
      if (value == null) {
        unsetLast_log_term();
      } else {
        setLast_log_term((Long)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE:
      return new Integer(getSpace());

    case PART:
      return new Integer(getPart());

    case CANDIDATE_IP:
      return new Integer(getCandidate_ip());

    case CANDIDATE_PORT:
      return new Integer(getCandidate_port());

    case TERM:
      return new Long(getTerm());

    case LAST_LOG_ID:
      return new Long(getLast_log_id());

    case LAST_LOG_TERM:
      return new Long(getLast_log_term());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SPACE:
      return isSetSpace();
    case PART:
      return isSetPart();
    case CANDIDATE_IP:
      return isSetCandidate_ip();
    case CANDIDATE_PORT:
      return isSetCandidate_port();
    case TERM:
      return isSetTerm();
    case LAST_LOG_ID:
      return isSetLast_log_id();
    case LAST_LOG_TERM:
      return isSetLast_log_term();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AskForVoteRequest)
      return this.equals((AskForVoteRequest)that);
    return false;
  }

  public boolean equals(AskForVoteRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_space = true;
    boolean that_present_space = true;
    if (this_present_space || that_present_space) {
      if (!(this_present_space && that_present_space))
        return false;
      if (!TBaseHelper.equalsNobinary(this.space, that.space))
        return false;
    }

    boolean this_present_part = true;
    boolean that_present_part = true;
    if (this_present_part || that_present_part) {
      if (!(this_present_part && that_present_part))
        return false;
      if (!TBaseHelper.equalsNobinary(this.part, that.part))
        return false;
    }

    boolean this_present_candidate_ip = true;
    boolean that_present_candidate_ip = true;
    if (this_present_candidate_ip || that_present_candidate_ip) {
      if (!(this_present_candidate_ip && that_present_candidate_ip))
        return false;
      if (!TBaseHelper.equalsNobinary(this.candidate_ip, that.candidate_ip))
        return false;
    }

    boolean this_present_candidate_port = true;
    boolean that_present_candidate_port = true;
    if (this_present_candidate_port || that_present_candidate_port) {
      if (!(this_present_candidate_port && that_present_candidate_port))
        return false;
      if (!TBaseHelper.equalsNobinary(this.candidate_port, that.candidate_port))
        return false;
    }

    boolean this_present_term = true;
    boolean that_present_term = true;
    if (this_present_term || that_present_term) {
      if (!(this_present_term && that_present_term))
        return false;
      if (!TBaseHelper.equalsNobinary(this.term, that.term))
        return false;
    }

    boolean this_present_last_log_id = true;
    boolean that_present_last_log_id = true;
    if (this_present_last_log_id || that_present_last_log_id) {
      if (!(this_present_last_log_id && that_present_last_log_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.last_log_id, that.last_log_id))
        return false;
    }

    boolean this_present_last_log_term = true;
    boolean that_present_last_log_term = true;
    if (this_present_last_log_term || that_present_last_log_term) {
      if (!(this_present_last_log_term && that_present_last_log_term))
        return false;
      if (!TBaseHelper.equalsNobinary(this.last_log_term, that.last_log_term))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_space = true;
    builder.append(present_space);
    if (present_space)
      builder.append(space);

    boolean present_part = true;
    builder.append(present_part);
    if (present_part)
      builder.append(part);

    boolean present_candidate_ip = true;
    builder.append(present_candidate_ip);
    if (present_candidate_ip)
      builder.append(candidate_ip);

    boolean present_candidate_port = true;
    builder.append(present_candidate_port);
    if (present_candidate_port)
      builder.append(candidate_port);

    boolean present_term = true;
    builder.append(present_term);
    if (present_term)
      builder.append(term);

    boolean present_last_log_id = true;
    builder.append(present_last_log_id);
    if (present_last_log_id)
      builder.append(last_log_id);

    boolean present_last_log_term = true;
    builder.append(present_last_log_term);
    if (present_last_log_term)
      builder.append(last_log_term);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(AskForVoteRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpace()).compareTo(other.isSetSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space, other.space);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPart()).compareTo(other.isSetPart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(part, other.part);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCandidate_ip()).compareTo(other.isSetCandidate_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(candidate_ip, other.candidate_ip);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCandidate_port()).compareTo(other.isSetCandidate_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(candidate_port, other.candidate_port);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerm()).compareTo(other.isSetTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(term, other.term);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLast_log_id()).compareTo(other.isSetLast_log_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(last_log_id, other.last_log_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLast_log_term()).compareTo(other.isSetLast_log_term());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(last_log_term, other.last_log_term);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SPACE:
          if (field.type == TType.I32) {
            this.space = iprot.readI32();
            setSpaceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PART:
          if (field.type == TType.I32) {
            this.part = iprot.readI32();
            setPartIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CANDIDATE_IP:
          if (field.type == TType.I32) {
            this.candidate_ip = iprot.readI32();
            setCandidate_ipIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CANDIDATE_PORT:
          if (field.type == TType.I32) {
            this.candidate_port = iprot.readI32();
            setCandidate_portIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TERM:
          if (field.type == TType.I64) {
            this.term = iprot.readI64();
            setTermIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LAST_LOG_ID:
          if (field.type == TType.I64) {
            this.last_log_id = iprot.readI64();
            setLast_log_idIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LAST_LOG_TERM:
          if (field.type == TType.I64) {
            this.last_log_term = iprot.readI64();
            setLast_log_termIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SPACE_FIELD_DESC);
    oprot.writeI32(this.space);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PART_FIELD_DESC);
    oprot.writeI32(this.part);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CANDIDATE_IP_FIELD_DESC);
    oprot.writeI32(this.candidate_ip);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CANDIDATE_PORT_FIELD_DESC);
    oprot.writeI32(this.candidate_port);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TERM_FIELD_DESC);
    oprot.writeI64(this.term);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_LOG_ID_FIELD_DESC);
    oprot.writeI64(this.last_log_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_LOG_TERM_FIELD_DESC);
    oprot.writeI64(this.last_log_term);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AskForVoteRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("space");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSpace(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("part");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getPart(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("candidate_ip");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getCandidate_ip(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("candidate_port");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getCandidate_port(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("term");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getTerm(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("last_log_id");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getLast_log_id(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("last_log_term");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getLast_log_term(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

