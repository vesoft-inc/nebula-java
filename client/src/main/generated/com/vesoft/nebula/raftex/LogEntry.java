/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula.raftex;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class LogEntry implements TBase, java.io.Serializable, Cloneable, Comparable<LogEntry> {
  private static final TStruct STRUCT_DESC = new TStruct("LogEntry");
  private static final TField CLUSTER_FIELD_DESC = new TField("cluster", TType.I64, (short)1);
  private static final TField LOG_STR_FIELD_DESC = new TField("log_str", TType.STRING, (short)2);

  public long cluster;
  public byte[] log_str;
  public static final int CLUSTER = 1;
  public static final int LOG_STR = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __CLUSTER_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CLUSTER, new FieldMetaData("cluster", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LOG_STR, new FieldMetaData("log_str", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(LogEntry.class, metaDataMap);
  }

  public LogEntry() {
  }

  public LogEntry(
    long cluster,
    byte[] log_str)
  {
    this();
    this.cluster = cluster;
    setClusterIsSet(true);
    this.log_str = log_str;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogEntry(LogEntry other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.cluster = TBaseHelper.deepCopy(other.cluster);
    if (other.isSetLog_str()) {
      this.log_str = TBaseHelper.deepCopy(other.log_str);
    }
  }

  public LogEntry deepCopy() {
    return new LogEntry(this);
  }

  @Deprecated
  public LogEntry clone() {
    return new LogEntry(this);
  }

  public long  getCluster() {
    return this.cluster;
  }

  public LogEntry setCluster(long cluster) {
    this.cluster = cluster;
    setClusterIsSet(true);
    return this;
  }

  public void unsetCluster() {
    __isset_bit_vector.clear(__CLUSTER_ISSET_ID);
  }

  // Returns true if field cluster is set (has been assigned a value) and false otherwise
  public boolean isSetCluster() {
    return __isset_bit_vector.get(__CLUSTER_ISSET_ID);
  }

  public void setClusterIsSet(boolean value) {
    __isset_bit_vector.set(__CLUSTER_ISSET_ID, value);
  }

  public byte[]  getLog_str() {
    return this.log_str;
  }

  public LogEntry setLog_str(byte[] log_str) {
    this.log_str = log_str;
    return this;
  }

  public void unsetLog_str() {
    this.log_str = null;
  }

  // Returns true if field log_str is set (has been assigned a value) and false otherwise
  public boolean isSetLog_str() {
    return this.log_str != null;
  }

  public void setLog_strIsSet(boolean value) {
    if (!value) {
      this.log_str = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((Long)value);
      }
      break;

    case LOG_STR:
      if (value == null) {
        unsetLog_str();
      } else {
        setLog_str((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CLUSTER:
      return new Long(getCluster());

    case LOG_STR:
      return getLog_str();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CLUSTER:
      return isSetCluster();
    case LOG_STR:
      return isSetLog_str();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LogEntry)
      return this.equals((LogEntry)that);
    return false;
  }

  public boolean equals(LogEntry that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true;
    boolean that_present_cluster = true;
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!TBaseHelper.equalsNobinary(this.cluster, that.cluster))
        return false;
    }

    boolean this_present_log_str = true && this.isSetLog_str();
    boolean that_present_log_str = true && that.isSetLog_str();
    if (this_present_log_str || that_present_log_str) {
      if (!(this_present_log_str && that_present_log_str))
        return false;
      if (!TBaseHelper.equalsSlow(this.log_str, that.log_str))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_cluster = true;
    builder.append(present_cluster);
    if (present_cluster)
      builder.append(cluster);

    boolean present_log_str = true && (isSetLog_str());
    builder.append(present_log_str);
    if (present_log_str)
      builder.append(log_str);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(LogEntry other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cluster, other.cluster);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLog_str()).compareTo(other.isSetLog_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(log_str, other.log_str);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CLUSTER:
          if (field.type == TType.I64) {
            this.cluster = iprot.readI64();
            setClusterIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOG_STR:
          if (field.type == TType.STRING) {
            this.log_str = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
    oprot.writeI64(this.cluster);
    oprot.writeFieldEnd();
    if (this.log_str != null) {
      oprot.writeFieldBegin(LOG_STR_FIELD_DESC);
      oprot.writeBinary(this.log_str);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("LogEntry");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("cluster");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getCluster(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("log_str");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getLog_str() == null) {
      sb.append("null");
    } else {
        int __log_str_size = Math.min(this. getLog_str().length, 128);
        for (int i = 0; i < __log_str_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getLog_str()[i]).length() > 1 ? Integer.toHexString(this. getLog_str()[i]).substring(Integer.toHexString(this. getLog_str()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getLog_str()[i]).toUpperCase());
        }
        if (this. getLog_str().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

