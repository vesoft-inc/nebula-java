/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vesoft.nebula;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Path implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Path");
  private static final TField SRC_FIELD_DESC = new TField("src", TType.STRUCT, (short)1);
  private static final TField STEPS_FIELD_DESC = new TField("steps", TType.LIST, (short)2);

  public Vertex src;
  public List<Step> steps;
  public static final int SRC = 1;
  public static final int STEPS = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SRC, new FieldMetaData("src", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Vertex.class)));
    tmpMetaDataMap.put(STEPS, new FieldMetaData("steps", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Step.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Path.class, metaDataMap);
  }

  public Path() {
  }

  public Path(
      Vertex src,
      List<Step> steps) {
    this();
    this.src = src;
    this.steps = steps;
  }

  public static class Builder {
    private Vertex src;
    private List<Step> steps;

    public Builder() {
    }

    public Builder setSrc(final Vertex src) {
      this.src = src;
      return this;
    }

    public Builder setSteps(final List<Step> steps) {
      this.steps = steps;
      return this;
    }

    public Path build() {
      Path result = new Path();
      result.setSrc(this.src);
      result.setSteps(this.steps);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Path(Path other) {
    if (other.isSetSrc()) {
      this.src = TBaseHelper.deepCopy(other.src);
    }
    if (other.isSetSteps()) {
      this.steps = TBaseHelper.deepCopy(other.steps);
    }
  }

  public Path deepCopy() {
    return new Path(this);
  }

  public Vertex getSrc() {
    return this.src;
  }

  public Path setSrc(Vertex src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  // Returns true if field src is set (has been assigned a value) and false otherwise
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean __value) {
    if (!__value) {
      this.src = null;
    }
  }

  public List<Step> getSteps() {
    return this.steps;
  }

  public Path setSteps(List<Step> steps) {
    this.steps = steps;
    return this;
  }

  public void unsetSteps() {
    this.steps = null;
  }

  // Returns true if field steps is set (has been assigned a value) and false otherwise
  public boolean isSetSteps() {
    return this.steps != null;
  }

  public void setStepsIsSet(boolean __value) {
    if (!__value) {
      this.steps = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SRC:
      if (__value == null) {
        unsetSrc();
      } else {
        setSrc((Vertex)__value);
      }
      break;

    case STEPS:
      if (__value == null) {
        unsetSteps();
      } else {
        setSteps((List<Step>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SRC:
      return getSrc();

    case STEPS:
      return getSteps();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Path))
      return false;
    Path that = (Path)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetSrc(), that.isSetSrc(), this.src, that.src)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSteps(), that.isSetSteps(), this.steps, that.steps)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {src, steps});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SRC:
          if (__field.type == TType.STRUCT) {
            this.src = new Vertex();
            this.src.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STEPS:
          if (__field.type == TType.LIST) {
            {
              TList _list56 = iprot.readListBegin();
              this.steps = new ArrayList<Step>(Math.max(0, _list56.size));
              for (int _i57 = 0; 
                   (_list56.size < 0) ? iprot.peekList() : (_i57 < _list56.size); 
                   ++_i57)
              {
                Step _elem58;
                _elem58 = new Step();
                _elem58.read(iprot);
                this.steps.add(_elem58);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.src != null) {
      oprot.writeFieldBegin(SRC_FIELD_DESC);
      this.src.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.steps != null) {
      oprot.writeFieldBegin(STEPS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.steps.size()));
        for (Step _iter59 : this.steps)        {
          _iter59.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Path");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("src");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSrc() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSrc(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("steps");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSteps() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSteps(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

