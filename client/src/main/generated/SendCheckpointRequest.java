/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SendCheckpointRequest implements TBase, java.io.Serializable, Cloneable, Comparable<SendCheckpointRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("SendCheckpointRequest");
  private static final TField SPACE_FIELD_DESC = new TField("space", TType.I32, (short)1);
  private static final TField PART_FIELD_DESC = new TField("part", TType.I32, (short)2);
  private static final TField CURRENT_TERM_FIELD_DESC = new TField("current_term", TType.I64, (short)3);
  private static final TField LEADER_ADDR_FIELD_DESC = new TField("leader_addr", TType.STRING, (short)4);
  private static final TField LEADER_PORT_FIELD_DESC = new TField("leader_port", TType.I32, (short)5);
  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)6);

  public int space;
  public int part;
  public long current_term;
  public String leader_addr;
  public int leader_port;
  public boolean success;
  public static final int SPACE = 1;
  public static final int PART = 2;
  public static final int CURRENT_TERM = 3;
  public static final int LEADER_ADDR = 4;
  public static final int LEADER_PORT = 5;
  public static final int SUCCESS = 6;

  // isset id assignments
  private static final int __SPACE_ISSET_ID = 0;
  private static final int __PART_ISSET_ID = 1;
  private static final int __CURRENT_TERM_ISSET_ID = 2;
  private static final int __LEADER_PORT_ISSET_ID = 3;
  private static final int __SUCCESS_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SPACE, new FieldMetaData("space", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PART, new FieldMetaData("part", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(CURRENT_TERM, new FieldMetaData("current_term", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(LEADER_ADDR, new FieldMetaData("leader_addr", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(LEADER_PORT, new FieldMetaData("leader_port", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SendCheckpointRequest.class, metaDataMap);
  }

  public SendCheckpointRequest() {
  }

  public SendCheckpointRequest(
      int space,
      int part,
      long current_term,
      String leader_addr,
      int leader_port,
      boolean success) {
    this();
    this.space = space;
    setSpaceIsSet(true);
    this.part = part;
    setPartIsSet(true);
    this.current_term = current_term;
    setCurrent_termIsSet(true);
    this.leader_addr = leader_addr;
    this.leader_port = leader_port;
    setLeader_portIsSet(true);
    this.success = success;
    setSuccessIsSet(true);
  }

  public static class Builder {
    private int space;
    private int part;
    private long current_term;
    private String leader_addr;
    private int leader_port;
    private boolean success;

    BitSet __optional_isset = new BitSet(5);

    public Builder() {
    }

    public Builder setSpace(final int space) {
      this.space = space;
      __optional_isset.set(__SPACE_ISSET_ID, true);
      return this;
    }

    public Builder setPart(final int part) {
      this.part = part;
      __optional_isset.set(__PART_ISSET_ID, true);
      return this;
    }

    public Builder setCurrent_term(final long current_term) {
      this.current_term = current_term;
      __optional_isset.set(__CURRENT_TERM_ISSET_ID, true);
      return this;
    }

    public Builder setLeader_addr(final String leader_addr) {
      this.leader_addr = leader_addr;
      return this;
    }

    public Builder setLeader_port(final int leader_port) {
      this.leader_port = leader_port;
      __optional_isset.set(__LEADER_PORT_ISSET_ID, true);
      return this;
    }

    public Builder setSuccess(final boolean success) {
      this.success = success;
      __optional_isset.set(__SUCCESS_ISSET_ID, true);
      return this;
    }

    public SendCheckpointRequest build() {
      SendCheckpointRequest result = new SendCheckpointRequest();
      if (__optional_isset.get(__SPACE_ISSET_ID)) {
        result.setSpace(this.space);
      }
      if (__optional_isset.get(__PART_ISSET_ID)) {
        result.setPart(this.part);
      }
      if (__optional_isset.get(__CURRENT_TERM_ISSET_ID)) {
        result.setCurrent_term(this.current_term);
      }
      result.setLeader_addr(this.leader_addr);
      if (__optional_isset.get(__LEADER_PORT_ISSET_ID)) {
        result.setLeader_port(this.leader_port);
      }
      if (__optional_isset.get(__SUCCESS_ISSET_ID)) {
        result.setSuccess(this.success);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendCheckpointRequest(SendCheckpointRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.space = TBaseHelper.deepCopy(other.space);
    this.part = TBaseHelper.deepCopy(other.part);
    this.current_term = TBaseHelper.deepCopy(other.current_term);
    if (other.isSetLeader_addr()) {
      this.leader_addr = TBaseHelper.deepCopy(other.leader_addr);
    }
    this.leader_port = TBaseHelper.deepCopy(other.leader_port);
    this.success = TBaseHelper.deepCopy(other.success);
  }

  public SendCheckpointRequest deepCopy() {
    return new SendCheckpointRequest(this);
  }

  public int getSpace() {
    return this.space;
  }

  public SendCheckpointRequest setSpace(int space) {
    this.space = space;
    setSpaceIsSet(true);
    return this;
  }

  public void unsetSpace() {
    __isset_bit_vector.clear(__SPACE_ISSET_ID);
  }

  // Returns true if field space is set (has been assigned a value) and false otherwise
  public boolean isSetSpace() {
    return __isset_bit_vector.get(__SPACE_ISSET_ID);
  }

  public void setSpaceIsSet(boolean __value) {
    __isset_bit_vector.set(__SPACE_ISSET_ID, __value);
  }

  public int getPart() {
    return this.part;
  }

  public SendCheckpointRequest setPart(int part) {
    this.part = part;
    setPartIsSet(true);
    return this;
  }

  public void unsetPart() {
    __isset_bit_vector.clear(__PART_ISSET_ID);
  }

  // Returns true if field part is set (has been assigned a value) and false otherwise
  public boolean isSetPart() {
    return __isset_bit_vector.get(__PART_ISSET_ID);
  }

  public void setPartIsSet(boolean __value) {
    __isset_bit_vector.set(__PART_ISSET_ID, __value);
  }

  public long getCurrent_term() {
    return this.current_term;
  }

  public SendCheckpointRequest setCurrent_term(long current_term) {
    this.current_term = current_term;
    setCurrent_termIsSet(true);
    return this;
  }

  public void unsetCurrent_term() {
    __isset_bit_vector.clear(__CURRENT_TERM_ISSET_ID);
  }

  // Returns true if field current_term is set (has been assigned a value) and false otherwise
  public boolean isSetCurrent_term() {
    return __isset_bit_vector.get(__CURRENT_TERM_ISSET_ID);
  }

  public void setCurrent_termIsSet(boolean __value) {
    __isset_bit_vector.set(__CURRENT_TERM_ISSET_ID, __value);
  }

  public String getLeader_addr() {
    return this.leader_addr;
  }

  public SendCheckpointRequest setLeader_addr(String leader_addr) {
    this.leader_addr = leader_addr;
    return this;
  }

  public void unsetLeader_addr() {
    this.leader_addr = null;
  }

  // Returns true if field leader_addr is set (has been assigned a value) and false otherwise
  public boolean isSetLeader_addr() {
    return this.leader_addr != null;
  }

  public void setLeader_addrIsSet(boolean __value) {
    if (!__value) {
      this.leader_addr = null;
    }
  }

  public int getLeader_port() {
    return this.leader_port;
  }

  public SendCheckpointRequest setLeader_port(int leader_port) {
    this.leader_port = leader_port;
    setLeader_portIsSet(true);
    return this;
  }

  public void unsetLeader_port() {
    __isset_bit_vector.clear(__LEADER_PORT_ISSET_ID);
  }

  // Returns true if field leader_port is set (has been assigned a value) and false otherwise
  public boolean isSetLeader_port() {
    return __isset_bit_vector.get(__LEADER_PORT_ISSET_ID);
  }

  public void setLeader_portIsSet(boolean __value) {
    __isset_bit_vector.set(__LEADER_PORT_ISSET_ID, __value);
  }

  public boolean isSuccess() {
    return this.success;
  }

  public SendCheckpointRequest setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
  }

  // Returns true if field success is set (has been assigned a value) and false otherwise
  public boolean isSetSuccess() {
    return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean __value) {
    __isset_bit_vector.set(__SUCCESS_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SPACE:
      if (__value == null) {
        unsetSpace();
      } else {
        setSpace((Integer)__value);
      }
      break;

    case PART:
      if (__value == null) {
        unsetPart();
      } else {
        setPart((Integer)__value);
      }
      break;

    case CURRENT_TERM:
      if (__value == null) {
        unsetCurrent_term();
      } else {
        setCurrent_term((Long)__value);
      }
      break;

    case LEADER_ADDR:
      if (__value == null) {
        unsetLeader_addr();
      } else {
        setLeader_addr((String)__value);
      }
      break;

    case LEADER_PORT:
      if (__value == null) {
        unsetLeader_port();
      } else {
        setLeader_port((Integer)__value);
      }
      break;

    case SUCCESS:
      if (__value == null) {
        unsetSuccess();
      } else {
        setSuccess((Boolean)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SPACE:
      return new Integer(getSpace());

    case PART:
      return new Integer(getPart());

    case CURRENT_TERM:
      return new Long(getCurrent_term());

    case LEADER_ADDR:
      return getLeader_addr();

    case LEADER_PORT:
      return new Integer(getLeader_port());

    case SUCCESS:
      return new Boolean(isSuccess());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof SendCheckpointRequest))
      return false;
    SendCheckpointRequest that = (SendCheckpointRequest)_that;

    if (!TBaseHelper.equalsNobinary(this.space, that.space)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.part, that.part)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.current_term, that.current_term)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetLeader_addr(), that.isSetLeader_addr(), this.leader_addr, that.leader_addr)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.leader_port, that.leader_port)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.success, that.success)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {space, part, current_term, leader_addr, leader_port, success});
  }

  @Override
  public int compareTo(SendCheckpointRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpace()).compareTo(other.isSetSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(space, other.space);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPart()).compareTo(other.isSetPart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(part, other.part);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCurrent_term()).compareTo(other.isSetCurrent_term());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(current_term, other.current_term);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLeader_addr()).compareTo(other.isSetLeader_addr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(leader_addr, other.leader_addr);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLeader_port()).compareTo(other.isSetLeader_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(leader_port, other.leader_port);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(success, other.success);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SPACE:
          if (__field.type == TType.I32) {
            this.space = iprot.readI32();
            setSpaceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PART:
          if (__field.type == TType.I32) {
            this.part = iprot.readI32();
            setPartIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case CURRENT_TERM:
          if (__field.type == TType.I64) {
            this.current_term = iprot.readI64();
            setCurrent_termIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LEADER_ADDR:
          if (__field.type == TType.STRING) {
            this.leader_addr = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LEADER_PORT:
          if (__field.type == TType.I32) {
            this.leader_port = iprot.readI32();
            setLeader_portIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SUCCESS:
          if (__field.type == TType.BOOL) {
            this.success = iprot.readBool();
            setSuccessIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SPACE_FIELD_DESC);
    oprot.writeI32(this.space);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PART_FIELD_DESC);
    oprot.writeI32(this.part);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CURRENT_TERM_FIELD_DESC);
    oprot.writeI64(this.current_term);
    oprot.writeFieldEnd();
    if (this.leader_addr != null) {
      oprot.writeFieldBegin(LEADER_ADDR_FIELD_DESC);
      oprot.writeString(this.leader_addr);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LEADER_PORT_FIELD_DESC);
    oprot.writeI32(this.leader_port);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
    oprot.writeBool(this.success);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SendCheckpointRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("space");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSpace(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("part");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getPart(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("current_term");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getCurrent_term(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("leader_addr");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getLeader_addr() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getLeader_addr(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("leader_port");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getLeader_port(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("success");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isSuccess(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

