/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class StartSendCheckpointResponse implements TBase, java.io.Serializable, Cloneable, Comparable<StartSendCheckpointResponse> {
  private static final TStruct STRUCT_DESC = new TStruct("StartSendCheckpointResponse");
  private static final TField ERROR_CODE_FIELD_DESC = new TField("error_code", TType.I32, (short)1);
  private static final TField PATH_FIELD_DESC = new TField("path", TType.STRING, (short)2);
  private static final TField HTTP_PORT_FIELD_DESC = new TField("httpPort", TType.I32, (short)3);

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode error_code;
  public byte[] path;
  public int httpPort;
  public static final int ERROR_CODE = 1;
  public static final int PATH = 2;
  public static final int HTTPPORT = 3;

  // isset id assignments
  private static final int __HTTPPORT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ERROR_CODE, new FieldMetaData("error_code", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PATH, new FieldMetaData("path", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(HTTPPORT, new FieldMetaData("httpPort", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(StartSendCheckpointResponse.class, metaDataMap);
  }

  public StartSendCheckpointResponse() {
  }

  public StartSendCheckpointResponse(
      com.vesoft.nebula.ErrorCode error_code,
      byte[] path,
      int httpPort) {
    this();
    this.error_code = error_code;
    this.path = path;
    this.httpPort = httpPort;
    setHttpPortIsSet(true);
  }

  public static class Builder {
    private com.vesoft.nebula.ErrorCode error_code;
    private byte[] path;
    private int httpPort;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setError_code(final com.vesoft.nebula.ErrorCode error_code) {
      this.error_code = error_code;
      return this;
    }

    public Builder setPath(final byte[] path) {
      this.path = path;
      return this;
    }

    public Builder setHttpPort(final int httpPort) {
      this.httpPort = httpPort;
      __optional_isset.set(__HTTPPORT_ISSET_ID, true);
      return this;
    }

    public StartSendCheckpointResponse build() {
      StartSendCheckpointResponse result = new StartSendCheckpointResponse();
      result.setError_code(this.error_code);
      result.setPath(this.path);
      if (__optional_isset.get(__HTTPPORT_ISSET_ID)) {
        result.setHttpPort(this.httpPort);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StartSendCheckpointResponse(StartSendCheckpointResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetError_code()) {
      this.error_code = TBaseHelper.deepCopy(other.error_code);
    }
    if (other.isSetPath()) {
      this.path = TBaseHelper.deepCopy(other.path);
    }
    this.httpPort = TBaseHelper.deepCopy(other.httpPort);
  }

  public StartSendCheckpointResponse deepCopy() {
    return new StartSendCheckpointResponse(this);
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public com.vesoft.nebula.ErrorCode getError_code() {
    return this.error_code;
  }

  /**
   * 
   * @see com.vesoft.nebula.ErrorCode
   */
  public StartSendCheckpointResponse setError_code(com.vesoft.nebula.ErrorCode error_code) {
    this.error_code = error_code;
    return this;
  }

  public void unsetError_code() {
    this.error_code = null;
  }

  // Returns true if field error_code is set (has been assigned a value) and false otherwise
  public boolean isSetError_code() {
    return this.error_code != null;
  }

  public void setError_codeIsSet(boolean __value) {
    if (!__value) {
      this.error_code = null;
    }
  }

  public byte[] getPath() {
    return this.path;
  }

  public StartSendCheckpointResponse setPath(byte[] path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  // Returns true if field path is set (has been assigned a value) and false otherwise
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean __value) {
    if (!__value) {
      this.path = null;
    }
  }

  public int getHttpPort() {
    return this.httpPort;
  }

  public StartSendCheckpointResponse setHttpPort(int httpPort) {
    this.httpPort = httpPort;
    setHttpPortIsSet(true);
    return this;
  }

  public void unsetHttpPort() {
    __isset_bit_vector.clear(__HTTPPORT_ISSET_ID);
  }

  // Returns true if field httpPort is set (has been assigned a value) and false otherwise
  public boolean isSetHttpPort() {
    return __isset_bit_vector.get(__HTTPPORT_ISSET_ID);
  }

  public void setHttpPortIsSet(boolean __value) {
    __isset_bit_vector.set(__HTTPPORT_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ERROR_CODE:
      if (__value == null) {
        unsetError_code();
      } else {
        setError_code((com.vesoft.nebula.ErrorCode)__value);
      }
      break;

    case PATH:
      if (__value == null) {
        unsetPath();
      } else {
        setPath((byte[])__value);
      }
      break;

    case HTTPPORT:
      if (__value == null) {
        unsetHttpPort();
      } else {
        setHttpPort((Integer)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ERROR_CODE:
      return getError_code();

    case PATH:
      return getPath();

    case HTTPPORT:
      return new Integer(getHttpPort());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof StartSendCheckpointResponse))
      return false;
    StartSendCheckpointResponse that = (StartSendCheckpointResponse)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetError_code(), that.isSetError_code(), this.error_code, that.error_code)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetPath(), that.isSetPath(), this.path, that.path)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.httpPort, that.httpPort)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {error_code, path, httpPort});
  }

  @Override
  public int compareTo(StartSendCheckpointResponse other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetError_code()).compareTo(other.isSetError_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(error_code, other.error_code);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(path, other.path);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHttpPort()).compareTo(other.isSetHttpPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(httpPort, other.httpPort);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case ERROR_CODE:
          if (__field.type == TType.I32) {
            this.error_code = com.vesoft.nebula.ErrorCode.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PATH:
          if (__field.type == TType.STRING) {
            this.path = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case HTTPPORT:
          if (__field.type == TType.I32) {
            this.httpPort = iprot.readI32();
            setHttpPortIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.error_code != null) {
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(this.error_code == null ? 0 : this.error_code.getValue());
      oprot.writeFieldEnd();
    }
    if (this.path != null) {
      oprot.writeFieldBegin(PATH_FIELD_DESC);
      oprot.writeBinary(this.path);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(HTTP_PORT_FIELD_DESC);
    oprot.writeI32(this.httpPort);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("StartSendCheckpointResponse");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("error_code");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getError_code() == null) {
      sb.append("null");
    } else {
      String error_code_name = this.getError_code() == null ? "null" : this.getError_code().name();
      if (error_code_name != null) {
        sb.append(error_code_name);
        sb.append(" (");
      }
      sb.append(this.getError_code());
      if (error_code_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("path");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getPath() == null) {
      sb.append("null");
    } else {
        int __path_size = Math.min(this.getPath().length, 128);
        for (int i = 0; i < __path_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getPath()[i]).length() > 1 ? Integer.toHexString(this.getPath()[i]).substring(Integer.toHexString(this.getPath()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getPath()[i]).toUpperCase());
        }
        if (this.getPath().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("httpPort");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getHttpPort(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

